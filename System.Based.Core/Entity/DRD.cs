

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
// 
// Do not make changes directly to this file - edit the template instead.
// 
// The following connection settings were used to generate this file:
//     Configuration file:     "System.Based.Core\App.config"
//     Connection String Name: "DrdContext"
//     Connection String:      "User ID=sa;Initial Catalog=drd;Data Source=.\sqlserver2012;password=**zapped**;;Integrated Security=True"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Developer Edition (64-bit)
// Database Engine Edition: Enterprise

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace System.Based.Core.Entity
{
    using System.Linq;

    // ************************************************************************
    // Unit of work
    public interface IDrdContext : System.IDisposable
    {
        System.Data.Entity.DbSet<ElementType> ElementTypes { get; set; } // ElementType
        System.Data.Entity.DbSet<ApplConfig> ApplConfigs { get; set; } // ApplConfig
        System.Data.Entity.DbSet<Company> Companies { get; set; } // Company
        System.Data.Entity.DbSet<CompanyBank> CompanyBanks { get; set; } // CompanyBank
        System.Data.Entity.DbSet<Document> Documents { get; set; } // Document
        System.Data.Entity.DbSet<DocumentElement> DocumentElements { get; set; } // DocumentElement
        System.Data.Entity.DbSet<Member> Members { get; set; } // Member
        System.Data.Entity.DbSet<MemberDepositTransfer> MemberDepositTransfers { get; set; } // MemberDepositTransfer
        System.Data.Entity.DbSet<MemberDepositTrx> MemberDepositTrxes { get; set; } // MemberDepositTrx
        System.Data.Entity.DbSet<MemberFolder> MemberFolders { get; set; } // MemberFolder
        System.Data.Entity.DbSet<MemberHitLog> MemberHitLogs { get; set; } // MemberHitLog
        System.Data.Entity.DbSet<MemberInvited> MemberInviteds { get; set; } // MemberInvited
        System.Data.Entity.DbSet<MemberPermission> MemberPermissions { get; set; } // MemberPermission
        System.Data.Entity.DbSet<Plan> Plans { get; set; } // Plan
        System.Data.Entity.DbSet<MemberProject> MemberProjects { get; set; } // MemberProject
        System.Data.Entity.DbSet<MemberRotation> MemberRotations { get; set; } // MemberRotation
        System.Data.Entity.DbSet<MemberSignHistory> MemberSignHistories { get; set; } // MemberSignHistory
        System.Data.Entity.DbSet<MemberSubscribe> MemberSubscribes { get; set; } // MemberSubscribe
        System.Data.Entity.DbSet<MemberTitle> MemberTitles { get; set; } // MemberTitle
        System.Data.Entity.DbSet<MemberType> MemberTypes { get; set; } // MemberType
        System.Data.Entity.DbSet<MemberWorkflow> MemberWorkflows { get; set; } // MemberWorkflow
        System.Data.Entity.DbSet<Message> Messages { get; set; } // Message
        System.Data.Entity.DbSet<Rotation> Rotations { get; set; } // Rotation
        System.Data.Entity.DbSet<RotationMember> RotationMembers { get; set; } // RotationMember
        System.Data.Entity.DbSet<RotationNode> RotationNodes { get; set; } // RotationNode
        System.Data.Entity.DbSet<RotationNodeDoc> RotationNodeDocs { get; set; } // RotationNodeDoc
        System.Data.Entity.DbSet<RotationNodeLog> RotationNodeLogs { get; set; } // RotationNodeLog
        System.Data.Entity.DbSet<RotationNodeRemark> RotationNodeRemarks { get; set; } // RotationNodeRemark
        System.Data.Entity.DbSet<RotationNodeUpDoc> RotationNodeUpDocs { get; set; } // RotationNodeUpDoc
        System.Data.Entity.DbSet<Symbol> Symbols { get; set; } // Symbol
        System.Data.Entity.DbSet<UserAdmin> UserAdmins { get; set; } // UserAdmin
        System.Data.Entity.DbSet<Versioning> Versionings { get; set; } // Versioning
        System.Data.Entity.DbSet<Workflow> Workflows { get; set; } // Workflow
        System.Data.Entity.DbSet<WorkflowNode> WorkflowNodes { get; set; } // WorkflowNode
        System.Data.Entity.DbSet<WorkflowNodeLink> WorkflowNodeLinks { get; set; } // WorkflowNodeLink

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
    }

    // ************************************************************************
    // Database context
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class DrdContext : System.Data.Entity.DbContext, IDrdContext
    {
        public System.Data.Entity.DbSet<ElementType> ElementTypes { get; set; } // ElementType
        public System.Data.Entity.DbSet<ApplConfig> ApplConfigs { get; set; } // ApplConfig
        public System.Data.Entity.DbSet<Company> Companies { get; set; } // Company
        public System.Data.Entity.DbSet<CompanyBank> CompanyBanks { get; set; } // CompanyBank
        public System.Data.Entity.DbSet<Document> Documents { get; set; } // Document
        public System.Data.Entity.DbSet<DocumentElement> DocumentElements { get; set; } // DocumentElement
        public System.Data.Entity.DbSet<Member> Members { get; set; } // Member
        public System.Data.Entity.DbSet<MemberDepositTransfer> MemberDepositTransfers { get; set; } // MemberDepositTransfer
        public System.Data.Entity.DbSet<MemberDepositTrx> MemberDepositTrxes { get; set; } // MemberDepositTrx
        public System.Data.Entity.DbSet<MemberFolder> MemberFolders { get; set; } // MemberFolder
        public System.Data.Entity.DbSet<MemberHitLog> MemberHitLogs { get; set; } // MemberHitLog
        public System.Data.Entity.DbSet<MemberInvited> MemberInviteds { get; set; } // MemberInvited
        public System.Data.Entity.DbSet<MemberPermission> MemberPermissions { get; set; } // MemberPermission
        public System.Data.Entity.DbSet<Plan> Plans { get; set; } // Plan
        public System.Data.Entity.DbSet<MemberProject> MemberProjects { get; set; } // MemberProject
        public System.Data.Entity.DbSet<MemberRotation> MemberRotations { get; set; } // MemberRotation
        public System.Data.Entity.DbSet<MemberSignHistory> MemberSignHistories { get; set; } // MemberSignHistory
        public System.Data.Entity.DbSet<MemberSubscribe> MemberSubscribes { get; set; } // MemberSubscribe
        public System.Data.Entity.DbSet<MemberTitle> MemberTitles { get; set; } // MemberTitle
        public System.Data.Entity.DbSet<MemberType> MemberTypes { get; set; } // MemberType
        public System.Data.Entity.DbSet<MemberWorkflow> MemberWorkflows { get; set; } // MemberWorkflow
        public System.Data.Entity.DbSet<Message> Messages { get; set; } // Message
        public System.Data.Entity.DbSet<Rotation> Rotations { get; set; } // Rotation
        public System.Data.Entity.DbSet<RotationMember> RotationMembers { get; set; } // RotationMember
        public System.Data.Entity.DbSet<RotationNode> RotationNodes { get; set; } // RotationNode
        public System.Data.Entity.DbSet<RotationNodeDoc> RotationNodeDocs { get; set; } // RotationNodeDoc
        public System.Data.Entity.DbSet<RotationNodeLog> RotationNodeLogs { get; set; } // RotationNodeLog
        public System.Data.Entity.DbSet<RotationNodeRemark> RotationNodeRemarks { get; set; } // RotationNodeRemark
        public System.Data.Entity.DbSet<RotationNodeUpDoc> RotationNodeUpDocs { get; set; } // RotationNodeUpDoc
        public System.Data.Entity.DbSet<Symbol> Symbols { get; set; } // Symbol
        public System.Data.Entity.DbSet<UserAdmin> UserAdmins { get; set; } // UserAdmin
        public System.Data.Entity.DbSet<Versioning> Versionings { get; set; } // Versioning
        public System.Data.Entity.DbSet<Workflow> Workflows { get; set; } // Workflow
        public System.Data.Entity.DbSet<WorkflowNode> WorkflowNodes { get; set; } // WorkflowNode
        public System.Data.Entity.DbSet<WorkflowNodeLink> WorkflowNodeLinks { get; set; } // WorkflowNodeLink

        static DrdContext()
        {
            System.Data.Entity.Database.SetInitializer<DrdContext>(null);
        }

        public DrdContext()
            : base("Name=DrdContext")
        {
        }

        public DrdContext(string connectionString)
            : base(connectionString)
        {
        }

        public DrdContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public DrdContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public DrdContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new ElementTypeConfiguration());
            modelBuilder.Configurations.Add(new ApplConfigConfiguration());
            modelBuilder.Configurations.Add(new BankConfiguration());
            modelBuilder.Configurations.Add(new BroadcastMessageConfiguration());
            modelBuilder.Configurations.Add(new CompanyConfiguration());
            modelBuilder.Configurations.Add(new CompanyBankConfiguration());
            modelBuilder.Configurations.Add(new DocumentConfiguration());
            modelBuilder.Configurations.Add(new DocumentElementConfiguration());
            modelBuilder.Configurations.Add(new DocumentMemberConfiguration());
            modelBuilder.Configurations.Add(new DocumentUploadConfiguration());
            modelBuilder.Configurations.Add(new DrDriveConfiguration());
            modelBuilder.Configurations.Add(new DrDriveTypeConfiguration());
            modelBuilder.Configurations.Add(new FaspayCreditStatuConfiguration());
            modelBuilder.Configurations.Add(new FaspayDebitStatuConfiguration());
            modelBuilder.Configurations.Add(new FaspayPaymentConfiguration());
            modelBuilder.Configurations.Add(new MemberConfiguration());
            modelBuilder.Configurations.Add(new MemberAccountConfiguration());
            modelBuilder.Configurations.Add(new MemberDepositTransferConfiguration());
            modelBuilder.Configurations.Add(new MemberDepositTrxConfiguration());
            modelBuilder.Configurations.Add(new MemberFolderConfiguration());
            modelBuilder.Configurations.Add(new MemberHitLogConfiguration());
            modelBuilder.Configurations.Add(new MemberInvitedConfiguration());
            modelBuilder.Configurations.Add(new MemberPermissionConfiguration());
            modelBuilder.Configurations.Add(new PlanConfiguration());
            modelBuilder.Configurations.Add(new PlanExtraConfiguration());
            modelBuilder.Configurations.Add(new PlanRequestConfiguration());
            modelBuilder.Configurations.Add(new MemberProjectConfiguration());
            modelBuilder.Configurations.Add(new MemberRotationConfiguration());
            modelBuilder.Configurations.Add(new MemberSignHistoryConfiguration());
            modelBuilder.Configurations.Add(new MemberSubscribeConfiguration());
            modelBuilder.Configurations.Add(new MemberTitleConfiguration());
            modelBuilder.Configurations.Add(new MemberTopupDepositConfiguration());
            modelBuilder.Configurations.Add(new MemberTopupPaymentConfiguration());
            modelBuilder.Configurations.Add(new MemberTypeConfiguration());
            modelBuilder.Configurations.Add(new MemberWorkflowConfiguration());
            modelBuilder.Configurations.Add(new MessageConfiguration());
            modelBuilder.Configurations.Add(new NewsConfiguration());
            modelBuilder.Configurations.Add(new NewsDetailConfiguration());
            modelBuilder.Configurations.Add(new NewsTypeConfiguration());
            modelBuilder.Configurations.Add(new NewsVideoConfiguration());
            modelBuilder.Configurations.Add(new PaymentMethodConfiguration());
            modelBuilder.Configurations.Add(new PaymentStatuConfiguration());
            modelBuilder.Configurations.Add(new PodCastConfiguration());
            modelBuilder.Configurations.Add(new ProjectConfiguration());
            modelBuilder.Configurations.Add(new RotationConfiguration());
            modelBuilder.Configurations.Add(new RotationMemberConfiguration());
            modelBuilder.Configurations.Add(new RotationNodeConfiguration());
            modelBuilder.Configurations.Add(new RotationNodeDocConfiguration());
            modelBuilder.Configurations.Add(new RotationNodeLogConfiguration());
            modelBuilder.Configurations.Add(new RotationNodeRemarkConfiguration());
            modelBuilder.Configurations.Add(new RotationNodeUpDocConfiguration());
            modelBuilder.Configurations.Add(new StampConfiguration());
            modelBuilder.Configurations.Add(new StatusCodeConfiguration());
            modelBuilder.Configurations.Add(new SubscriptExtraTypeConfiguration());
            modelBuilder.Configurations.Add(new SubscriptTypeConfiguration());
            modelBuilder.Configurations.Add(new SymbolConfiguration());
            modelBuilder.Configurations.Add(new SysdiagramConfiguration());
            modelBuilder.Configurations.Add(new UserAdminConfiguration());
            modelBuilder.Configurations.Add(new VersioningConfiguration());
            modelBuilder.Configurations.Add(new VoucherConfiguration());
            modelBuilder.Configurations.Add(new VoucherGeneratorConfiguration());
            modelBuilder.Configurations.Add(new WorkflowConfiguration());
            modelBuilder.Configurations.Add(new WorkflowNodeConfiguration());
            modelBuilder.Configurations.Add(new WorkflowNodeLinkConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new ElementTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ApplConfigConfiguration(schema));
            modelBuilder.Configurations.Add(new BankConfiguration(schema));
            modelBuilder.Configurations.Add(new BroadcastMessageConfiguration(schema));
            modelBuilder.Configurations.Add(new CompanyConfiguration(schema));
            modelBuilder.Configurations.Add(new CompanyBankConfiguration(schema));
            modelBuilder.Configurations.Add(new DocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new DocumentElementConfiguration(schema));
            modelBuilder.Configurations.Add(new DocumentMemberConfiguration(schema));
            modelBuilder.Configurations.Add(new DocumentUploadConfiguration(schema));
            modelBuilder.Configurations.Add(new DrDriveConfiguration(schema));
            modelBuilder.Configurations.Add(new DrDriveTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new FaspayCreditStatuConfiguration(schema));
            modelBuilder.Configurations.Add(new FaspayDebitStatuConfiguration(schema));
            modelBuilder.Configurations.Add(new FaspayPaymentConfiguration(schema));
            modelBuilder.Configurations.Add(new MemberConfiguration(schema));
            modelBuilder.Configurations.Add(new MemberAccountConfiguration(schema));
            modelBuilder.Configurations.Add(new MemberDepositTransferConfiguration(schema));
            modelBuilder.Configurations.Add(new MemberDepositTrxConfiguration(schema));
            modelBuilder.Configurations.Add(new MemberFolderConfiguration(schema));
            modelBuilder.Configurations.Add(new MemberHitLogConfiguration(schema));
            modelBuilder.Configurations.Add(new MemberInvitedConfiguration(schema));
            modelBuilder.Configurations.Add(new MemberPermissionConfiguration(schema));
            modelBuilder.Configurations.Add(new PlanConfiguration(schema));
            modelBuilder.Configurations.Add(new PlanExtraConfiguration(schema));
            modelBuilder.Configurations.Add(new PlanRequestConfiguration(schema));
            modelBuilder.Configurations.Add(new MemberProjectConfiguration(schema));
            modelBuilder.Configurations.Add(new MemberRotationConfiguration(schema));
            modelBuilder.Configurations.Add(new MemberSignHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new MemberSubscribeConfiguration(schema));
            modelBuilder.Configurations.Add(new MemberTitleConfiguration(schema));
            modelBuilder.Configurations.Add(new MemberTopupDepositConfiguration(schema));
            modelBuilder.Configurations.Add(new MemberTopupPaymentConfiguration(schema));
            modelBuilder.Configurations.Add(new MemberTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new MemberWorkflowConfiguration(schema));
            modelBuilder.Configurations.Add(new MessageConfiguration(schema));
            modelBuilder.Configurations.Add(new NewsConfiguration(schema));
            modelBuilder.Configurations.Add(new NewsDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new NewsTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new NewsVideoConfiguration(schema));
            modelBuilder.Configurations.Add(new PaymentMethodConfiguration(schema));
            modelBuilder.Configurations.Add(new PaymentStatuConfiguration(schema));
            modelBuilder.Configurations.Add(new PodCastConfiguration(schema));
            modelBuilder.Configurations.Add(new ProjectConfiguration(schema));
            modelBuilder.Configurations.Add(new RotationConfiguration(schema));
            modelBuilder.Configurations.Add(new RotationMemberConfiguration(schema));
            modelBuilder.Configurations.Add(new RotationNodeConfiguration(schema));
            modelBuilder.Configurations.Add(new RotationNodeDocConfiguration(schema));
            modelBuilder.Configurations.Add(new RotationNodeLogConfiguration(schema));
            modelBuilder.Configurations.Add(new RotationNodeRemarkConfiguration(schema));
            modelBuilder.Configurations.Add(new RotationNodeUpDocConfiguration(schema));
            modelBuilder.Configurations.Add(new StampConfiguration(schema));
            modelBuilder.Configurations.Add(new StatusCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new SubscriptExtraTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new SubscriptTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new SymbolConfiguration(schema));
            modelBuilder.Configurations.Add(new SysdiagramConfiguration(schema));
            modelBuilder.Configurations.Add(new UserAdminConfiguration(schema));
            modelBuilder.Configurations.Add(new VersioningConfiguration(schema));
            modelBuilder.Configurations.Add(new VoucherConfiguration(schema));
            modelBuilder.Configurations.Add(new VoucherGeneratorConfiguration(schema));
            modelBuilder.Configurations.Add(new WorkflowConfiguration(schema));
            modelBuilder.Configurations.Add(new WorkflowNodeConfiguration(schema));
            modelBuilder.Configurations.Add(new WorkflowNodeLinkConfiguration(schema));
            return modelBuilder;
        }
    }

    // ************************************************************************
    // Fake Database context
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FakeDrdContext : IDrdContext
    {
        public System.Data.Entity.DbSet<ElementType> ElementTypes { get; set; }
        public System.Data.Entity.DbSet<ApplConfig> ApplConfigs { get; set; }
        public System.Data.Entity.DbSet<Bank> Banks { get; set; }
        public System.Data.Entity.DbSet<BroadcastMessage> BroadcastMessages { get; set; }
        public System.Data.Entity.DbSet<Company> Companies { get; set; }
        public System.Data.Entity.DbSet<CompanyBank> CompanyBanks { get; set; }
        public System.Data.Entity.DbSet<Document> Documents { get; set; }
        public System.Data.Entity.DbSet<DocumentElement> DocumentElements { get; set; }
        public System.Data.Entity.DbSet<DocumentMember> DocumentMembers { get; set; }
        public System.Data.Entity.DbSet<DocumentUpload> DocumentUploads { get; set; }
        public System.Data.Entity.DbSet<DrDrive> DrDrives { get; set; }
        public System.Data.Entity.DbSet<DrDriveType> DrDriveTypes { get; set; }
        public System.Data.Entity.DbSet<FaspayCreditStatu> FaspayCreditStatus { get; set; }
        public System.Data.Entity.DbSet<FaspayDebitStatu> FaspayDebitStatus { get; set; }
        public System.Data.Entity.DbSet<FaspayPayment> FaspayPayments { get; set; }
        public System.Data.Entity.DbSet<Member> Members { get; set; }
        public System.Data.Entity.DbSet<MemberAccount> MemberAccounts { get; set; }
        public System.Data.Entity.DbSet<MemberDepositTransfer> MemberDepositTransfers { get; set; }
        public System.Data.Entity.DbSet<MemberDepositTrx> MemberDepositTrxes { get; set; }
        public System.Data.Entity.DbSet<MemberFolder> MemberFolders { get; set; }
        public System.Data.Entity.DbSet<MemberHitLog> MemberHitLogs { get; set; }
        public System.Data.Entity.DbSet<MemberInvited> MemberInviteds { get; set; }
        public System.Data.Entity.DbSet<MemberPermission> MemberPermissions { get; set; }
        public System.Data.Entity.DbSet<Plan> Plans { get; set; }
        public System.Data.Entity.DbSet<PlanExtra> PlanExtras { get; set; }
        public System.Data.Entity.DbSet<PlanRequest> PlanRequests { get; set; }
        public System.Data.Entity.DbSet<MemberProject> MemberProjects { get; set; }
        public System.Data.Entity.DbSet<MemberRotation> MemberRotations { get; set; }
        public System.Data.Entity.DbSet<MemberSignHistory> MemberSignHistories { get; set; }
        public System.Data.Entity.DbSet<MemberSubscribe> MemberSubscribes { get; set; }
        public System.Data.Entity.DbSet<MemberTitle> MemberTitles { get; set; }
        public System.Data.Entity.DbSet<MemberTopupDeposit> MemberTopupDeposits { get; set; }
        public System.Data.Entity.DbSet<MemberTopupPayment> MemberTopupPayments { get; set; }
        public System.Data.Entity.DbSet<MemberType> MemberTypes { get; set; }
        public System.Data.Entity.DbSet<MemberWorkflow> MemberWorkflows { get; set; }
        public System.Data.Entity.DbSet<Message> Messages { get; set; }
        public System.Data.Entity.DbSet<News> News { get; set; }
        public System.Data.Entity.DbSet<NewsDetail> NewsDetails { get; set; }
        public System.Data.Entity.DbSet<NewsType> NewsTypes { get; set; }
        public System.Data.Entity.DbSet<NewsVideo> NewsVideos { get; set; }
        public System.Data.Entity.DbSet<PaymentMethod> PaymentMethods { get; set; }
        public System.Data.Entity.DbSet<PaymentStatu> PaymentStatus { get; set; }
        public System.Data.Entity.DbSet<PodCast> PodCasts { get; set; }
        public System.Data.Entity.DbSet<Project> Projects { get; set; }
        public System.Data.Entity.DbSet<Rotation> Rotations { get; set; }
        public System.Data.Entity.DbSet<RotationMember> RotationMembers { get; set; }
        public System.Data.Entity.DbSet<RotationNode> RotationNodes { get; set; }
        public System.Data.Entity.DbSet<RotationNodeDoc> RotationNodeDocs { get; set; }
        public System.Data.Entity.DbSet<RotationNodeLog> RotationNodeLogs { get; set; }
        public System.Data.Entity.DbSet<RotationNodeRemark> RotationNodeRemarks { get; set; }
        public System.Data.Entity.DbSet<RotationNodeUpDoc> RotationNodeUpDocs { get; set; }
        public System.Data.Entity.DbSet<Stamp> Stamps { get; set; }
        public System.Data.Entity.DbSet<StatusCode> StatusCodes { get; set; }
        public System.Data.Entity.DbSet<SubscriptExtraType> SubscriptExtraTypes { get; set; }
        public System.Data.Entity.DbSet<SubscriptType> SubscriptTypes { get; set; }
        public System.Data.Entity.DbSet<Symbol> Symbols { get; set; }
        public System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; }
        public System.Data.Entity.DbSet<UserAdmin> UserAdmins { get; set; }
        public System.Data.Entity.DbSet<Versioning> Versionings { get; set; }
        public System.Data.Entity.DbSet<Voucher> Vouchers { get; set; }
        public System.Data.Entity.DbSet<VoucherGenerator> VoucherGenerators { get; set; }
        public System.Data.Entity.DbSet<Workflow> Workflows { get; set; }
        public System.Data.Entity.DbSet<WorkflowNode> WorkflowNodes { get; set; }
        public System.Data.Entity.DbSet<WorkflowNodeLink> WorkflowNodeLinks { get; set; }

        public FakeDrdContext()
        {
            ElementTypes = new FakeDbSet<ElementType>("Id");
            ApplConfigs = new FakeDbSet<ApplConfig>("Id");
            Banks = new FakeDbSet<Bank>("Id");
            BroadcastMessages = new FakeDbSet<BroadcastMessage>("Id");
            Companies = new FakeDbSet<Company>("Id");
            CompanyBanks = new FakeDbSet<CompanyBank>("Id");
            Documents = new FakeDbSet<Document>("Id");
            DocumentElements = new FakeDbSet<DocumentElement>("Id");
            DocumentMembers = new FakeDbSet<DocumentMember>("Id");
            DocumentUploads = new FakeDbSet<DocumentUpload>("Id");
            DrDrives = new FakeDbSet<DrDrive>("Id");
            DrDriveTypes = new FakeDbSet<DrDriveType>("Id");
            FaspayCreditStatus = new FakeDbSet<FaspayCreditStatu>("Id");
            FaspayDebitStatus = new FakeDbSet<FaspayDebitStatu>("Id");
            FaspayPayments = new FakeDbSet<FaspayPayment>("Id");
            Members = new FakeDbSet<Member>("Id");
            MemberAccounts = new FakeDbSet<MemberAccount>("Id");
            MemberDepositTransfers = new FakeDbSet<MemberDepositTransfer>("Id");
            MemberDepositTrxes = new FakeDbSet<MemberDepositTrx>("Id");
            MemberFolders = new FakeDbSet<MemberFolder>("Id");
            MemberHitLogs = new FakeDbSet<MemberHitLog>("Id");
            MemberInviteds = new FakeDbSet<MemberInvited>("Id");
            MemberPermissions = new FakeDbSet<MemberPermission>("Id");
            Plans = new FakeDbSet<Plan>("Id");
            PlanExtras = new FakeDbSet<PlanExtra>("Id");
            PlanRequests = new FakeDbSet<PlanRequest>("Id");
            MemberProjects = new FakeDbSet<MemberProject>("Id");
            MemberRotations = new FakeDbSet<MemberRotation>("Id");
            MemberSignHistories = new FakeDbSet<MemberSignHistory>("Id");
            MemberSubscribes = new FakeDbSet<MemberSubscribe>("Id");
            MemberTitles = new FakeDbSet<MemberTitle>("Id");
            MemberTopupDeposits = new FakeDbSet<MemberTopupDeposit>("Id");
            MemberTopupPayments = new FakeDbSet<MemberTopupPayment>("Id");
            MemberTypes = new FakeDbSet<MemberType>("Id");
            MemberWorkflows = new FakeDbSet<MemberWorkflow>("Id");
            Messages = new FakeDbSet<Message>("Id");
            News = new FakeDbSet<News>("Id");
            NewsDetails = new FakeDbSet<NewsDetail>("Id");
            NewsTypes = new FakeDbSet<NewsType>("Id");
            NewsVideos = new FakeDbSet<NewsVideo>("Id");
            PaymentMethods = new FakeDbSet<PaymentMethod>("Id");
            PaymentStatus = new FakeDbSet<PaymentStatu>("Id");
            PodCasts = new FakeDbSet<PodCast>("Id");
            Projects = new FakeDbSet<Project>("Id");
            Rotations = new FakeDbSet<Rotation>("Id");
            RotationMembers = new FakeDbSet<RotationMember>("Id");
            RotationNodes = new FakeDbSet<RotationNode>("Id");
            RotationNodeDocs = new FakeDbSet<RotationNodeDoc>("Id");
            RotationNodeLogs = new FakeDbSet<RotationNodeLog>("Id");
            RotationNodeRemarks = new FakeDbSet<RotationNodeRemark>("Id");
            RotationNodeUpDocs = new FakeDbSet<RotationNodeUpDoc>("Id");
            Stamps = new FakeDbSet<Stamp>("Id");
            StatusCodes = new FakeDbSet<StatusCode>("Id");
            SubscriptExtraTypes = new FakeDbSet<SubscriptExtraType>("Id");
            SubscriptTypes = new FakeDbSet<SubscriptType>("Id");
            Symbols = new FakeDbSet<Symbol>("Id");
            Sysdiagrams = new FakeDbSet<Sysdiagram>("DiagramId");
            UserAdmins = new FakeDbSet<UserAdmin>("Id");
            Versionings = new FakeDbSet<Versioning>("Id");
            Vouchers = new FakeDbSet<Voucher>("Id");
            VoucherGenerators = new FakeDbSet<VoucherGenerator>("Id");
            Workflows = new FakeDbSet<Workflow>("Id");
            WorkflowNodes = new FakeDbSet<WorkflowNode>("Id");
            WorkflowNodeLinks = new FakeDbSet<WorkflowNodeLink>("Id");
        }
        
        public int SaveChangesCount { get; private set; } 
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }
        
        public void Dispose()
        {
            Dispose(true);
        }
    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class 
    { 
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;
 
        public FakeDbSet() 
        { 
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>(); 
            _query = _data.AsQueryable(); 
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>(); 
            _query = _data.AsQueryable(); 
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }
        
        public override TEntity Add(TEntity item) 
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Remove(TEntity item) 
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item); 
            return item; 
        } 
 
        public override TEntity Attach(TEntity item) 
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Create() 
        { 
            return System.Activator.CreateInstance<TEntity>(); 
        } 
 
        public override TDerivedEntity Create<TDerivedEntity>() 
        { 
            return System.Activator.CreateInstance<TDerivedEntity>(); 
        } 
 
        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local 
        { 
            get { return _data; } 
        } 
 
        System.Type IQueryable.ElementType
        { 
            get { return _query.ElementType; } 
        } 
 
        System.Linq.Expressions.Expression IQueryable.Expression 
        { 
            get { return _query.Expression; } 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); } 
        } 
 
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator()); 
        }
    } 

    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider 
    { 
        private readonly IQueryProvider _inner; 
 
        public FakeDbAsyncQueryProvider(IQueryProvider inner) 
        { 
            _inner = inner; 
        } 
 
        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TEntity>(expression); 
        } 
 
        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TElement>(expression); 
        } 
 
        public object Execute(System.Linq.Expressions.Expression expression) 
        { 
            return _inner.Execute(expression); 
        } 
 
        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression) 
        { 
            return _inner.Execute<TResult>(expression); 
        } 
 
        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute(expression)); 
        } 
 
        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression)); 
        } 
    } 
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T> 
    { 
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable) 
            : base(enumerable) 
        { } 
 
        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression) 
            : base(expression) 
        { } 
 
        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator()); 
        } 
 
        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator() 
        { 
            return GetAsyncEnumerator(); 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<T>(this); } 
        } 
    } 
 
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> 
    { 
        private readonly System.Collections.Generic.IEnumerator<T> _inner; 
 
        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner) 
        { 
            _inner = inner; 
        } 
 
        public void Dispose() 
        { 
            _inner.Dispose(); 
        } 
 
        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext()); 
        } 
 
        public T Current 
        { 
            get { return _inner.Current; } 
        } 
 
        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current 
        { 
            get { return Current; } 
        } 
    }

    // ************************************************************************
    // POCO classes

    // ElementType
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class ElementType
    {
        public int Id { get; set; } // Id (Primary key)
        public string Code { get; set; } // Code (length: 20)
        public string Descr { get; set; } // Descr (length: 500)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<DocumentElement> DocumentElements { get; set; } // DocumentElement.FK_DocumentElement_ElementType
        
        public ElementType()
        {
            DocumentElements = new System.Collections.Generic.List<DocumentElement>();
        }
    }

    // ApplConfig
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class ApplConfig
    {
        public int Id { get; set; } // Id (Primary key)
        public string Code { get; set; } // Code (length: 20)
        public string Descr { get; set; } // Descr (length: 50)
        public string Value { get; set; } // Value (length: 1000)
        public short Flag { get; set; } // Flag
        public string DataType { get; set; } // DataType (length: 20)
        public int DataLength { get; set; } // DataLength
        public string InitialValue { get; set; } // InitialValue (length: 1000)
        public string UserId { get; set; } // UserID (length: 20)
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated
        
        public ApplConfig()
        {
            Flag = 0;
            DataLength = 0;
        }
    }

    // Bank
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Bank
    {
        public int Id { get; set; } // Id (Primary key)
        public string Code { get; set; } // Code (length: 20)
        public string Name { get; set; } // Name (length: 50)
        public string Logo { get; set; } // Logo (length: 50)
        public int BankType { get; set; } // BankType
        public string UserId { get; set; } // UserId (length: 50)
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<CompanyBank> CompanyBanks { get; set; } // CompanyBank.FK_CompanyBank_Bank
        public virtual System.Collections.Generic.ICollection<MemberAccount> MemberAccounts { get; set; } // MemberAccount.FK_MemberAccount_Bank
        
        public Bank()
        {
            BankType = 1;
            CompanyBanks = new System.Collections.Generic.List<CompanyBank>();
            MemberAccounts = new System.Collections.Generic.List<MemberAccount>();
        }
    }

    // BroadcastMessage
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class BroadcastMessage
    {
        public long Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 200)
        public string TextMessage { get; set; } // TextMessage
        public int GroupType { get; set; } // GroupType
        public long CreatorId { get; set; } // CreatorId
        public System.DateTime DateCreated { get; set; } // DateCreated

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Message> Messages { get; set; } // Message.FK_Message_BroadcastMessage
        
        public BroadcastMessage()
        {
            GroupType = 0;
            Messages = new System.Collections.Generic.List<Message>();
        }
    }

    // Company
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Company
    {
        public long Id { get; set; } // Id (Primary key)
        public string Code { get; set; } // Code (length: 10)
        public string Name { get; set; } // Name (length: 50)
        public string Contact { get; set; } // Contact (length: 50)
        public string Phone { get; set; } // Phone (length: 20)
        public string Email { get; set; } // Email (length: 100)
        public string Descr { get; set; } // Descr
        public string Address { get; set; } // Address (length: 1000)
        public string PointLocation { get; set; } // PointLocation (length: 1000)
        public decimal Latitude { get; set; } // Latitude
        public decimal Longitude { get; set; } // Longitude
        public string CountryCode { get; set; } // CountryCode (length: 10)
        public string CountryName { get; set; } // CountryName (length: 50)
        public string AdminArea { get; set; } // AdminArea (length: 50)
        public string SubAdminArea { get; set; } // SubAdminArea (length: 50)
        public string Locality { get; set; } // Locality (length: 50)
        public string SubLocality { get; set; } // SubLocality (length: 50)
        public string Thoroughfare { get; set; } // Thoroughfare (length: 50)
        public string SubThoroughfare { get; set; } // SubThoroughfare (length: 10)
        public string PostalCode { get; set; } // PostalCode (length: 5)
        public string Image1 { get; set; } // Image1 (length: 100)
        public string Image2 { get; set; } // Image2 (length: 100)
        public string ImageCard { get; set; } // ImageCard (length: 100)
        public string BackColorBar { get; set; } // BackColorBar (length: 20)
        public string BackColorPage { get; set; } // BackColorPage (length: 20)
        public int CompanyType { get; set; } // CompanyType
        public string ImageQrCode { get; set; } // ImageQrCode (length: 50)
        public bool IsActive { get; set; } // IsActive
        public string UserId { get; set; } // UserId (length: 50)
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Document> Documents { get; set; } // Document.FK_Document_Company
        public virtual System.Collections.Generic.ICollection<Member> Members { get; set; } // Member.FK_Member_Company
        public virtual System.Collections.Generic.ICollection<MemberSubscribe> MemberSubscribes { get; set; } // MemberSubscribe.FK_MemberSubscribe_Company
        public virtual System.Collections.Generic.ICollection<Project> Projects { get; set; } // Project.FK_Project_Company
        public virtual System.Collections.Generic.ICollection<Stamp> Stamps { get; set; } // Stamp.FK_Stamp_Company
        
        public Company()
        {
            Latitude = 0m;
            Longitude = 0m;
            CompanyType = 0;
            IsActive = true;
            UserId = "SYST";
            DateCreated = System.DateTime.Now;
            Documents = new System.Collections.Generic.List<Document>();
            Members = new System.Collections.Generic.List<Member>();
            MemberSubscribes = new System.Collections.Generic.List<MemberSubscribe>();
            Projects = new System.Collections.Generic.List<Project>();
            Stamps = new System.Collections.Generic.List<Stamp>();
        }
    }

    // CompanyBank
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class CompanyBank
    {
        public int Id { get; set; } // Id (Primary key)
        public int BankId { get; set; } // BankId
        public string Branch { get; set; } // Branch (length: 100)
        public string AccountNo { get; set; } // AccountNo (length: 50)
        public string AccountName { get; set; } // AccountName (length: 50)
        public int PaymentMethodId { get; set; } // PaymentMethodId
        public bool IsActive { get; set; } // IsActive
        public string UserId { get; set; } // UserId (length: 50)
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<MemberTopupPayment> MemberTopupPayments { get; set; } // MemberTopupPayment.FK_MemberTopupPayment_CompanyBank

        // Foreign keys
        public virtual Bank Bank { get; set; } // FK_CompanyBank_Bank
        public virtual PaymentMethod PaymentMethod { get; set; } // FK_CompanyBank_PaymentMethod
        
        public CompanyBank()
        {
            IsActive = true;
            MemberTopupPayments = new System.Collections.Generic.List<MemberTopupPayment>();
        }
    }

    // Document
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Document
    {
        public long Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 500)
        public string Descr { get; set; } // Descr
        public string FileName { get; set; } // FileName (length: 100)
        public string FileNameOri { get; set; } // FileNameOri (length: 100)
        public string ExtFile { get; set; } // ExtFile (length: 20)
        public int FileFlag { get; set; } // FileFlag
        public int FileSize { get; set; } // FileSize
        public int MaxPrint { get; set; } // MaxPrint
        public int MaxDownload { get; set; } // MaxDownload
        public int ExpiryDay { get; set; } // ExpiryDay
        public string Version { get; set; } // Version (length: 20)
        public long CompanyId { get; set; } // CompanyId
        public long MemberFolderId { get; set; } // MemberFolderId
        public long? CreatorId { get; set; } // CreatorId
        public string UserId { get; set; } // UserId (length: 50)
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<DocumentElement> DocumentElements { get; set; } // DocumentElement.FK_DocumentElement_Document
        public virtual System.Collections.Generic.ICollection<DocumentMember> DocumentMembers { get; set; } // DocumentMember.FK_DocumentMember_Document
        public virtual System.Collections.Generic.ICollection<RotationNodeDoc> RotationNodeDocs { get; set; } // RotationNodeDoc.FK_RotationNodeDoc_Document

        // Foreign keys
        public virtual Company Company { get; set; } // FK_Document_Company
        
        public Document()
        {
            FileFlag = 0;
            FileSize = 0;
            MaxPrint = 0;
            MaxDownload = 0;
            ExpiryDay = 0;
            MemberFolderId = 0;
            DocumentElements = new System.Collections.Generic.List<DocumentElement>();
            DocumentMembers = new System.Collections.Generic.List<DocumentMember>();
            RotationNodeDocs = new System.Collections.Generic.List<RotationNodeDoc>();
        }
    }

    // DocumentElement
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class DocumentElement
    {
        public long Id { get; set; } // Id (Primary key)
        public long DocumentId { get; set; } // DocumentId
        public int Page { get; set; } // Page
        public int ElementTypeId { get; set; } // ElementTypeId
        public double? LeftPos { get; set; } // LeftPos
        public double? TopPos { get; set; } // TopPos
        public double? WidthPos { get; set; } // WidthPos
        public double? HeightPos { get; set; } // HeightPos
        public string Color { get; set; } // Color (length: 50)
        public string BackColor { get; set; } // BackColor (length: 50)
        public string Data { get; set; } // Data
        public string Data2 { get; set; } // Data2
        public int Rotation { get; set; } // Rotation
        public double ScaleX { get; set; } // ScaleX
        public double ScaleY { get; set; } // ScaleY
        public double TransX { get; set; } // TransX
        public double TransY { get; set; } // TransY
        public double StrokeWidth { get; set; } // StrokeWidth
        public double Opacity { get; set; } // Opacity
        public long? CreatorId { get; set; } // CreatorId
        public long? AnnotateId { get; set; } // AnnotateId
        public int Flag { get; set; } // Flag
        public string FlagCode { get; set; } // FlagCode (length: 20)
        public System.DateTime? FlagDate { get; set; } // FlagDate
        public string FlagImage { get; set; } // FlagImage (length: 100)
        public string UserId { get; set; } // UserId (length: 50)
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated

        // Foreign keys
        public virtual ElementType ElementType { get; set; } // FK_DocumentElement_ElementType
        public virtual Document Document { get; set; } // FK_DocumentElement_Document
        
        public DocumentElement()
        {
            Rotation = 0;
            ScaleX = 1;
            ScaleY = 1;
            TransX = 0;
            TransY = 0;
            StrokeWidth = 4;
            Opacity = 1;
            Flag = 0;
        }
    }

    // DocumentMember
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class DocumentMember
    {
        public long Id { get; set; } // Id (Primary key)
        public long DocumentId { get; set; } // DocumentId
        public long MemberId { get; set; } // MemberId
        public int FlagAction { get; set; } // FlagAction
        public int CxPrint { get; set; } // CxPrint
        public int CxDownload { get; set; } // CxDownload

        // Foreign keys
        public virtual Document Document { get; set; } // FK_DocumentMember_Document
        public virtual Member Member { get; set; } // FK_DocumentMember_Member
        
        public DocumentMember()
        {
            FlagAction = 0;
            CxPrint = 0;
            CxDownload = 0;
        }
    }

    // DocumentUpload
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class DocumentUpload
    {
        public long Id { get; set; } // Id (Primary key)
        public string FileName { get; set; } // FileName (length: 100)
        public string FileNameOri { get; set; } // FileNameOri (length: 100)
        public string ExtFile { get; set; } // ExtFile (length: 20)
        public int FileFlag { get; set; } // FileFlag
        public int FileSize { get; set; } // FileSize
        public long? CreatorId { get; set; } // CreatorId
        public System.DateTime DateCreated { get; set; } // DateCreated

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<RotationNodeUpDoc> RotationNodeUpDocs { get; set; } // RotationNodeUpDoc.FK_RotationNodeUpDoc_DocumentUpload
        
        public DocumentUpload()
        {
            FileFlag = 0;
            FileSize = 0;
            RotationNodeUpDocs = new System.Collections.Generic.List<RotationNodeUpDoc>();
        }
    }

    // DrDrive
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class DrDrive
    {
        public long Id { get; set; } // Id (Primary key)
        public string Descr { get; set; } // Descr
        public string FileName { get; set; } // FileName (length: 100)
        public string FileNameOri { get; set; } // FileNameOri (length: 100)
        public string ExtFile { get; set; } // ExtFile (length: 20)
        public int FileFlag { get; set; } // FileFlag
        public long FileSize { get; set; } // FileSize
        public int CxDownload { get; set; } // CxDownload
        public long MemberFolderId { get; set; } // MemberFolderId
        public long? MemberId { get; set; } // MemberId
        public long? DocumentId { get; set; } // DocumentId
        public long? DocumentUploadId { get; set; } // DocumentUploadId
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated
        
        public DrDrive()
        {
            FileFlag = 0;
            FileSize = 0;
            CxDownload = 0;
            MemberFolderId = 0;
        }
    }

    // DrDriveType
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class DrDriveType
    {
        public int Id { get; set; } // Id (Primary key)
        public long Size { get; set; } // Size
        public decimal Price { get; set; } // Price
        public int ExpiryDay { get; set; } // ExpiryDay
        
        public DrDriveType()
        {
            Price = 0m;
            ExpiryDay = 0;
        }
    }

    // FaspayCreditStatus
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FaspayCreditStatu
    {
        public long Id { get; set; } // Id (Primary key)
        public System.DateTime DateCreated { get; set; } // DateCreated
        public string PaymentMethod { get; set; } // PAYMENT_METHOD (length: 1)
        public string Merchantid { get; set; } // MERCHANTID (length: 30)
        public string MerchantTranid { get; set; } // MERCHANT_TRANID (length: 100)
        public string ErrCode { get; set; } // ERR_CODE (length: 10)
        public string ErrDesc { get; set; } // ERR_DESC (length: 250)
        public string UsrCode { get; set; } // USR_CODE (length: 4)
        public string UsrMsg { get; set; } // USR_MSG (length: 200)
        public string TxnStatus { get; set; } // TXN_STATUS (length: 3)
        public string Custname { get; set; } // CUSTNAME (length: 120)
        public string Description { get; set; } // DESCRIPTION (length: 100)
        public string Currencycode { get; set; } // CURRENCYCODE (length: 3)
        public decimal? Amount { get; set; } // AMOUNT
        public string Signature { get; set; } // SIGNATURE (length: 40)
        public string Eui { get; set; } // EUI (length: 3)
        public int? Transactionid { get; set; } // TRANSACTIONID
        public string Transactiontype { get; set; } // TRANSACTIONTYPE (length: 2)
        public string Mparam1 { get; set; } // MPARAM1 (length: 200)
        public string Mparam2 { get; set; } // MPARAM2 (length: 200)
        public string AcquirerId { get; set; } // ACQUIRER_ID (length: 30)
        public string Trandate { get; set; } // TRANDATE (length: 19)
        public string IsBlacklisted { get; set; } // IS_BLACKLISTED (length: 5)
        public int? Fraudrisklevel { get; set; } // FRAUDRISKLEVEL
        public decimal? Fraudriskscore { get; set; } // FRAUDRISKSCORE
        public int? PointUsed { get; set; } // POINT_USED
        public decimal? PointAmount { get; set; } // POINT_AMOUNT
        public decimal? PaymentAmount { get; set; } // PAYMENT_AMOUNT
        public decimal? PointBalance { get; set; } // POINT_BALANCE
        public string ExceedHighRisk { get; set; } // EXCEED_HIGH_RISK (length: 5)
        public string Cardtype { get; set; } // CARDTYPE (length: 5)
        public string CardNoPartial { get; set; } // CARD_NO_PARTIAL (length: 20)
        public string Cardname { get; set; } // CARDNAME (length: 100)
        public string IsOnUs { get; set; } // is_on_us (length: 3)
        public string AcquirerBank { get; set; } // ACQUIRER_BANK (length: 3)
        public string WhitelistCard { get; set; } // WHITELIST_CARD (length: 3)
        public string BankResCode { get; set; } // BANK_RES_CODE (length: 20)
        public string BankResMsg { get; set; } // BANK_RES_MSG (length: 250)
        public string AuthId { get; set; } // AUTH_ID (length: 20)
        public string BankReference { get; set; } // BANK_REFERENCE (length: 100)
        public string InstallmentCode { get; set; } // INSTALLMENT_CODE (length: 10)
        public string InstallmentTerm { get; set; } // INSTALLMENT_TERM (length: 20)
        public decimal? InstallmentMonthly { get; set; } // INSTALLMENT_MONTHLY
        public decimal? InstallmentLast { get; set; } // INSTALLMENT_LAST
        
        public FaspayCreditStatu()
        {
            DateCreated = System.DateTime.Now;
        }
    }

    // FaspayDebitStatus
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FaspayDebitStatu
    {
        public long Id { get; set; } // Id (Primary key)
        public System.DateTime DateCreated { get; set; } // DateCreated
        public string Request { get; set; } // request (length: 1000)
        public string TrxId { get; set; } // trx_id (length: 1000)
        public string MerchantId { get; set; } // merchant_id (length: 1000)
        public string Merchant { get; set; } // merchant (length: 1000)
        public string BillNo { get; set; } // bill_no (length: 1000)
        public string PaymentReff { get; set; } // payment_reff (length: 1000)
        public string PaymentDate { get; set; } // payment_date (length: 1000)
        public string PaymentStatusCode { get; set; } // payment_status_code (length: 1000)
        public string PaymentStatusDesc { get; set; } // payment_status_desc (length: 1000)
        public string Signature { get; set; } // signature (length: 1000)
        public string Amount { get; set; } // amount (length: 1000)
        public string PaymentTotal { get; set; } // payment_total (length: 1000)
        
        public FaspayDebitStatu()
        {
            DateCreated = System.DateTime.Now;
        }
    }

    // FaspayPayment
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FaspayPayment
    {
        public long Id { get; set; } // Id (Primary key)
        public long PayId { get; set; } // PayId
        public string PayType { get; set; } // PayType (length: 20)
        public long TrxId { get; set; } // TrxId
        public string TrxNo { get; set; } // TrxNo (length: 50)
        public string TrxType { get; set; } // TrxType (length: 5)
        public System.DateTime DateCreated { get; set; } // DateCreated
        
        public FaspayPayment()
        {
            DateCreated = System.DateTime.Now;
        }
    }

    // Member
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Member
    {
        public long Id { get; set; } // Id (Primary key)
        public string Number { get; set; } // Number (length: 20)
        public int MemberTitleId { get; set; } // MemberTitleId
        public string Name { get; set; } // Name (length: 50)
        public string Phone { get; set; } // Phone (length: 20)
        public string Email { get; set; } // Email (length: 50)
        public int MemberType { get; set; } // MemberType
        public string KtpNo { get; set; } // KtpNo (length: 50)
        public string ImageProfile { get; set; } // ImageProfile (length: 50)
        public string ImageQrCode { get; set; } // ImageQrCode (length: 50)
        public System.DateTime? LastLogin { get; set; } // LastLogin
        public System.DateTime? LastLogout { get; set; } // LastLogout
        public long? ActivationKeyId { get; set; } // ActivationKeyId
        public string Password { get; set; } // Password (length: 500)
        public long? CompanyId { get; set; } // CompanyId
        public string UserGroup { get; set; } // UserGroup (length: 20)
        public string ImageSignature { get; set; } // ImageSignature (length: 100)
        public string ImageInitials { get; set; } // ImageInitials (length: 100)
        public string ImageStamp { get; set; } // ImageStamp (length: 100)
        public string ImageKtp1 { get; set; } // ImageKtp1 (length: 100)
        public string ImageKtp2 { get; set; } // ImageKtp2 (length: 100)
        public bool IsActive { get; set; } // IsActive
        public string UserId { get; set; } // UserId (length: 50)
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<DocumentMember> DocumentMembers { get; set; } // DocumentMember.FK_DocumentMember_Member
        public virtual System.Collections.Generic.ICollection<MemberAccount> MemberAccounts { get; set; } // MemberAccount.FK_MemberAccount_Member
        public virtual System.Collections.Generic.ICollection<MemberDepositTransfer> MemberDepositTransfers_FromId { get; set; } // MemberDepositTransfer.FK_MemberDepositTransfer_MemberFrom
        public virtual System.Collections.Generic.ICollection<MemberDepositTransfer> MemberDepositTransfers_ToId { get; set; } // MemberDepositTransfer.FK_MemberDepositTransfer_MemberTo
        public virtual System.Collections.Generic.ICollection<MemberDepositTrx> MemberDepositTrxes { get; set; } // MemberDepositTrx.FK_MemberDepositTrx_Member
        public virtual System.Collections.Generic.ICollection<MemberInvited> MemberInviteds_InvitedId { get; set; } // MemberInvited.FK_MemberInvited_Invited
        public virtual System.Collections.Generic.ICollection<MemberInvited> MemberInviteds_MemberId { get; set; } // MemberInvited.FK_MemberInvited_Member
        public virtual System.Collections.Generic.ICollection<MemberPermission> MemberPermissions { get; set; } // MemberPermission.FK_MemberPermission_Member
        public virtual System.Collections.Generic.ICollection<Plan> Plans { get; set; } // Plan.FK_Plan_Member
        public virtual System.Collections.Generic.ICollection<PlanRequest> PlanRequests { get; set; } // PlanRequest.FK_PlanRequest_Member
        public virtual System.Collections.Generic.ICollection<MemberSignHistory> MemberSignHistories { get; set; } // MemberSignHistory.FK_MemberSignHistory_Member
        public virtual System.Collections.Generic.ICollection<MemberTopupDeposit> MemberTopupDeposits { get; set; } // MemberTopupDeposit.FK_MemberTopupDeposit_Member
        public virtual System.Collections.Generic.ICollection<Message> Messages_FromId { get; set; } // Message.FK_Message_MemberFrom
        public virtual System.Collections.Generic.ICollection<Message> Messages_ToId { get; set; } // Message.FK_Message_MemberTo
        public virtual System.Collections.Generic.ICollection<Rotation> Rotations { get; set; } // Rotation.FK_Rotation_Member
        public virtual System.Collections.Generic.ICollection<RotationMember> RotationMembers { get; set; } // RotationMember.FK_RotationMember_Member
        public virtual System.Collections.Generic.ICollection<RotationNode> RotationNodes { get; set; } // RotationNode.FK_RotationNode_Member
        public virtual System.Collections.Generic.ICollection<WorkflowNode> WorkflowNodes { get; set; } // WorkflowNode.FK_WorkflowNode_Member

        // Foreign keys
        public virtual Company Company { get; set; } // FK_Member_Company
        public virtual MemberTitle MemberTitle { get; set; } // FK_Member_MemberTitle
        
        public Member()
        {
            MemberType = 1;
            IsActive = true;
            DocumentMembers = new System.Collections.Generic.List<DocumentMember>();
            MemberAccounts = new System.Collections.Generic.List<MemberAccount>();
            MemberDepositTransfers_FromId = new System.Collections.Generic.List<MemberDepositTransfer>();
            MemberDepositTransfers_ToId = new System.Collections.Generic.List<MemberDepositTransfer>();
            MemberDepositTrxes = new System.Collections.Generic.List<MemberDepositTrx>();
            MemberInviteds_InvitedId = new System.Collections.Generic.List<MemberInvited>();
            MemberInviteds_MemberId = new System.Collections.Generic.List<MemberInvited>();
            MemberPermissions = new System.Collections.Generic.List<MemberPermission>();
            Plans = new System.Collections.Generic.List<Plan>();
            PlanRequests = new System.Collections.Generic.List<PlanRequest>();
            MemberSignHistories = new System.Collections.Generic.List<MemberSignHistory>();
            MemberTopupDeposits = new System.Collections.Generic.List<MemberTopupDeposit>();
            Messages_FromId = new System.Collections.Generic.List<Message>();
            Messages_ToId = new System.Collections.Generic.List<Message>();
            Rotations = new System.Collections.Generic.List<Rotation>();
            RotationMembers = new System.Collections.Generic.List<RotationMember>();
            RotationNodes = new System.Collections.Generic.List<RotationNode>();
            WorkflowNodes = new System.Collections.Generic.List<WorkflowNode>();
        }
    }

    // MemberAccount
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberAccount
    {
        public long Id { get; set; } // Id (Primary key)
        public long MemberId { get; set; } // MemberId
        public string Title { get; set; } // Title (length: 20)
        public string AccountNo { get; set; } // AccountNo (length: 50)
        public string AccountName { get; set; } // AccountName (length: 50)
        public int BankId { get; set; } // BankId
        public string Branch { get; set; } // Branch (length: 50)
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<MemberTopupPayment> MemberTopupPayments { get; set; } // MemberTopupPayment.FK_MemberTopupPayment_MemberAccount

        // Foreign keys
        public virtual Bank Bank { get; set; } // FK_MemberAccount_Bank
        public virtual Member Member { get; set; } // FK_MemberAccount_Member
        
        public MemberAccount()
        {
            MemberTopupPayments = new System.Collections.Generic.List<MemberTopupPayment>();
        }
    }

    // MemberDepositTransfer
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberDepositTransfer
    {
        public long Id { get; set; } // Id (Primary key)
        public string TrfNo { get; set; } // TrfNo (length: 20)
        public System.DateTime TrfDate { get; set; } // TrfDate
        public long FromId { get; set; } // FromId
        public long ToId { get; set; } // ToId
        public decimal Amount { get; set; } // Amount
        public System.DateTime DateCreated { get; set; } // DateCreated

        // Foreign keys
        public virtual Member Member_FromId { get; set; } // FK_MemberDepositTransfer_MemberFrom
        public virtual Member Member_ToId { get; set; } // FK_MemberDepositTransfer_MemberTo
    }

    // MemberDepositTrx
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberDepositTrx
    {
        public long Id { get; set; } // Id (Primary key)
        public string TrxNo { get; set; } // TrxNo (length: 20)
        public System.DateTime TrxDate { get; set; } // TrxDate
        public string TrxType { get; set; } // TrxType (length: 10)
        public long TrxId { get; set; } // TrxId
        public string Descr { get; set; } // Descr (length: 500)
        public long MemberId { get; set; } // MemberId
        public decimal Amount { get; set; } // Amount
        public int DbCr { get; set; } // DbCr
        public System.DateTime DateCreated { get; set; } // DateCreated

        // Foreign keys
        public virtual Member Member { get; set; } // FK_MemberDepositTrx_Member
        
        public MemberDepositTrx()
        {
            DbCr = 0;
        }
    }

    // MemberFolder
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberFolder
    {
        public long Id { get; set; } // Id (Primary key)
        public long MemberId { get; set; } // MemberId
        public string Name { get; set; } // Name (length: 50)
        public string Descr { get; set; } // Descr (length: 250)
        public int FolderType { get; set; } // FolderType
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated
        
        public MemberFolder()
        {
            FolderType = 0;
        }
    }

    // MemberHitLog
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberHitLog
    {
        public long Id { get; set; } // Id (Primary key)
        public long MemberId { get; set; } // MemberId
        public long DataHitId { get; set; } // DataHitId
        public int DataHitType { get; set; } // DataHitType
        public System.DateTime DateCreated { get; set; } // DateCreated
        
        public MemberHitLog()
        {
            DateCreated = System.DateTime.Now;
        }
    }

    // MemberInvited
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberInvited
    {
        public long Id { get; set; } // Id (Primary key)
        public long MemberId { get; set; } // MemberId
        public long InvitedId { get; set; } // InvitedId
        public string Status { get; set; } // Status (length: 2)
        public System.DateTime DateExpiry { get; set; } // DateExpiry
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated

        // Foreign keys
        public virtual Member Member_InvitedId { get; set; } // FK_MemberInvited_Invited
        public virtual Member Member_MemberId { get; set; } // FK_MemberInvited_Member
        
        public MemberInvited()
        {
            Status = "00";
        }
    }

    // MemberPermission
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberPermission
    {
        public long Id { get; set; } // Id (Primary key)
        public long MemberId { get; set; } // MemberId
        public int Flag { get; set; } // Flag
        public string UserId { get; set; } // UserId (length: 50)
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<MemberSubscribe> MemberSubscribes { get; set; } // MemberSubscribe.FK_MemberSubscribe_MemberPermission

        // Foreign keys
        public virtual Member Member { get; set; } // FK_MemberPermission_Member
        
        public MemberPermission()
        {
            Flag = 0;
            MemberSubscribes = new System.Collections.Generic.List<MemberSubscribe>();
        }
    }

    // Plan
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Plan
    {
        public long Id { get; set; } // Id (Primary key)
        public long MemberId { get; set; } // MemberId
        public int SubscriptTypeId { get; set; } // SubscriptTypeId
        public decimal Price { get; set; } // Price
        public string PriceUnitCode { get; set; } // PriceUnitCode (length: 10)
        public string PriceUnitDescr { get; set; } // PriceUnitDescr (length: 50)
        public int RotationCount { get; set; } // RotationCount
        public decimal RotationPrice { get; set; } // RotationPrice
        public int RotationCountAdd { get; set; } // RotationCountAdd
        public int RotationCountUsed { get; set; } // RotationCountUsed
        public int FlowActivityCount { get; set; } // FlowActivityCount
        public decimal FlowActivityPrice { get; set; } // FlowActivityPrice
        public int FlowActivityCountAdd { get; set; } // FlowActivityCountAdd
        public int FlowActivityCountUsed { get; set; } // FlowActivityCountUsed
        public long StorageSize { get; set; } // StorageSize
        public decimal StoragePrice { get; set; } // StoragePrice
        public long StorageSizeAdd { get; set; } // StorageSizeAdd
        public long StorageSizeUsed { get; set; } // StorageSizeUsed
        public long DrDriveSize { get; set; } // DrDriveSize
        public decimal DrDrivePrice { get; set; } // DrDrivePrice
        public long DrDriveSizeAdd { get; set; } // DrDriveSizeAdd
        public long DrDriveSizeUsed { get; set; } // DrDriveSizeUsed
        public int ExpiryDocDay { get; set; } // ExpiryDocDay
        public int PackageExpiryDay { get; set; } // PackageExpiryDay
        public int DrDriveExpiryDay { get; set; } // DrDriveExpiryDay
        public System.DateTime? ValidPackage { get; set; } // ValidPackage
        public System.DateTime? ValidDrDrive { get; set; } // ValidDrDrive
        public bool IsDefault { get; set; } // IsDefault
        public string UserId { get; set; } // UserId (length: 50)
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<PlanExtra> PlanExtras { get; set; } // PlanExtra.FK_PlanExtra_Plan

        // Foreign keys
        public virtual Member Member { get; set; } // FK_Plan_Member
        public virtual SubscriptType SubscriptType { get; set; } // FK_Plan_SubscriptType
        
        public Plan()
        {
            Price = 0m;
            RotationCount = 0;
            RotationPrice = 0m;
            RotationCountAdd = 0;
            RotationCountUsed = 0;
            FlowActivityCount = 0;
            FlowActivityPrice = 0m;
            FlowActivityCountAdd = 0;
            FlowActivityCountUsed = 0;
            StoragePrice = 0m;
            StorageSizeAdd = 0;
            StorageSizeUsed = 0;
            DrDriveSize = 0;
            DrDrivePrice = 0m;
            DrDriveSizeAdd = 0;
            DrDriveSizeUsed = 0;
            ExpiryDocDay = 0;
            PackageExpiryDay = 0;
            DrDriveExpiryDay = 0;
            IsDefault = true;
            PlanExtras = new System.Collections.Generic.List<PlanExtra>();
        }
    }

    // PlanExtra
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class PlanExtra
    {
        public long Id { get; set; } // Id (Primary key)
        public long PlanId { get; set; } // PlanId
        public int RotationCount { get; set; } // RotationCount
        public decimal RotationPrice { get; set; } // RotationPrice
        public int FlowActivityCount { get; set; } // FlowActivityCount
        public decimal FlowActivityPrice { get; set; } // FlowActivityPrice
        public long StorageSize { get; set; } // StorageSize
        public decimal StoragePrice { get; set; } // StoragePrice
        public long DrDriveSize { get; set; } // DrDriveSize
        public decimal DrDrivePrice { get; set; } // DrDrivePrice
        public System.DateTime DateCreated { get; set; } // DateCreated

        // Foreign keys
        public virtual Plan Plan { get; set; } // FK_PlanExtra_Plan
        
        public PlanExtra()
        {
            RotationCount = 0;
            RotationPrice = 0m;
            FlowActivityCount = 0;
            FlowActivityPrice = 0m;
            StoragePrice = 0m;
            DrDriveSize = 0;
            DrDrivePrice = 0m;
        }
    }

    // PlanRequest
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class PlanRequest
    {
        public long Id { get; set; } // Id (Primary key)
        public long MemberId { get; set; } // MemberId
        public int SubscriptTypeId { get; set; } // SubscriptTypeId
        public int RotationCount { get; set; } // RotationCount
        public int FlowActivityCount { get; set; } // FlowActivityCount
        public long StorageSize { get; set; } // StorageSize
        public long DrDriveSize { get; set; } // DrDriveSize
        public int ExpiryDocDay { get; set; } // ExpiryDocDay
        public int PackageExpiryDay { get; set; } // PackageExpiryDay
        public string Status { get; set; } // Status (length: 2)
        public System.DateTime DateCreated { get; set; } // DateCreated

        // Foreign keys
        public virtual Member Member { get; set; } // FK_PlanRequest_Member
        public virtual SubscriptType SubscriptType { get; set; } // FK_PlanRequest_SubscriptType
        
        public PlanRequest()
        {
            RotationCount = 0;
            FlowActivityCount = 0;
            DrDriveSize = 0;
            ExpiryDocDay = 0;
            PackageExpiryDay = 0;
        }
    }

    // MemberProject
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberProject
    {
        public long Id { get; set; } // Id (Primary key)
        public long MemberSubscribeId { get; set; } // MemberSubscribeId
        public long ProjectId { get; set; } // ProjectId
        public int Flag { get; set; } // Flag

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<MemberWorkflow> MemberWorkflows { get; set; } // MemberWorkflow.FK_MemberWorkflow_MemberProject

        // Foreign keys
        public virtual MemberSubscribe MemberSubscribe { get; set; } // FK_MemberProject_MemberSubscribe
        public virtual Project Project { get; set; } // FK_MemberProject_Project
        
        public MemberProject()
        {
            Flag = 0;
            MemberWorkflows = new System.Collections.Generic.List<MemberWorkflow>();
        }
    }

    // MemberRotation
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberRotation
    {
        public long Id { get; set; } // Id (Primary key)
        public long MemberWorkflowId { get; set; } // MemberWorkflowId
        public long RotationId { get; set; } // RotationId
        public int Flag { get; set; } // Flag

        // Foreign keys
        public virtual MemberWorkflow MemberWorkflow { get; set; } // FK_MemberRotation_MemberWorkflow
        public virtual Rotation Rotation { get; set; } // FK_MemberRotation_Rotation
        
        public MemberRotation()
        {
            Flag = 0;
        }
    }

    // MemberSignHistory
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberSignHistory
    {
        public long Id { get; set; } // Id (Primary key)
        public long MemberId { get; set; } // MemberId
        public string ImageSign { get; set; } // ImageSign (length: 100)
        public int SignType { get; set; } // SignType
        public string UserId { get; set; } // UserId (length: 50)
        public System.DateTime DateCreated { get; set; } // DateCreated

        // Foreign keys
        public virtual Member Member { get; set; } // FK_MemberSignHistory_Member
    }

    // MemberSubscribe
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberSubscribe
    {
        public long Id { get; set; } // Id (Primary key)
        public long MemberPermissionId { get; set; } // MemberPermissionId
        public long CompanyId { get; set; } // CompanyId
        public int Flag { get; set; } // Flag

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<MemberProject> MemberProjects { get; set; } // MemberProject.FK_MemberProject_MemberSubscribe

        // Foreign keys
        public virtual Company Company { get; set; } // FK_MemberSubscribe_Company
        public virtual MemberPermission MemberPermission { get; set; } // FK_MemberSubscribe_MemberPermission
        
        public MemberSubscribe()
        {
            Flag = 0;
            MemberProjects = new System.Collections.Generic.List<MemberProject>();
        }
    }

    // MemberTitle
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberTitle
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 10)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Member> Members { get; set; } // Member.FK_Member_MemberTitle
        
        public MemberTitle()
        {
            Members = new System.Collections.Generic.List<Member>();
        }
    }

    // MemberTopupDeposit
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberTopupDeposit
    {
        public long Id { get; set; } // Id (Primary key)
        public string TopupNo { get; set; } // TopupNo (length: 20)
        public System.DateTime TopupDate { get; set; } // TopupDate
        public long MemberId { get; set; } // MemberId
        public decimal Amount { get; set; } // Amount
        public string PaymentStatus { get; set; } // PaymentStatus (length: 2)
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<MemberTopupPayment> MemberTopupPayments { get; set; } // MemberTopupPayment.FK_MemberTopupPayment_MemberTopupDeposit

        // Foreign keys
        public virtual Member Member { get; set; } // FK_MemberTopupDeposit_Member
        
        public MemberTopupDeposit()
        {
            MemberTopupPayments = new System.Collections.Generic.List<MemberTopupPayment>();
        }
    }

    // MemberTopupPayment
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberTopupPayment
    {
        public long Id { get; set; } // Id (Primary key)
        public string PaymentNo { get; set; } // PaymentNo (length: 20)
        public System.DateTime PaymentDate { get; set; } // PaymentDate
        public long TopupDepositId { get; set; } // TopupDepositId
        public decimal Amount { get; set; } // Amount
        public int CompanyBankId { get; set; } // CompanyBankId
        public long? MemberAccountId { get; set; } // MemberAccountId
        public string PaymentStatus { get; set; } // PaymentStatus (length: 2)
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated

        // Foreign keys
        public virtual CompanyBank CompanyBank { get; set; } // FK_MemberTopupPayment_CompanyBank
        public virtual MemberAccount MemberAccount { get; set; } // FK_MemberTopupPayment_MemberAccount
        public virtual MemberTopupDeposit MemberTopupDeposit { get; set; } // FK_MemberTopupPayment_MemberTopupDeposit
    }

    // MemberType
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberType
    {
        public int Id { get; set; } // Id (Primary key)
        public string Descr { get; set; } // Descr (length: 50)
        public string Info { get; set; } // Info (length: 1000)
        public int BitValue { get; set; } // BitValue
        public string UserId { get; set; } // UserId (length: 50)
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated
        
        public MemberType()
        {
            BitValue = 0;
        }
    }

    // MemberWorkflow
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberWorkflow
    {
        public long Id { get; set; } // Id (Primary key)
        public long MemberProjectId { get; set; } // MemberProjectId
        public long WorkflowId { get; set; } // WorkflowId
        public int Flag { get; set; } // Flag

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<MemberRotation> MemberRotations { get; set; } // MemberRotation.FK_MemberRotation_MemberWorkflow

        // Foreign keys
        public virtual MemberProject MemberProject { get; set; } // FK_MemberWorkflow_MemberProject
        public virtual Workflow Workflow { get; set; } // FK_MemberWorkflow_Workflow
        
        public MemberWorkflow()
        {
            Flag = 0;
            MemberRotations = new System.Collections.Generic.List<MemberRotation>();
        }
    }

    // Message
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Message
    {
        public long Id { get; set; } // Id (Primary key)
        public long FromId { get; set; } // FromId
        public long ToId { get; set; } // ToId
        public long? BroadcastMessageId { get; set; } // BroadcastMessageId
        public string TextMessage { get; set; } // TextMessage
        public int MessageType { get; set; } // MessageType
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateOpened { get; set; } // DateOpened
        public System.DateTime? DateReplied { get; set; } // DateReplied

        // Foreign keys
        public virtual BroadcastMessage BroadcastMessage { get; set; } // FK_Message_BroadcastMessage
        public virtual Member Member_FromId { get; set; } // FK_Message_MemberFrom
        public virtual Member Member_ToId { get; set; } // FK_Message_MemberTo
        
        public Message()
        {
            MessageType = 0;
        }
    }

    // News
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class News
    {
        public long Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 100)
        public string Descr { get; set; } // Descr
        public int NewsType { get; set; } // NewsType
        public bool IsActive { get; set; } // IsActive
        public long CreatorId { get; set; } // CreatorId
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<NewsDetail> NewsDetails { get; set; } // NewsDetail.FK_NewsDetail_News
        
        public News()
        {
            NewsType = 0;
            IsActive = true;
            NewsDetails = new System.Collections.Generic.List<NewsDetail>();
        }
    }

    // NewsDetail
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class NewsDetail
    {
        public long Id { get; set; } // Id (Primary key)
        public long NewsId { get; set; } // NewsId
        public string Image { get; set; } // Image (length: 50)
        public string Descr { get; set; } // Descr

        // Foreign keys
        public virtual News News { get; set; } // FK_NewsDetail_News
    }

    // NewsType
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class NewsType
    {
        public int Id { get; set; } // Id (Primary key)
        public string Descr { get; set; } // Descr (length: 50)
        public string Info { get; set; } // Info (length: 1000)
        public int BitValue { get; set; } // BitValue
        public string UserId { get; set; } // UserId (length: 50)
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated
        
        public NewsType()
        {
            BitValue = 0;
        }
    }

    // NewsVideo
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class NewsVideo
    {
        public long Id { get; set; } // Id (Primary key)
        public string Code { get; set; } // Code (length: 20)
        public string Title { get; set; } // Title (length: 500)
        public string Descr { get; set; } // Descr
        public string ChannelId { get; set; } // ChannelId (length: 100)
        public string ChannelTitle { get; set; } // ChannelTitle (length: 100)
        public long? CategoryId { get; set; } // CategoryId
        public System.DateTime DatePublished { get; set; } // DatePublished
        public bool IsActive { get; set; } // IsActive
        public long CreatorId { get; set; } // CreatorId
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated
        
        public NewsVideo()
        {
            IsActive = true;
            DateCreated = System.DateTime.Now;
        }
    }

    // PaymentMethod
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class PaymentMethod
    {
        public int Id { get; set; } // Id (Primary key)
        public string Code { get; set; } // Code (length: 5)
        public string Name { get; set; } // Name (length: 50)
        public string Logo { get; set; } // Logo (length: 50)
        public string Descr { get; set; } // Descr (length: 1000)
        public int UsingType { get; set; } // UsingType
        public int ConfirmType { get; set; } // ConfirmType
        public string AppZoneAccess { get; set; } // AppZoneAccess (length: 1000)
        public string UserId { get; set; } // UserId (length: 50)
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<CompanyBank> CompanyBanks { get; set; } // CompanyBank.FK_CompanyBank_PaymentMethod
        
        public PaymentMethod()
        {
            UsingType = 3;
            ConfirmType = 0;
            CompanyBanks = new System.Collections.Generic.List<CompanyBank>();
        }
    }

    // PaymentStatus
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class PaymentStatu
    {
        public int Id { get; set; } // Id (Primary key)
        public string Code { get; set; } // Code (length: 2)
        public string Descr { get; set; } // Descr (length: 20)
        public string UserId { get; set; } // UserId (length: 50)
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated
    }

    // PodCast
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class PodCast
    {
        public long Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 100)
        public string Descr { get; set; } // Descr
        public int Duration { get; set; } // Duration
        public string Image { get; set; } // Image (length: 100)
        public string AudioFileName { get; set; } // AudioFileName (length: 100)
        public string FileNameOri { get; set; } // FileNameOri (length: 100)
        public bool IsActive { get; set; } // IsActive
        public long CreatorId { get; set; } // CreatorId
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated
        
        public PodCast()
        {
            Duration = 0;
            IsActive = true;
        }
    }

    // Project
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Project
    {
        public long Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 100)
        public string Descr { get; set; } // Descr
        public long CompanyId { get; set; } // CompanyId
        public bool IsActive { get; set; } // IsActive
        public long? CreatorId { get; set; } // CreatorId
        public string UserId { get; set; } // UserId (length: 50)
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<MemberProject> MemberProjects { get; set; } // MemberProject.FK_MemberProject_Project
        public virtual System.Collections.Generic.ICollection<Workflow> Workflows { get; set; } // Workflow.FK_Workflow_Project

        // Foreign keys
        public virtual Company Company { get; set; } // FK_Project_Company
        
        public Project()
        {
            IsActive = true;
            MemberProjects = new System.Collections.Generic.List<MemberProject>();
            Workflows = new System.Collections.Generic.List<Workflow>();
        }
    }

    // Rotation
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Rotation
    {
        public long Id { get; set; } // Id (Primary key)
        public string Subject { get; set; } // Subject (length: 100)
        public long WorkflowId { get; set; } // WorkflowId
        public string Status { get; set; } // Status (length: 2)
        public string Remark { get; set; } // Remark
        public decimal Price { get; set; } // Price
        public long MemberId { get; set; } // MemberId
        public long? CreatorId { get; set; } // CreatorId
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated
        public System.DateTime? DateStatus { get; set; } // DateStatus
        public System.DateTime? DateStarted { get; set; } // DateStarted

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<MemberRotation> MemberRotations { get; set; } // MemberRotation.FK_MemberRotation_Rotation
        public virtual System.Collections.Generic.ICollection<RotationMember> RotationMembers { get; set; } // RotationMember.FK_RotationMember_Rotation
        public virtual System.Collections.Generic.ICollection<RotationNode> RotationNodes { get; set; } // RotationNode.FK_RotationNode_Rotation

        // Foreign keys
        public virtual Member Member { get; set; } // FK_Rotation_Member
        public virtual Workflow Workflow { get; set; } // FK_Rotation_Workflow
        
        public Rotation()
        {
            Price = 0m;
            MemberRotations = new System.Collections.Generic.List<MemberRotation>();
            RotationMembers = new System.Collections.Generic.List<RotationMember>();
            RotationNodes = new System.Collections.Generic.List<RotationNode>();
        }
    }

    // RotationMember
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class RotationMember
    {
        public long Id { get; set; } // Id (Primary key)
        public long RotationId { get; set; } // RotationId
        public long WorkflowNodeId { get; set; } // WorkflowNodeId
        public long? MemberId { get; set; } // MemberId
        public int FlagPermission { get; set; } // FlagPermission

        // Foreign keys
        public virtual Member Member { get; set; } // FK_RotationMember_Member
        public virtual Rotation Rotation { get; set; } // FK_RotationMember_Rotation
        public virtual WorkflowNode WorkflowNode { get; set; } // FK_RotationMember_WorkflowNode
        
        public RotationMember()
        {
            FlagPermission = 0;
        }
    }

    // RotationNode
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class RotationNode
    {
        public long Id { get; set; } // Id (Primary key)
        public long RotationId { get; set; } // RotationId
        public long WorkflowNodeId { get; set; } // WorkflowNodeId
        public long? PrevWorkflowNodeId { get; set; } // PrevWorkflowNodeId
        public long? SenderRotationNodeId { get; set; } // SenderRotationNodeId
        public long MemberId { get; set; } // MemberId
        public string Value { get; set; } // Value (length: 100)
        public string Status { get; set; } // Status (length: 2)
        public System.DateTime? DateRead { get; set; } // DateRead
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<RotationNode> RotationNodes { get; set; } // RotationNode.FK_RotationNode_RotationNode
        public virtual System.Collections.Generic.ICollection<RotationNodeDoc> RotationNodeDocs { get; set; } // RotationNodeDoc.FK_RotationNodeDoc_RotationNode
        public virtual System.Collections.Generic.ICollection<RotationNodeRemark> RotationNodeRemarks { get; set; } // RotationNodeRemark.FK_RotationNodeRemark_RotationNode
        public virtual System.Collections.Generic.ICollection<RotationNodeUpDoc> RotationNodeUpDocs { get; set; } // RotationNodeUpDoc.FK_RotationNodeUpDoc_RotationNode

        // Foreign keys
        public virtual Member Member { get; set; } // FK_RotationNode_Member
        public virtual Rotation Rotation { get; set; } // FK_RotationNode_Rotation
        public virtual RotationNode RotationNode_SenderRotationNodeId { get; set; } // FK_RotationNode_RotationNode
        public virtual WorkflowNode WorkflowNode { get; set; } // FK_RotationNode_WorkflowNode
        
        public RotationNode()
        {
            RotationNodes = new System.Collections.Generic.List<RotationNode>();
            RotationNodeDocs = new System.Collections.Generic.List<RotationNodeDoc>();
            RotationNodeRemarks = new System.Collections.Generic.List<RotationNodeRemark>();
            RotationNodeUpDocs = new System.Collections.Generic.List<RotationNodeUpDoc>();
        }
    }

    // RotationNodeDoc
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class RotationNodeDoc
    {
        public long Id { get; set; } // Id (Primary key)
        public long RotationNodeId { get; set; } // RotationNodeId
        public long? DocumentId { get; set; } // DocumentId
        public int FlagAction { get; set; } // FlagAction

        // Foreign keys
        public virtual Document Document { get; set; } // FK_RotationNodeDoc_Document
        public virtual RotationNode RotationNode { get; set; } // FK_RotationNodeDoc_RotationNode
        
        public RotationNodeDoc()
        {
            FlagAction = 0;
        }
    }

    // RotationNodeLog
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class RotationNodeLog
    {
        public long Id { get; set; } // Id (Primary key)
        public long RotationNodeId { get; set; } // RotationNodeId
        public string Descr { get; set; } // Descr
        public string Status { get; set; } // Status (length: 2)
        public System.DateTime DateStamp { get; set; } // DateStamp
        
        public RotationNodeLog()
        {
            DateStamp = System.DateTime.Now;
        }
    }

    // RotationNodeRemark
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class RotationNodeRemark
    {
        public long Id { get; set; } // Id (Primary key)
        public long RotationNodeId { get; set; } // RotationNodeId
        public string Remark { get; set; } // Remark
        public System.DateTime DateStamp { get; set; } // DateStamp

        // Foreign keys
        public virtual RotationNode RotationNode { get; set; } // FK_RotationNodeRemark_RotationNode
        
        public RotationNodeRemark()
        {
            DateStamp = System.DateTime.Now;
        }
    }

    // RotationNodeUpDoc
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class RotationNodeUpDoc
    {
        public long Id { get; set; } // Id (Primary key)
        public long RotationNodeId { get; set; } // RotationNodeId
        public long? DocumentUploadId { get; set; } // DocumentUploadId

        // Foreign keys
        public virtual DocumentUpload DocumentUpload { get; set; } // FK_RotationNodeUpDoc_DocumentUpload
        public virtual RotationNode RotationNode { get; set; } // FK_RotationNodeUpDoc_RotationNode
    }

    // Stamp
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Stamp
    {
        public long Id { get; set; } // Id (Primary key)
        public long CompanyId { get; set; } // CompanyId
        public string Descr { get; set; } // Descr (length: 1000)
        public string StampFile { get; set; } // StampFile (length: 100)
        public long? CreatorId { get; set; } // CreatorId
        public string UserId { get; set; } // UserId (length: 50)
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated

        // Foreign keys
        public virtual Company Company { get; set; } // FK_Stamp_Company
    }

    // StatusCode
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class StatusCode
    {
        public int Id { get; set; } // Id (Primary key)
        public string Code { get; set; } // Code (length: 2)
        public string Descr { get; set; } // Descr (length: 100)
        public string TextColor { get; set; } // TextColor (length: 20)
        public string BackColor { get; set; } // BackColor (length: 20)
        public string Icon { get; set; } // Icon (length: 100)
    }

    // SubscriptExtraType
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class SubscriptExtraType
    {
        public int Id { get; set; } // Id (Primary key)
        public decimal Price { get; set; } // Price
        public int RotationCount { get; set; } // RotationCount
        public int FlowActivityCount { get; set; } // FlowActivityCount
        public long StorageSize { get; set; } // StorageSize
        public long DrDriveSize { get; set; } // DrDriveSize
        public string UserId { get; set; } // UserId (length: 50)
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated
        
        public SubscriptExtraType()
        {
            Price = 0m;
            RotationCount = 0;
            FlowActivityCount = 0;
            DrDriveSize = 0;
        }
    }

    // SubscriptType
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class SubscriptType
    {
        public int Id { get; set; } // Id (Primary key)
        public string TypeCode { get; set; } // TypeCode (length: 10)
        public string ClassName { get; set; } // ClassName (length: 100)
        public string Descr { get; set; } // Descr (length: 1000)
        public decimal Price { get; set; } // Price
        public string PriceUnitCode { get; set; } // PriceUnitCode (length: 10)
        public string PriceUnitDescr { get; set; } // PriceUnitDescr (length: 50)
        public int RotationCount { get; set; } // RotationCount
        public decimal RotationPrice { get; set; } // RotationPrice
        public int FlowActivityCount { get; set; } // FlowActivityCount
        public decimal FlowActivityPrice { get; set; } // FlowActivityPrice
        public long StorageSize { get; set; } // StorageSize
        public decimal StoragePrice { get; set; } // StoragePrice
        public long DrDriveSize { get; set; } // DrDriveSize
        public decimal DrDrivePrice { get; set; } // DrDrivePrice
        public int ExpiryDocDay { get; set; } // ExpiryDocDay
        public int PackageExpiryDay { get; set; } // PackageExpiryDay
        public string UserId { get; set; } // UserId (length: 50)
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Plan> Plans { get; set; } // Plan.FK_Plan_SubscriptType
        public virtual System.Collections.Generic.ICollection<PlanRequest> PlanRequests { get; set; } // PlanRequest.FK_PlanRequest_SubscriptType
        
        public SubscriptType()
        {
            Price = 0m;
            RotationCount = 0;
            RotationPrice = 0m;
            FlowActivityCount = 0;
            FlowActivityPrice = 0m;
            StoragePrice = 0m;
            DrDriveSize = 0;
            DrDrivePrice = 0m;
            ExpiryDocDay = 0;
            PackageExpiryDay = 0;
            Plans = new System.Collections.Generic.List<Plan>();
            PlanRequests = new System.Collections.Generic.List<PlanRequest>();
        }
    }

    // Symbol
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Symbol
    {
        public int Id { get; set; } // Id (Primary key)
        public string Code { get; set; } // Code (length: 50)
        public string Name { get; set; } // Name (length: 100)
        public string Descr { get; set; } // Descr
        public string TextColor { get; set; } // TextColor (length: 20)
        public string BackColor { get; set; } // BackColor (length: 20)
        public string Icon { get; set; } // Icon (length: 100)
        public int SymbolType { get; set; } // SymbolType
        public string ElementName { get; set; } // ElementName (length: 50)
        public string UserId { get; set; } // UserId (length: 50)
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<WorkflowNode> WorkflowNodes { get; set; } // WorkflowNode.FK_WorkflowNode_Symbol
        public virtual System.Collections.Generic.ICollection<WorkflowNodeLink> WorkflowNodeLinks { get; set; } // WorkflowNodeLink.FK_WorkflowNodeLink_Symbol
        
        public Symbol()
        {
            SymbolType = 0;
            WorkflowNodes = new System.Collections.Generic.List<WorkflowNode>();
            WorkflowNodeLinks = new System.Collections.Generic.List<WorkflowNodeLink>();
        }
    }

    // sysdiagrams
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Sysdiagram
    {
        public string Name { get; set; } // name (length: 128)
        public int PrincipalId { get; set; } // principal_id
        public int DiagramId { get; set; } // diagram_id (Primary key)
        public int? Version { get; set; } // version
        public byte[] Definition { get; set; } // definition
    }

    // UserAdmin
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class UserAdmin
    {
        public int Id { get; set; } // Id (Primary key)
        public string Email { get; set; } // Email (length: 50)
        public string Name { get; set; } // Name (length: 50)
        public string Phone { get; set; } // Phone (length: 20)
        public int AdminType { get; set; } // AdminType
        public System.DateTime? LastLogin { get; set; } // LastLogin
        public System.DateTime? LastLogout { get; set; } // LastLogout
        public string AppZoneAccess { get; set; } // AppZoneAccess (length: 1000)
        public string Password { get; set; } // Password (length: 500)
        public bool IsActive { get; set; } // IsActive
        public int PanelType { get; set; } // PanelType
        public string UserId { get; set; } // UserId (length: 50)
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated
        
        public UserAdmin()
        {
            AdminType = 0;
            IsActive = true;
            PanelType = 0;
        }
    }

    // Versioning
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Versioning
    {
        public int Id { get; set; } // Id (Primary key)
        public string PackageName { get; set; } // PackageName (length: 100)
        public int VersionCode { get; set; } // VersionCode
        public string VersionName { get; set; } // VersionName (length: 50)
        public string Version { get; set; } // Version (length: 10)
    }

    // Voucher
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Voucher
    {
        public long Id { get; set; } // Id (Primary key)
        public string Number { get; set; } // Number (length: 50)
        public decimal Nominal { get; set; } // Nominal
        public decimal Price { get; set; } // Price
        public int VoucherType { get; set; } // VoucherType
        public long? TrxId { get; set; } // TrxId
        public string TrxType { get; set; } // TrxType (length: 10)
        public long? TrxUserId { get; set; } // TrxUserId
        public System.DateTime? DateUsed { get; set; } // DateUsed
        public System.DateTime DateCreated { get; set; } // DateCreated
        
        public Voucher()
        {
            VoucherType = 0;
            DateCreated = System.DateTime.Now;
        }
    }

    // VoucherGenerator
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class VoucherGenerator
    {
        public long Id { get; set; } // Id (Primary key)
        public string Number { get; set; } // Number (length: 20)
        public decimal Nominal { get; set; } // Nominal
        public decimal Price { get; set; } // Price
        public int Quantity { get; set; } // Quantity
        public int VoucherType { get; set; } // VoucherType
        public string UserId { get; set; } // UserId (length: 50)
        public System.DateTime DateCreated { get; set; } // DateCreated
        
        public VoucherGenerator()
        {
            Nominal = 0m;
            Price = 0m;
            Quantity = 0;
            VoucherType = 0;
        }
    }

    // Workflow
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class Workflow
    {
        public long Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 100)
        public string Descr { get; set; } // Descr
        public long ProjectId { get; set; } // ProjectId
        public bool IsActive { get; set; } // IsActive
        public long? CreatorId { get; set; } // CreatorId
        public bool IsTemplate { get; set; } // IsTemplate
        public int WfType { get; set; } // WfType
        public string UserId { get; set; } // UserId (length: 50)
        public System.DateTime DateCreated { get; set; } // DateCreated
        public System.DateTime? DateUpdated { get; set; } // DateUpdated

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<MemberWorkflow> MemberWorkflows { get; set; } // MemberWorkflow.FK_MemberWorkflow_Workflow
        public virtual System.Collections.Generic.ICollection<Rotation> Rotations { get; set; } // Rotation.FK_Rotation_Workflow
        public virtual System.Collections.Generic.ICollection<WorkflowNode> WorkflowNodes { get; set; } // WorkflowNode.FK_WorkflowNode_Workflow

        // Foreign keys
        public virtual Project Project { get; set; } // FK_Workflow_Project
        
        public Workflow()
        {
            IsActive = true;
            IsTemplate = false;
            WfType = 0;
            MemberWorkflows = new System.Collections.Generic.List<MemberWorkflow>();
            Rotations = new System.Collections.Generic.List<Rotation>();
            WorkflowNodes = new System.Collections.Generic.List<WorkflowNode>();
        }
    }

    // WorkflowNode
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class WorkflowNode
    {
        public long Id { get; set; } // Id (Primary key)
        public long WorkflowId { get; set; } // WorkflowId
        public long? MemberId { get; set; } // MemberId
        public int SymbolId { get; set; } // SymbolId
        public string Caption { get; set; } // Caption (length: 100)
        public string Info { get; set; } // Info (length: 1000)
        public string Operator { get; set; } // Operator (length: 10)
        public string Value { get; set; } // Value (length: 50)
        public string PosLeft { get; set; } // PosLeft (length: 10)
        public string PosTop { get; set; } // PosTop (length: 10)
        public string Width { get; set; } // Width (length: 10)
        public string Height { get; set; } // Height (length: 10)
        public string TextColor { get; set; } // TextColor (length: 20)
        public string BackColor { get; set; } // BackColor (length: 20)
        public int Flag { get; set; } // Flag

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<RotationMember> RotationMembers { get; set; } // RotationMember.FK_RotationMember_WorkflowNode
        public virtual System.Collections.Generic.ICollection<RotationNode> RotationNodes { get; set; } // RotationNode.FK_RotationNode_WorkflowNode
        public virtual System.Collections.Generic.ICollection<WorkflowNodeLink> WorkflowNodeLinks_WorkflowNodeId { get; set; } // WorkflowNodeLink.FK_WorkflowNodeLink_WorkflowNode
        public virtual System.Collections.Generic.ICollection<WorkflowNodeLink> WorkflowNodeLinks_WorkflowNodeToId { get; set; } // WorkflowNodeLink.FK_WorkflowNodeLink_WorkflowNode1

        // Foreign keys
        public virtual Member Member { get; set; } // FK_WorkflowNode_Member
        public virtual Symbol Symbol { get; set; } // FK_WorkflowNode_Symbol
        public virtual Workflow Workflow { get; set; } // FK_WorkflowNode_Workflow
        
        public WorkflowNode()
        {
            PosLeft = "0";
            PosTop = "0";
            Width = "0";
            Height = "0";
            Flag = 0;
            RotationMembers = new System.Collections.Generic.List<RotationMember>();
            RotationNodes = new System.Collections.Generic.List<RotationNode>();
            WorkflowNodeLinks_WorkflowNodeId = new System.Collections.Generic.List<WorkflowNodeLink>();
            WorkflowNodeLinks_WorkflowNodeToId = new System.Collections.Generic.List<WorkflowNodeLink>();
        }
    }

    // WorkflowNodeLink
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class WorkflowNodeLink
    {
        public long Id { get; set; } // Id (Primary key)
        public long WorkflowNodeId { get; set; } // WorkflowNodeId
        public long WorkflowNodeToId { get; set; } // WorkflowNodeToId
        public string Caption { get; set; } // Caption (length: 100)
        public string Operator { get; set; } // Operator (length: 10)
        public string Value { get; set; } // Value (length: 20)
        public int SymbolId { get; set; } // SymbolId

        // Foreign keys
        public virtual Symbol Symbol { get; set; } // FK_WorkflowNodeLink_Symbol
        public virtual WorkflowNode WorkflowNode_WorkflowNodeId { get; set; } // FK_WorkflowNodeLink_WorkflowNode
        public virtual WorkflowNode WorkflowNode_WorkflowNodeToId { get; set; } // FK_WorkflowNodeLink_WorkflowNode1
    }


    // ************************************************************************
    // POCO Configuration

    // ElementType
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class ElementTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ElementType>
    {
        public ElementTypeConfiguration()
            : this("dbo")
        {
        }
 
        public ElementTypeConfiguration(string schema)
        {
            ToTable(schema + ".ElementType");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Code).HasColumnName(@"Code").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.Descr).HasColumnName(@"Descr").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(500);
        }
    }

    // ApplConfig
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class ApplConfigConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ApplConfig>
    {
        public ApplConfigConfiguration()
            : this("dbo")
        {
        }
 
        public ApplConfigConfiguration(string schema)
        {
            ToTable(schema + ".ApplConfig");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Code).HasColumnName(@"Code").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.Descr).HasColumnName(@"Descr").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Value).HasColumnName(@"Value").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(1000);
            Property(x => x.Flag).HasColumnName(@"Flag").IsRequired().HasColumnType("smallint");
            Property(x => x.DataType).HasColumnName(@"DataType").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.DataLength).HasColumnName(@"DataLength").IsRequired().HasColumnType("int");
            Property(x => x.InitialValue).HasColumnName(@"InitialValue").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(1000);
            Property(x => x.UserId).HasColumnName(@"UserID").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");
        }
    }

    // Bank
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class BankConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Bank>
    {
        public BankConfiguration()
            : this("dbo")
        {
        }
 
        public BankConfiguration(string schema)
        {
            ToTable(schema + ".Bank");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Code).HasColumnName(@"Code").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Logo).HasColumnName(@"Logo").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.BankType).HasColumnName(@"BankType").IsRequired().HasColumnType("int");
            Property(x => x.UserId).HasColumnName(@"UserId").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");
        }
    }

    // BroadcastMessage
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class BroadcastMessageConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<BroadcastMessage>
    {
        public BroadcastMessageConfiguration()
            : this("dbo")
        {
        }
 
        public BroadcastMessageConfiguration(string schema)
        {
            ToTable(schema + ".BroadcastMessage");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.TextMessage).HasColumnName(@"TextMessage").IsRequired().IsUnicode(false).HasColumnType("varchar");
            Property(x => x.GroupType).HasColumnName(@"GroupType").IsRequired().HasColumnType("int");
            Property(x => x.CreatorId).HasColumnName(@"CreatorId").IsRequired().HasColumnType("bigint");
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
        }
    }

    // Company
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class CompanyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Company>
    {
        public CompanyConfiguration()
            : this("dbo")
        {
        }
 
        public CompanyConfiguration(string schema)
        {
            ToTable(schema + ".Company");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Code).HasColumnName(@"Code").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Contact).HasColumnName(@"Contact").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Phone).HasColumnName(@"Phone").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.Email).HasColumnName(@"Email").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Descr).HasColumnName(@"Descr").IsOptional().IsUnicode(false).HasColumnType("varchar");
            Property(x => x.Address).HasColumnName(@"Address").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(1000);
            Property(x => x.PointLocation).HasColumnName(@"PointLocation").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(1000);
            Property(x => x.Latitude).HasColumnName(@"Latitude").IsRequired().HasColumnType("decimal").HasPrecision(12,9);
            Property(x => x.Longitude).HasColumnName(@"Longitude").IsRequired().HasColumnType("decimal").HasPrecision(12,9);
            Property(x => x.CountryCode).HasColumnName(@"CountryCode").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.CountryName).HasColumnName(@"CountryName").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.AdminArea).HasColumnName(@"AdminArea").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.SubAdminArea).HasColumnName(@"SubAdminArea").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Locality).HasColumnName(@"Locality").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.SubLocality).HasColumnName(@"SubLocality").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Thoroughfare).HasColumnName(@"Thoroughfare").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.SubThoroughfare).HasColumnName(@"SubThoroughfare").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.PostalCode).HasColumnName(@"PostalCode").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(5);
            Property(x => x.Image1).HasColumnName(@"Image1").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Image2).HasColumnName(@"Image2").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.ImageCard).HasColumnName(@"ImageCard").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.BackColorBar).HasColumnName(@"BackColorBar").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.BackColorPage).HasColumnName(@"BackColorPage").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.CompanyType).HasColumnName(@"CompanyType").IsRequired().HasColumnType("int");
            Property(x => x.ImageQrCode).HasColumnName(@"ImageQrCode").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.IsActive).HasColumnName(@"IsActive").IsRequired().HasColumnType("bit");
            Property(x => x.UserId).HasColumnName(@"UserId").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");
        }
    }

    // CompanyBank
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class CompanyBankConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CompanyBank>
    {
        public CompanyBankConfiguration()
            : this("dbo")
        {
        }
 
        public CompanyBankConfiguration(string schema)
        {
            ToTable(schema + ".CompanyBank");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.BankId).HasColumnName(@"BankId").IsRequired().HasColumnType("int");
            Property(x => x.Branch).HasColumnName(@"Branch").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.AccountNo).HasColumnName(@"AccountNo").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.AccountName).HasColumnName(@"AccountName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.PaymentMethodId).HasColumnName(@"PaymentMethodId").IsRequired().HasColumnType("int");
            Property(x => x.IsActive).HasColumnName(@"IsActive").IsRequired().HasColumnType("bit");
            Property(x => x.UserId).HasColumnName(@"UserId").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Bank).WithMany(b => b.CompanyBanks).HasForeignKey(c => c.BankId).WillCascadeOnDelete(false); // FK_CompanyBank_Bank
            HasRequired(a => a.PaymentMethod).WithMany(b => b.CompanyBanks).HasForeignKey(c => c.PaymentMethodId).WillCascadeOnDelete(false); // FK_CompanyBank_PaymentMethod
        }
    }

    // Document
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class DocumentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Document>
    {
        public DocumentConfiguration()
            : this("dbo")
        {
        }
 
        public DocumentConfiguration(string schema)
        {
            ToTable(schema + ".Document");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(500);
            Property(x => x.Descr).HasColumnName(@"Descr").IsOptional().IsUnicode(false).HasColumnType("varchar");
            Property(x => x.FileName).HasColumnName(@"FileName").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.FileNameOri).HasColumnName(@"FileNameOri").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.ExtFile).HasColumnName(@"ExtFile").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.FileFlag).HasColumnName(@"FileFlag").IsRequired().HasColumnType("int");
            Property(x => x.FileSize).HasColumnName(@"FileSize").IsRequired().HasColumnType("int");
            Property(x => x.MaxPrint).HasColumnName(@"MaxPrint").IsRequired().HasColumnType("int");
            Property(x => x.MaxDownload).HasColumnName(@"MaxDownload").IsRequired().HasColumnType("int");
            Property(x => x.ExpiryDay).HasColumnName(@"ExpiryDay").IsRequired().HasColumnType("int");
            Property(x => x.Version).HasColumnName(@"Version").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.CompanyId).HasColumnName(@"CompanyId").IsRequired().HasColumnType("bigint");
            Property(x => x.MemberFolderId).HasColumnName(@"MemberFolderId").IsRequired().HasColumnType("bigint");
            Property(x => x.CreatorId).HasColumnName(@"CreatorId").IsOptional().HasColumnType("bigint");
            Property(x => x.UserId).HasColumnName(@"UserId").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Company).WithMany(b => b.Documents).HasForeignKey(c => c.CompanyId).WillCascadeOnDelete(false); // FK_Document_Company
        }
    }

    // DocumentElement
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class DocumentElementConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DocumentElement>
    {
        public DocumentElementConfiguration()
            : this("dbo")
        {
        }
 
        public DocumentElementConfiguration(string schema)
        {
            ToTable(schema + ".DocumentElement");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.DocumentId).HasColumnName(@"DocumentId").IsRequired().HasColumnType("bigint");
            Property(x => x.Page).HasColumnName(@"Page").IsRequired().HasColumnType("int");
            Property(x => x.ElementTypeId).HasColumnName(@"ElementTypeId").IsRequired().HasColumnType("int");
            Property(x => x.LeftPos).HasColumnName(@"LeftPos").IsOptional().HasColumnType("float");
            Property(x => x.TopPos).HasColumnName(@"TopPos").IsOptional().HasColumnType("float");
            Property(x => x.WidthPos).HasColumnName(@"WidthPos").IsOptional().HasColumnType("float");
            Property(x => x.HeightPos).HasColumnName(@"HeightPos").IsOptional().HasColumnType("float");
            Property(x => x.Color).HasColumnName(@"Color").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.BackColor).HasColumnName(@"BackColor").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Data).HasColumnName(@"Data").IsOptional().IsUnicode(false).HasColumnType("varchar");
            Property(x => x.Data2).HasColumnName(@"Data2").IsOptional().IsUnicode(false).HasColumnType("varchar");
            Property(x => x.Rotation).HasColumnName(@"Rotation").IsRequired().HasColumnType("int");
            Property(x => x.ScaleX).HasColumnName(@"ScaleX").IsRequired().HasColumnType("float");
            Property(x => x.ScaleY).HasColumnName(@"ScaleY").IsRequired().HasColumnType("float");
            Property(x => x.TransX).HasColumnName(@"TransX").IsRequired().HasColumnType("float");
            Property(x => x.TransY).HasColumnName(@"TransY").IsRequired().HasColumnType("float");
            Property(x => x.StrokeWidth).HasColumnName(@"StrokeWidth").IsRequired().HasColumnType("float");
            Property(x => x.Opacity).HasColumnName(@"Opacity").IsRequired().HasColumnType("float");
            Property(x => x.CreatorId).HasColumnName(@"CreatorId").IsOptional().HasColumnType("bigint");
            Property(x => x.AnnotateId).HasColumnName(@"AnnotateId").IsOptional().HasColumnType("bigint");
            Property(x => x.Flag).HasColumnName(@"Flag").IsRequired().HasColumnType("int");
            Property(x => x.FlagCode).HasColumnName(@"FlagCode").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.FlagDate).HasColumnName(@"FlagDate").IsOptional().HasColumnType("datetime");
            Property(x => x.FlagImage).HasColumnName(@"FlagImage").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.UserId).HasColumnName(@"UserId").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.ElementType).WithMany(b => b.DocumentElements).HasForeignKey(c => c.ElementTypeId).WillCascadeOnDelete(false); // FK_DocumentElement_ElementType
            HasRequired(a => a.Document).WithMany(b => b.DocumentElements).HasForeignKey(c => c.DocumentId).WillCascadeOnDelete(false); // FK_DocumentElement_Document
        }
    }

    // DocumentMember
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class DocumentMemberConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DocumentMember>
    {
        public DocumentMemberConfiguration()
            : this("dbo")
        {
        }
 
        public DocumentMemberConfiguration(string schema)
        {
            ToTable(schema + ".DocumentMember");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.DocumentId).HasColumnName(@"DocumentId").IsRequired().HasColumnType("bigint");
            Property(x => x.MemberId).HasColumnName(@"MemberId").IsRequired().HasColumnType("bigint");
            Property(x => x.FlagAction).HasColumnName(@"FlagAction").IsRequired().HasColumnType("int");
            Property(x => x.CxPrint).HasColumnName(@"CxPrint").IsRequired().HasColumnType("int");
            Property(x => x.CxDownload).HasColumnName(@"CxDownload").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Document).WithMany(b => b.DocumentMembers).HasForeignKey(c => c.DocumentId).WillCascadeOnDelete(false); // FK_DocumentMember_Document
            HasRequired(a => a.Member).WithMany(b => b.DocumentMembers).HasForeignKey(c => c.MemberId).WillCascadeOnDelete(false); // FK_DocumentMember_Member
        }
    }

    // DocumentUpload
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class DocumentUploadConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DocumentUpload>
    {
        public DocumentUploadConfiguration()
            : this("dbo")
        {
        }
 
        public DocumentUploadConfiguration(string schema)
        {
            ToTable(schema + ".DocumentUpload");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.FileName).HasColumnName(@"FileName").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.FileNameOri).HasColumnName(@"FileNameOri").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.ExtFile).HasColumnName(@"ExtFile").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.FileFlag).HasColumnName(@"FileFlag").IsRequired().HasColumnType("int");
            Property(x => x.FileSize).HasColumnName(@"FileSize").IsRequired().HasColumnType("int");
            Property(x => x.CreatorId).HasColumnName(@"CreatorId").IsOptional().HasColumnType("bigint");
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
        }
    }

    // DrDrive
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class DrDriveConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DrDrive>
    {
        public DrDriveConfiguration()
            : this("dbo")
        {
        }
 
        public DrDriveConfiguration(string schema)
        {
            ToTable(schema + ".DrDrive");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Descr).HasColumnName(@"Descr").IsOptional().IsUnicode(false).HasColumnType("varchar");
            Property(x => x.FileName).HasColumnName(@"FileName").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.FileNameOri).HasColumnName(@"FileNameOri").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.ExtFile).HasColumnName(@"ExtFile").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.FileFlag).HasColumnName(@"FileFlag").IsRequired().HasColumnType("int");
            Property(x => x.FileSize).HasColumnName(@"FileSize").IsRequired().HasColumnType("bigint");
            Property(x => x.CxDownload).HasColumnName(@"CxDownload").IsRequired().HasColumnType("int");
            Property(x => x.MemberFolderId).HasColumnName(@"MemberFolderId").IsRequired().HasColumnType("bigint");
            Property(x => x.MemberId).HasColumnName(@"MemberId").IsOptional().HasColumnType("bigint");
            Property(x => x.DocumentId).HasColumnName(@"DocumentId").IsOptional().HasColumnType("bigint");
            Property(x => x.DocumentUploadId).HasColumnName(@"DocumentUploadId").IsOptional().HasColumnType("bigint");
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");
        }
    }

    // DrDriveType
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class DrDriveTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DrDriveType>
    {
        public DrDriveTypeConfiguration()
            : this("dbo")
        {
        }
 
        public DrDriveTypeConfiguration(string schema)
        {
            ToTable(schema + ".DrDriveType");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Size).HasColumnName(@"Size").IsRequired().HasColumnType("bigint");
            Property(x => x.Price).HasColumnName(@"Price").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ExpiryDay).HasColumnName(@"ExpiryDay").IsRequired().HasColumnType("int");
        }
    }

    // FaspayCreditStatus
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FaspayCreditStatuConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<FaspayCreditStatu>
    {
        public FaspayCreditStatuConfiguration()
            : this("dbo")
        {
        }
 
        public FaspayCreditStatuConfiguration(string schema)
        {
            ToTable(schema + ".FaspayCreditStatus");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.PaymentMethod).HasColumnName(@"PAYMENT_METHOD").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(1);
            Property(x => x.Merchantid).HasColumnName(@"MERCHANTID").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(30);
            Property(x => x.MerchantTranid).HasColumnName(@"MERCHANT_TRANID").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.ErrCode).HasColumnName(@"ERR_CODE").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.ErrDesc).HasColumnName(@"ERR_DESC").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(250);
            Property(x => x.UsrCode).HasColumnName(@"USR_CODE").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(4);
            Property(x => x.UsrMsg).HasColumnName(@"USR_MSG").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.TxnStatus).HasColumnName(@"TXN_STATUS").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(3);
            Property(x => x.Custname).HasColumnName(@"CUSTNAME").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(120);
            Property(x => x.Description).HasColumnName(@"DESCRIPTION").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Currencycode).HasColumnName(@"CURRENCYCODE").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(3);
            Property(x => x.Amount).HasColumnName(@"AMOUNT").IsOptional().HasColumnType("numeric").HasPrecision(10,2);
            Property(x => x.Signature).HasColumnName(@"SIGNATURE").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(40);
            Property(x => x.Eui).HasColumnName(@"EUI").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(3);
            Property(x => x.Transactionid).HasColumnName(@"TRANSACTIONID").IsOptional().HasColumnType("int");
            Property(x => x.Transactiontype).HasColumnName(@"TRANSACTIONTYPE").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(2);
            Property(x => x.Mparam1).HasColumnName(@"MPARAM1").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.Mparam2).HasColumnName(@"MPARAM2").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.AcquirerId).HasColumnName(@"ACQUIRER_ID").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(30);
            Property(x => x.Trandate).HasColumnName(@"TRANDATE").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(19);
            Property(x => x.IsBlacklisted).HasColumnName(@"IS_BLACKLISTED").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(5);
            Property(x => x.Fraudrisklevel).HasColumnName(@"FRAUDRISKLEVEL").IsOptional().HasColumnType("int");
            Property(x => x.Fraudriskscore).HasColumnName(@"FRAUDRISKSCORE").IsOptional().HasColumnType("numeric").HasPrecision(10,2);
            Property(x => x.PointUsed).HasColumnName(@"POINT_USED").IsOptional().HasColumnType("int");
            Property(x => x.PointAmount).HasColumnName(@"POINT_AMOUNT").IsOptional().HasColumnType("numeric").HasPrecision(10,2);
            Property(x => x.PaymentAmount).HasColumnName(@"PAYMENT_AMOUNT").IsOptional().HasColumnType("numeric").HasPrecision(10,2);
            Property(x => x.PointBalance).HasColumnName(@"POINT_BALANCE").IsOptional().HasColumnType("numeric").HasPrecision(10,2);
            Property(x => x.ExceedHighRisk).HasColumnName(@"EXCEED_HIGH_RISK").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(5);
            Property(x => x.Cardtype).HasColumnName(@"CARDTYPE").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(5);
            Property(x => x.CardNoPartial).HasColumnName(@"CARD_NO_PARTIAL").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.Cardname).HasColumnName(@"CARDNAME").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.IsOnUs).HasColumnName(@"is_on_us").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(3);
            Property(x => x.AcquirerBank).HasColumnName(@"ACQUIRER_BANK").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(3);
            Property(x => x.WhitelistCard).HasColumnName(@"WHITELIST_CARD").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(3);
            Property(x => x.BankResCode).HasColumnName(@"BANK_RES_CODE").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.BankResMsg).HasColumnName(@"BANK_RES_MSG").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(250);
            Property(x => x.AuthId).HasColumnName(@"AUTH_ID").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.BankReference).HasColumnName(@"BANK_REFERENCE").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.InstallmentCode).HasColumnName(@"INSTALLMENT_CODE").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(10);
            Property(x => x.InstallmentTerm).HasColumnName(@"INSTALLMENT_TERM").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.InstallmentMonthly).HasColumnName(@"INSTALLMENT_MONTHLY").IsOptional().HasColumnType("numeric").HasPrecision(10,2);
            Property(x => x.InstallmentLast).HasColumnName(@"INSTALLMENT_LAST").IsOptional().HasColumnType("numeric").HasPrecision(10,2);
        }
    }

    // FaspayDebitStatus
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FaspayDebitStatuConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<FaspayDebitStatu>
    {
        public FaspayDebitStatuConfiguration()
            : this("dbo")
        {
        }
 
        public FaspayDebitStatuConfiguration(string schema)
        {
            ToTable(schema + ".FaspayDebitStatus");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.Request).HasColumnName(@"request").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(1000);
            Property(x => x.TrxId).HasColumnName(@"trx_id").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(1000);
            Property(x => x.MerchantId).HasColumnName(@"merchant_id").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(1000);
            Property(x => x.Merchant).HasColumnName(@"merchant").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(1000);
            Property(x => x.BillNo).HasColumnName(@"bill_no").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(1000);
            Property(x => x.PaymentReff).HasColumnName(@"payment_reff").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(1000);
            Property(x => x.PaymentDate).HasColumnName(@"payment_date").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(1000);
            Property(x => x.PaymentStatusCode).HasColumnName(@"payment_status_code").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(1000);
            Property(x => x.PaymentStatusDesc).HasColumnName(@"payment_status_desc").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(1000);
            Property(x => x.Signature).HasColumnName(@"signature").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(1000);
            Property(x => x.Amount).HasColumnName(@"amount").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(1000);
            Property(x => x.PaymentTotal).HasColumnName(@"payment_total").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(1000);
        }
    }

    // FaspayPayment
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class FaspayPaymentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<FaspayPayment>
    {
        public FaspayPaymentConfiguration()
            : this("dbo")
        {
        }
 
        public FaspayPaymentConfiguration(string schema)
        {
            ToTable(schema + ".FaspayPayment");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PayId).HasColumnName(@"PayId").IsRequired().HasColumnType("bigint");
            Property(x => x.PayType).HasColumnName(@"PayType").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.TrxId).HasColumnName(@"TrxId").IsRequired().HasColumnType("bigint");
            Property(x => x.TrxNo).HasColumnName(@"TrxNo").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.TrxType).HasColumnName(@"TrxType").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(5);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
        }
    }

    // Member
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Member>
    {
        public MemberConfiguration()
            : this("dbo")
        {
        }
 
        public MemberConfiguration(string schema)
        {
            ToTable(schema + ".Member");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Number).HasColumnName(@"Number").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.MemberTitleId).HasColumnName(@"MemberTitleId").IsRequired().HasColumnType("int");
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Phone).HasColumnName(@"Phone").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.Email).HasColumnName(@"Email").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.MemberType).HasColumnName(@"MemberType").IsRequired().HasColumnType("int");
            Property(x => x.KtpNo).HasColumnName(@"KtpNo").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.ImageProfile).HasColumnName(@"ImageProfile").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.ImageQrCode).HasColumnName(@"ImageQrCode").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.LastLogin).HasColumnName(@"LastLogin").IsOptional().HasColumnType("datetime");
            Property(x => x.LastLogout).HasColumnName(@"LastLogout").IsOptional().HasColumnType("datetime");
            Property(x => x.ActivationKeyId).HasColumnName(@"ActivationKeyId").IsOptional().HasColumnType("bigint");
            Property(x => x.Password).HasColumnName(@"Password").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(500);
            Property(x => x.CompanyId).HasColumnName(@"CompanyId").IsOptional().HasColumnType("bigint");
            Property(x => x.UserGroup).HasColumnName(@"UserGroup").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.ImageSignature).HasColumnName(@"ImageSignature").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.ImageInitials).HasColumnName(@"ImageInitials").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.ImageStamp).HasColumnName(@"ImageStamp").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.ImageKtp1).HasColumnName(@"ImageKtp1").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.ImageKtp2).HasColumnName(@"ImageKtp2").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.IsActive).HasColumnName(@"IsActive").IsRequired().HasColumnType("bit");
            Property(x => x.UserId).HasColumnName(@"UserId").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.Company).WithMany(b => b.Members).HasForeignKey(c => c.CompanyId).WillCascadeOnDelete(false); // FK_Member_Company
            HasRequired(a => a.MemberTitle).WithMany(b => b.Members).HasForeignKey(c => c.MemberTitleId).WillCascadeOnDelete(false); // FK_Member_MemberTitle
        }
    }

    // MemberAccount
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberAccountConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MemberAccount>
    {
        public MemberAccountConfiguration()
            : this("dbo")
        {
        }
 
        public MemberAccountConfiguration(string schema)
        {
            ToTable(schema + ".MemberAccount");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.MemberId).HasColumnName(@"MemberId").IsRequired().HasColumnType("bigint");
            Property(x => x.Title).HasColumnName(@"Title").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.AccountNo).HasColumnName(@"AccountNo").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.AccountName).HasColumnName(@"AccountName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.BankId).HasColumnName(@"BankId").IsRequired().HasColumnType("int");
            Property(x => x.Branch).HasColumnName(@"Branch").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Bank).WithMany(b => b.MemberAccounts).HasForeignKey(c => c.BankId).WillCascadeOnDelete(false); // FK_MemberAccount_Bank
            HasRequired(a => a.Member).WithMany(b => b.MemberAccounts).HasForeignKey(c => c.MemberId).WillCascadeOnDelete(false); // FK_MemberAccount_Member
        }
    }

    // MemberDepositTransfer
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberDepositTransferConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MemberDepositTransfer>
    {
        public MemberDepositTransferConfiguration()
            : this("dbo")
        {
        }
 
        public MemberDepositTransferConfiguration(string schema)
        {
            ToTable(schema + ".MemberDepositTransfer");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.TrfNo).HasColumnName(@"TrfNo").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.TrfDate).HasColumnName(@"TrfDate").IsRequired().HasColumnType("date");
            Property(x => x.FromId).HasColumnName(@"FromId").IsRequired().HasColumnType("bigint");
            Property(x => x.ToId).HasColumnName(@"ToId").IsRequired().HasColumnType("bigint");
            Property(x => x.Amount).HasColumnName(@"Amount").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Member_FromId).WithMany(b => b.MemberDepositTransfers_FromId).HasForeignKey(c => c.FromId).WillCascadeOnDelete(false); // FK_MemberDepositTransfer_MemberFrom
            HasRequired(a => a.Member_ToId).WithMany(b => b.MemberDepositTransfers_ToId).HasForeignKey(c => c.ToId).WillCascadeOnDelete(false); // FK_MemberDepositTransfer_MemberTo
        }
    }

    // MemberDepositTrx
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberDepositTrxConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MemberDepositTrx>
    {
        public MemberDepositTrxConfiguration()
            : this("dbo")
        {
        }
 
        public MemberDepositTrxConfiguration(string schema)
        {
            ToTable(schema + ".MemberDepositTrx");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.TrxNo).HasColumnName(@"TrxNo").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.TrxDate).HasColumnName(@"TrxDate").IsRequired().HasColumnType("date");
            Property(x => x.TrxType).HasColumnName(@"TrxType").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.TrxId).HasColumnName(@"TrxId").IsRequired().HasColumnType("bigint");
            Property(x => x.Descr).HasColumnName(@"Descr").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(500);
            Property(x => x.MemberId).HasColumnName(@"MemberId").IsRequired().HasColumnType("bigint");
            Property(x => x.Amount).HasColumnName(@"Amount").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.DbCr).HasColumnName(@"DbCr").IsRequired().HasColumnType("int");
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Member).WithMany(b => b.MemberDepositTrxes).HasForeignKey(c => c.MemberId).WillCascadeOnDelete(false); // FK_MemberDepositTrx_Member
        }
    }

    // MemberFolder
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberFolderConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MemberFolder>
    {
        public MemberFolderConfiguration()
            : this("dbo")
        {
        }
 
        public MemberFolderConfiguration(string schema)
        {
            ToTable(schema + ".MemberFolder");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.MemberId).HasColumnName(@"MemberId").IsRequired().HasColumnType("bigint");
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Descr).HasColumnName(@"Descr").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(250);
            Property(x => x.FolderType).HasColumnName(@"FolderType").IsRequired().HasColumnType("int");
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");
        }
    }

    // MemberHitLog
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberHitLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MemberHitLog>
    {
        public MemberHitLogConfiguration()
            : this("dbo")
        {
        }
 
        public MemberHitLogConfiguration(string schema)
        {
            ToTable(schema + ".MemberHitLog");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.MemberId).HasColumnName(@"MemberId").IsRequired().HasColumnType("bigint");
            Property(x => x.DataHitId).HasColumnName(@"DataHitId").IsRequired().HasColumnType("bigint");
            Property(x => x.DataHitType).HasColumnName(@"DataHitType").IsRequired().HasColumnType("int");
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
        }
    }

    // MemberInvited
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberInvitedConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MemberInvited>
    {
        public MemberInvitedConfiguration()
            : this("dbo")
        {
        }
 
        public MemberInvitedConfiguration(string schema)
        {
            ToTable(schema + ".MemberInvited");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.MemberId).HasColumnName(@"MemberId").IsRequired().HasColumnType("bigint");
            Property(x => x.InvitedId).HasColumnName(@"InvitedId").IsRequired().HasColumnType("bigint");
            Property(x => x.Status).HasColumnName(@"Status").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(2);
            Property(x => x.DateExpiry).HasColumnName(@"DateExpiry").IsRequired().HasColumnType("datetime");
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Member_InvitedId).WithMany(b => b.MemberInviteds_InvitedId).HasForeignKey(c => c.InvitedId).WillCascadeOnDelete(false); // FK_MemberInvited_Invited
            HasRequired(a => a.Member_MemberId).WithMany(b => b.MemberInviteds_MemberId).HasForeignKey(c => c.MemberId);  // FK_MemberInvited_Member
        }
    }

    // MemberPermission
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberPermissionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MemberPermission>
    {
        public MemberPermissionConfiguration()
            : this("dbo")
        {
        }
 
        public MemberPermissionConfiguration(string schema)
        {
            ToTable(schema + ".MemberPermission");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.MemberId).HasColumnName(@"MemberId").IsRequired().HasColumnType("bigint");
            Property(x => x.Flag).HasColumnName(@"Flag").IsRequired().HasColumnType("int");
            Property(x => x.UserId).HasColumnName(@"UserId").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Member).WithMany(b => b.MemberPermissions).HasForeignKey(c => c.MemberId).WillCascadeOnDelete(false); // FK_MemberPermission_Member
        }
    }

    // Plan
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class PlanConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Plan>
    {
        public PlanConfiguration()
            : this("dbo")
        {
        }
 
        public PlanConfiguration(string schema)
        {
            ToTable(schema + ".Plan");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.MemberId).HasColumnName(@"MemberId").IsRequired().HasColumnType("bigint");
            Property(x => x.SubscriptTypeId).HasColumnName(@"SubscriptTypeId").IsRequired().HasColumnType("int");
            Property(x => x.Price).HasColumnName(@"Price").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.PriceUnitCode).HasColumnName(@"PriceUnitCode").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.PriceUnitDescr).HasColumnName(@"PriceUnitDescr").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.RotationCount).HasColumnName(@"RotationCount").IsRequired().HasColumnType("int");
            Property(x => x.RotationPrice).HasColumnName(@"RotationPrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.RotationCountAdd).HasColumnName(@"RotationCountAdd").IsRequired().HasColumnType("int");
            Property(x => x.RotationCountUsed).HasColumnName(@"RotationCountUsed").IsRequired().HasColumnType("int");
            Property(x => x.FlowActivityCount).HasColumnName(@"FlowActivityCount").IsRequired().HasColumnType("int");
            Property(x => x.FlowActivityPrice).HasColumnName(@"FlowActivityPrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.FlowActivityCountAdd).HasColumnName(@"FlowActivityCountAdd").IsRequired().HasColumnType("int");
            Property(x => x.FlowActivityCountUsed).HasColumnName(@"FlowActivityCountUsed").IsRequired().HasColumnType("int");
            Property(x => x.StorageSize).HasColumnName(@"StorageSize").IsRequired().HasColumnType("bigint");
            Property(x => x.StoragePrice).HasColumnName(@"StoragePrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.StorageSizeAdd).HasColumnName(@"StorageSizeAdd").IsRequired().HasColumnType("bigint");
            Property(x => x.StorageSizeUsed).HasColumnName(@"StorageSizeUsed").IsRequired().HasColumnType("bigint");
            Property(x => x.DrDriveSize).HasColumnName(@"DrDriveSize").IsRequired().HasColumnType("bigint");
            Property(x => x.DrDrivePrice).HasColumnName(@"DrDrivePrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.DrDriveSizeAdd).HasColumnName(@"DrDriveSizeAdd").IsRequired().HasColumnType("bigint");
            Property(x => x.DrDriveSizeUsed).HasColumnName(@"DrDriveSizeUsed").IsRequired().HasColumnType("bigint");
            Property(x => x.ExpiryDocDay).HasColumnName(@"ExpiryDocDay").IsRequired().HasColumnType("int");
            Property(x => x.PackageExpiryDay).HasColumnName(@"PackageExpiryDay").IsRequired().HasColumnType("int");
            Property(x => x.DrDriveExpiryDay).HasColumnName(@"DrDriveExpiryDay").IsRequired().HasColumnType("int");
            Property(x => x.ValidPackage).HasColumnName(@"ValidPackage").IsOptional().HasColumnType("datetime");
            Property(x => x.ValidDrDrive).HasColumnName(@"ValidDrDrive").IsOptional().HasColumnType("datetime");
            Property(x => x.IsDefault).HasColumnName(@"IsDefault").IsRequired().HasColumnType("bit");
            Property(x => x.UserId).HasColumnName(@"UserId").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Member).WithMany(b => b.Plans).HasForeignKey(c => c.MemberId).WillCascadeOnDelete(false); // FK_Plan_Member
            HasRequired(a => a.SubscriptType).WithMany(b => b.Plans).HasForeignKey(c => c.SubscriptTypeId).WillCascadeOnDelete(false); // FK_Plan_SubscriptType
        }
    }

    // PlanExtra
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class PlanExtraConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PlanExtra>
    {
        public PlanExtraConfiguration()
            : this("dbo")
        {
        }
 
        public PlanExtraConfiguration(string schema)
        {
            ToTable(schema + ".PlanExtra");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PlanId).HasColumnName(@"PlanId").IsRequired().HasColumnType("bigint");
            Property(x => x.RotationCount).HasColumnName(@"RotationCount").IsRequired().HasColumnType("int");
            Property(x => x.RotationPrice).HasColumnName(@"RotationPrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.FlowActivityCount).HasColumnName(@"FlowActivityCount").IsRequired().HasColumnType("int");
            Property(x => x.FlowActivityPrice).HasColumnName(@"FlowActivityPrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.StorageSize).HasColumnName(@"StorageSize").IsRequired().HasColumnType("bigint");
            Property(x => x.StoragePrice).HasColumnName(@"StoragePrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.DrDriveSize).HasColumnName(@"DrDriveSize").IsRequired().HasColumnType("bigint");
            Property(x => x.DrDrivePrice).HasColumnName(@"DrDrivePrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Plan).WithMany(b => b.PlanExtras).HasForeignKey(c => c.PlanId).WillCascadeOnDelete(false); // FK_PlanExtra_Plan
        }
    }

    // PlanRequest
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class PlanRequestConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PlanRequest>
    {
        public PlanRequestConfiguration()
            : this("dbo")
        {
        }
 
        public PlanRequestConfiguration(string schema)
        {
            ToTable(schema + ".PlanRequest");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.MemberId).HasColumnName(@"MemberId").IsRequired().HasColumnType("bigint");
            Property(x => x.SubscriptTypeId).HasColumnName(@"SubscriptTypeId").IsRequired().HasColumnType("int");
            Property(x => x.RotationCount).HasColumnName(@"RotationCount").IsRequired().HasColumnType("int");
            Property(x => x.FlowActivityCount).HasColumnName(@"FlowActivityCount").IsRequired().HasColumnType("int");
            Property(x => x.StorageSize).HasColumnName(@"StorageSize").IsRequired().HasColumnType("bigint");
            Property(x => x.DrDriveSize).HasColumnName(@"DrDriveSize").IsRequired().HasColumnType("bigint");
            Property(x => x.ExpiryDocDay).HasColumnName(@"ExpiryDocDay").IsRequired().HasColumnType("int");
            Property(x => x.PackageExpiryDay).HasColumnName(@"PackageExpiryDay").IsRequired().HasColumnType("int");
            Property(x => x.Status).HasColumnName(@"Status").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(2);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Member).WithMany(b => b.PlanRequests).HasForeignKey(c => c.MemberId).WillCascadeOnDelete(false); // FK_PlanRequest_Member
            HasRequired(a => a.SubscriptType).WithMany(b => b.PlanRequests).HasForeignKey(c => c.SubscriptTypeId).WillCascadeOnDelete(false); // FK_PlanRequest_SubscriptType
        }
    }

    // MemberProject
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberProjectConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MemberProject>
    {
        public MemberProjectConfiguration()
            : this("dbo")
        {
        }
 
        public MemberProjectConfiguration(string schema)
        {
            ToTable(schema + ".MemberProject");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.MemberSubscribeId).HasColumnName(@"MemberSubscribeId").IsRequired().HasColumnType("bigint");
            Property(x => x.ProjectId).HasColumnName(@"ProjectId").IsRequired().HasColumnType("bigint");
            Property(x => x.Flag).HasColumnName(@"Flag").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.MemberSubscribe).WithMany(b => b.MemberProjects).HasForeignKey(c => c.MemberSubscribeId).WillCascadeOnDelete(false); // FK_MemberProject_MemberSubscribe
            HasRequired(a => a.Project).WithMany(b => b.MemberProjects).HasForeignKey(c => c.ProjectId).WillCascadeOnDelete(false); // FK_MemberProject_Project
        }
    }

    // MemberRotation
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberRotationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MemberRotation>
    {
        public MemberRotationConfiguration()
            : this("dbo")
        {
        }
 
        public MemberRotationConfiguration(string schema)
        {
            ToTable(schema + ".MemberRotation");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.MemberWorkflowId).HasColumnName(@"MemberWorkflowId").IsRequired().HasColumnType("bigint");
            Property(x => x.RotationId).HasColumnName(@"RotationId").IsRequired().HasColumnType("bigint");
            Property(x => x.Flag).HasColumnName(@"Flag").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.MemberWorkflow).WithMany(b => b.MemberRotations).HasForeignKey(c => c.MemberWorkflowId).WillCascadeOnDelete(false); // FK_MemberRotation_MemberWorkflow
            HasRequired(a => a.Rotation).WithMany(b => b.MemberRotations).HasForeignKey(c => c.RotationId).WillCascadeOnDelete(false); // FK_MemberRotation_Rotation
        }
    }

    // MemberSignHistory
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberSignHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MemberSignHistory>
    {
        public MemberSignHistoryConfiguration()
            : this("dbo")
        {
        }
 
        public MemberSignHistoryConfiguration(string schema)
        {
            ToTable(schema + ".MemberSignHistory");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.MemberId).HasColumnName(@"MemberId").IsRequired().HasColumnType("bigint");
            Property(x => x.ImageSign).HasColumnName(@"ImageSign").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.SignType).HasColumnName(@"SignType").IsRequired().HasColumnType("int");
            Property(x => x.UserId).HasColumnName(@"UserId").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Member).WithMany(b => b.MemberSignHistories).HasForeignKey(c => c.MemberId).WillCascadeOnDelete(false); // FK_MemberSignHistory_Member
        }
    }

    // MemberSubscribe
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberSubscribeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MemberSubscribe>
    {
        public MemberSubscribeConfiguration()
            : this("dbo")
        {
        }
 
        public MemberSubscribeConfiguration(string schema)
        {
            ToTable(schema + ".MemberSubscribe");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.MemberPermissionId).HasColumnName(@"MemberPermissionId").IsRequired().HasColumnType("bigint");
            Property(x => x.CompanyId).HasColumnName(@"CompanyId").IsRequired().HasColumnType("bigint");
            Property(x => x.Flag).HasColumnName(@"Flag").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Company).WithMany(b => b.MemberSubscribes).HasForeignKey(c => c.CompanyId).WillCascadeOnDelete(false); // FK_MemberSubscribe_Company
            HasRequired(a => a.MemberPermission).WithMany(b => b.MemberSubscribes).HasForeignKey(c => c.MemberPermissionId).WillCascadeOnDelete(false); // FK_MemberSubscribe_MemberPermission
        }
    }

    // MemberTitle
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberTitleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MemberTitle>
    {
        public MemberTitleConfiguration()
            : this("dbo")
        {
        }
 
        public MemberTitleConfiguration(string schema)
        {
            ToTable(schema + ".MemberTitle");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
        }
    }

    // MemberTopupDeposit
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberTopupDepositConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MemberTopupDeposit>
    {
        public MemberTopupDepositConfiguration()
            : this("dbo")
        {
        }
 
        public MemberTopupDepositConfiguration(string schema)
        {
            ToTable(schema + ".MemberTopupDeposit");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.TopupNo).HasColumnName(@"TopupNo").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.TopupDate).HasColumnName(@"TopupDate").IsRequired().HasColumnType("date");
            Property(x => x.MemberId).HasColumnName(@"MemberId").IsRequired().HasColumnType("bigint");
            Property(x => x.Amount).HasColumnName(@"Amount").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.PaymentStatus).HasColumnName(@"PaymentStatus").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(2);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Member).WithMany(b => b.MemberTopupDeposits).HasForeignKey(c => c.MemberId).WillCascadeOnDelete(false); // FK_MemberTopupDeposit_Member
        }
    }

    // MemberTopupPayment
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberTopupPaymentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MemberTopupPayment>
    {
        public MemberTopupPaymentConfiguration()
            : this("dbo")
        {
        }
 
        public MemberTopupPaymentConfiguration(string schema)
        {
            ToTable(schema + ".MemberTopupPayment");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PaymentNo).HasColumnName(@"PaymentNo").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.PaymentDate).HasColumnName(@"PaymentDate").IsRequired().HasColumnType("date");
            Property(x => x.TopupDepositId).HasColumnName(@"TopupDepositId").IsRequired().HasColumnType("bigint");
            Property(x => x.Amount).HasColumnName(@"Amount").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.CompanyBankId).HasColumnName(@"CompanyBankId").IsRequired().HasColumnType("int");
            Property(x => x.MemberAccountId).HasColumnName(@"MemberAccountId").IsOptional().HasColumnType("bigint");
            Property(x => x.PaymentStatus).HasColumnName(@"PaymentStatus").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(2);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.MemberAccount).WithMany(b => b.MemberTopupPayments).HasForeignKey(c => c.MemberAccountId).WillCascadeOnDelete(false); // FK_MemberTopupPayment_MemberAccount
            HasRequired(a => a.CompanyBank).WithMany(b => b.MemberTopupPayments).HasForeignKey(c => c.CompanyBankId).WillCascadeOnDelete(false); // FK_MemberTopupPayment_CompanyBank
            HasRequired(a => a.MemberTopupDeposit).WithMany(b => b.MemberTopupPayments).HasForeignKey(c => c.TopupDepositId).WillCascadeOnDelete(false); // FK_MemberTopupPayment_MemberTopupDeposit
        }
    }

    // MemberType
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MemberType>
    {
        public MemberTypeConfiguration()
            : this("dbo")
        {
        }
 
        public MemberTypeConfiguration(string schema)
        {
            ToTable(schema + ".MemberType");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Descr).HasColumnName(@"Descr").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Info).HasColumnName(@"Info").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(1000);
            Property(x => x.BitValue).HasColumnName(@"BitValue").IsRequired().HasColumnType("int");
            Property(x => x.UserId).HasColumnName(@"UserId").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");
        }
    }

    // MemberWorkflow
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MemberWorkflowConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MemberWorkflow>
    {
        public MemberWorkflowConfiguration()
            : this("dbo")
        {
        }
 
        public MemberWorkflowConfiguration(string schema)
        {
            ToTable(schema + ".MemberWorkflow");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.MemberProjectId).HasColumnName(@"MemberProjectId").IsRequired().HasColumnType("bigint");
            Property(x => x.WorkflowId).HasColumnName(@"WorkflowId").IsRequired().HasColumnType("bigint");
            Property(x => x.Flag).HasColumnName(@"Flag").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.MemberProject).WithMany(b => b.MemberWorkflows).HasForeignKey(c => c.MemberProjectId).WillCascadeOnDelete(false); // FK_MemberWorkflow_MemberProject
            HasRequired(a => a.Workflow).WithMany(b => b.MemberWorkflows).HasForeignKey(c => c.WorkflowId).WillCascadeOnDelete(false); // FK_MemberWorkflow_Workflow
        }
    }

    // Message
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class MessageConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Message>
    {
        public MessageConfiguration()
            : this("dbo")
        {
        }
 
        public MessageConfiguration(string schema)
        {
            ToTable(schema + ".Message");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.FromId).HasColumnName(@"FromId").IsRequired().HasColumnType("bigint");
            Property(x => x.ToId).HasColumnName(@"ToId").IsRequired().HasColumnType("bigint");
            Property(x => x.BroadcastMessageId).HasColumnName(@"BroadcastMessageId").IsOptional().HasColumnType("bigint");
            Property(x => x.TextMessage).HasColumnName(@"TextMessage").IsRequired().IsUnicode(false).HasColumnType("varchar");
            Property(x => x.MessageType).HasColumnName(@"MessageType").IsRequired().HasColumnType("int");
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateOpened).HasColumnName(@"DateOpened").IsOptional().HasColumnType("datetime");
            Property(x => x.DateReplied).HasColumnName(@"DateReplied").IsOptional().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.BroadcastMessage).WithMany(b => b.Messages).HasForeignKey(c => c.BroadcastMessageId).WillCascadeOnDelete(false); // FK_Message_BroadcastMessage
            HasRequired(a => a.Member_FromId).WithMany(b => b.Messages_FromId).HasForeignKey(c => c.FromId).WillCascadeOnDelete(false); // FK_Message_MemberFrom
            HasRequired(a => a.Member_ToId).WithMany(b => b.Messages_ToId).HasForeignKey(c => c.ToId).WillCascadeOnDelete(false); // FK_Message_MemberTo
        }
    }

    // News
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class NewsConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<News>
    {
        public NewsConfiguration()
            : this("dbo")
        {
        }
 
        public NewsConfiguration(string schema)
        {
            ToTable(schema + ".News");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").IsRequired().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.Descr).HasColumnName(@"Descr").IsRequired().HasColumnType("nvarchar");
            Property(x => x.NewsType).HasColumnName(@"NewsType").IsRequired().HasColumnType("int");
            Property(x => x.IsActive).HasColumnName(@"IsActive").IsRequired().HasColumnType("bit");
            Property(x => x.CreatorId).HasColumnName(@"CreatorId").IsRequired().HasColumnType("bigint");
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");
        }
    }

    // NewsDetail
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class NewsDetailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<NewsDetail>
    {
        public NewsDetailConfiguration()
            : this("dbo")
        {
        }
 
        public NewsDetailConfiguration(string schema)
        {
            ToTable(schema + ".NewsDetail");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.NewsId).HasColumnName(@"NewsId").IsRequired().HasColumnType("bigint");
            Property(x => x.Image).HasColumnName(@"Image").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Descr).HasColumnName(@"Descr").IsOptional().HasColumnType("nvarchar");

            // Foreign keys
            HasRequired(a => a.News).WithMany(b => b.NewsDetails).HasForeignKey(c => c.NewsId).WillCascadeOnDelete(false); // FK_NewsDetail_News
        }
    }

    // NewsType
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class NewsTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<NewsType>
    {
        public NewsTypeConfiguration()
            : this("dbo")
        {
        }
 
        public NewsTypeConfiguration(string schema)
        {
            ToTable(schema + ".NewsType");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Descr).HasColumnName(@"Descr").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Info).HasColumnName(@"Info").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(1000);
            Property(x => x.BitValue).HasColumnName(@"BitValue").IsRequired().HasColumnType("int");
            Property(x => x.UserId).HasColumnName(@"UserId").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");
        }
    }

    // NewsVideo
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class NewsVideoConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<NewsVideo>
    {
        public NewsVideoConfiguration()
            : this("dbo")
        {
        }
 
        public NewsVideoConfiguration(string schema)
        {
            ToTable(schema + ".NewsVideo");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Code).HasColumnName(@"Code").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.Title).HasColumnName(@"Title").IsOptional().HasColumnType("nvarchar").HasMaxLength(500);
            Property(x => x.Descr).HasColumnName(@"Descr").IsOptional().HasColumnType("nvarchar");
            Property(x => x.ChannelId).HasColumnName(@"ChannelId").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.ChannelTitle).HasColumnName(@"ChannelTitle").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.CategoryId).HasColumnName(@"CategoryId").IsOptional().HasColumnType("bigint");
            Property(x => x.DatePublished).HasColumnName(@"DatePublished").IsRequired().HasColumnType("datetime");
            Property(x => x.IsActive).HasColumnName(@"IsActive").IsRequired().HasColumnType("bit");
            Property(x => x.CreatorId).HasColumnName(@"CreatorId").IsRequired().HasColumnType("bigint");
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");
        }
    }

    // PaymentMethod
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class PaymentMethodConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PaymentMethod>
    {
        public PaymentMethodConfiguration()
            : this("dbo")
        {
        }
 
        public PaymentMethodConfiguration(string schema)
        {
            ToTable(schema + ".PaymentMethod");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Code).HasColumnName(@"Code").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(5);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Logo).HasColumnName(@"Logo").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Descr).HasColumnName(@"Descr").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(1000);
            Property(x => x.UsingType).HasColumnName(@"UsingType").IsRequired().HasColumnType("int");
            Property(x => x.ConfirmType).HasColumnName(@"ConfirmType").IsRequired().HasColumnType("int");
            Property(x => x.AppZoneAccess).HasColumnName(@"AppZoneAccess").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(1000);
            Property(x => x.UserId).HasColumnName(@"UserId").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");
        }
    }

    // PaymentStatus
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class PaymentStatuConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PaymentStatu>
    {
        public PaymentStatuConfiguration()
            : this("dbo")
        {
        }
 
        public PaymentStatuConfiguration(string schema)
        {
            ToTable(schema + ".PaymentStatus");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Code).HasColumnName(@"Code").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(2);
            Property(x => x.Descr).HasColumnName(@"Descr").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.UserId).HasColumnName(@"UserId").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");
        }
    }

    // PodCast
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class PodCastConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<PodCast>
    {
        public PodCastConfiguration()
            : this("dbo")
        {
        }
 
        public PodCastConfiguration(string schema)
        {
            ToTable(schema + ".PodCast");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").IsRequired().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.Descr).HasColumnName(@"Descr").IsOptional().HasColumnType("nvarchar");
            Property(x => x.Duration).HasColumnName(@"Duration").IsRequired().HasColumnType("int");
            Property(x => x.Image).HasColumnName(@"Image").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.AudioFileName).HasColumnName(@"AudioFileName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.FileNameOri).HasColumnName(@"FileNameOri").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.IsActive).HasColumnName(@"IsActive").IsRequired().HasColumnType("bit");
            Property(x => x.CreatorId).HasColumnName(@"CreatorId").IsRequired().HasColumnType("bigint");
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");
        }
    }

    // Project
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class ProjectConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Project>
    {
        public ProjectConfiguration()
            : this("dbo")
        {
        }
 
        public ProjectConfiguration(string schema)
        {
            ToTable(schema + ".Project");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Descr).HasColumnName(@"Descr").IsRequired().IsUnicode(false).HasColumnType("varchar");
            Property(x => x.CompanyId).HasColumnName(@"CompanyId").IsRequired().HasColumnType("bigint");
            Property(x => x.IsActive).HasColumnName(@"IsActive").IsRequired().HasColumnType("bit");
            Property(x => x.CreatorId).HasColumnName(@"CreatorId").IsOptional().HasColumnType("bigint");
            Property(x => x.UserId).HasColumnName(@"UserId").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Company).WithMany(b => b.Projects).HasForeignKey(c => c.CompanyId).WillCascadeOnDelete(false); // FK_Project_Company
        }
    }

    // Rotation
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class RotationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Rotation>
    {
        public RotationConfiguration()
            : this("dbo")
        {
        }
 
        public RotationConfiguration(string schema)
        {
            ToTable(schema + ".Rotation");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Subject).HasColumnName(@"Subject").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.WorkflowId).HasColumnName(@"WorkflowId").IsRequired().HasColumnType("bigint");
            Property(x => x.Status).HasColumnName(@"Status").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(2);
            Property(x => x.Remark).HasColumnName(@"Remark").IsOptional().IsUnicode(false).HasColumnType("varchar");
            Property(x => x.Price).HasColumnName(@"Price").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.MemberId).HasColumnName(@"MemberId").IsRequired().HasColumnType("bigint");
            Property(x => x.CreatorId).HasColumnName(@"CreatorId").IsOptional().HasColumnType("bigint");
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");
            Property(x => x.DateStatus).HasColumnName(@"DateStatus").IsOptional().HasColumnType("datetime");
            Property(x => x.DateStarted).HasColumnName(@"DateStarted").IsOptional().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Member).WithMany(b => b.Rotations).HasForeignKey(c => c.MemberId).WillCascadeOnDelete(false); // FK_Rotation_Member
            HasRequired(a => a.Workflow).WithMany(b => b.Rotations).HasForeignKey(c => c.WorkflowId).WillCascadeOnDelete(false); // FK_Rotation_Workflow
        }
    }

    // RotationMember
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class RotationMemberConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RotationMember>
    {
        public RotationMemberConfiguration()
            : this("dbo")
        {
        }
 
        public RotationMemberConfiguration(string schema)
        {
            ToTable(schema + ".RotationMember");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RotationId).HasColumnName(@"RotationId").IsRequired().HasColumnType("bigint");
            Property(x => x.WorkflowNodeId).HasColumnName(@"WorkflowNodeId").IsRequired().HasColumnType("bigint");
            Property(x => x.MemberId).HasColumnName(@"MemberId").IsOptional().HasColumnType("bigint");
            Property(x => x.FlagPermission).HasColumnName(@"FlagPermission").IsRequired().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.Member).WithMany(b => b.RotationMembers).HasForeignKey(c => c.MemberId).WillCascadeOnDelete(false); // FK_RotationMember_Member
            HasRequired(a => a.Rotation).WithMany(b => b.RotationMembers).HasForeignKey(c => c.RotationId).WillCascadeOnDelete(false); // FK_RotationMember_Rotation
            HasRequired(a => a.WorkflowNode).WithMany(b => b.RotationMembers).HasForeignKey(c => c.WorkflowNodeId).WillCascadeOnDelete(false); // FK_RotationMember_WorkflowNode
        }
    }

    // RotationNode
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class RotationNodeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RotationNode>
    {
        public RotationNodeConfiguration()
            : this("dbo")
        {
        }
 
        public RotationNodeConfiguration(string schema)
        {
            ToTable(schema + ".RotationNode");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RotationId).HasColumnName(@"RotationId").IsRequired().HasColumnType("bigint");
            Property(x => x.WorkflowNodeId).HasColumnName(@"WorkflowNodeId").IsRequired().HasColumnType("bigint");
            Property(x => x.PrevWorkflowNodeId).HasColumnName(@"PrevWorkflowNodeId").IsOptional().HasColumnType("bigint");
            Property(x => x.SenderRotationNodeId).HasColumnName(@"SenderRotationNodeId").IsOptional().HasColumnType("bigint");
            Property(x => x.MemberId).HasColumnName(@"MemberId").IsRequired().HasColumnType("bigint");
            Property(x => x.Value).HasColumnName(@"Value").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Status).HasColumnName(@"Status").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(2);
            Property(x => x.DateRead).HasColumnName(@"DateRead").IsOptional().HasColumnType("datetime");
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.RotationNode_SenderRotationNodeId).WithMany(b => b.RotationNodes).HasForeignKey(c => c.SenderRotationNodeId).WillCascadeOnDelete(false); // FK_RotationNode_RotationNode
            HasRequired(a => a.Member).WithMany(b => b.RotationNodes).HasForeignKey(c => c.MemberId).WillCascadeOnDelete(false); // FK_RotationNode_Member
            HasRequired(a => a.Rotation).WithMany(b => b.RotationNodes).HasForeignKey(c => c.RotationId).WillCascadeOnDelete(false); // FK_RotationNode_Rotation
            HasRequired(a => a.WorkflowNode).WithMany(b => b.RotationNodes).HasForeignKey(c => c.WorkflowNodeId).WillCascadeOnDelete(false); // FK_RotationNode_WorkflowNode
        }
    }

    // RotationNodeDoc
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class RotationNodeDocConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RotationNodeDoc>
    {
        public RotationNodeDocConfiguration()
            : this("dbo")
        {
        }
 
        public RotationNodeDocConfiguration(string schema)
        {
            ToTable(schema + ".RotationNodeDoc");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RotationNodeId).HasColumnName(@"RotationNodeId").IsRequired().HasColumnType("bigint");
            Property(x => x.DocumentId).HasColumnName(@"DocumentId").IsOptional().HasColumnType("bigint");
            Property(x => x.FlagAction).HasColumnName(@"FlagAction").IsRequired().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.Document).WithMany(b => b.RotationNodeDocs).HasForeignKey(c => c.DocumentId).WillCascadeOnDelete(false); // FK_RotationNodeDoc_Document
            HasRequired(a => a.RotationNode).WithMany(b => b.RotationNodeDocs).HasForeignKey(c => c.RotationNodeId).WillCascadeOnDelete(false); // FK_RotationNodeDoc_RotationNode
        }
    }

    // RotationNodeLog
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class RotationNodeLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RotationNodeLog>
    {
        public RotationNodeLogConfiguration()
            : this("dbo")
        {
        }
 
        public RotationNodeLogConfiguration(string schema)
        {
            ToTable(schema + ".RotationNodeLog");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RotationNodeId).HasColumnName(@"RotationNodeId").IsRequired().HasColumnType("bigint");
            Property(x => x.Descr).HasColumnName(@"Descr").IsRequired().IsUnicode(false).HasColumnType("varchar");
            Property(x => x.Status).HasColumnName(@"Status").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(2);
            Property(x => x.DateStamp).HasColumnName(@"DateStamp").IsRequired().HasColumnType("datetime");
        }
    }

    // RotationNodeRemark
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class RotationNodeRemarkConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RotationNodeRemark>
    {
        public RotationNodeRemarkConfiguration()
            : this("dbo")
        {
        }
 
        public RotationNodeRemarkConfiguration(string schema)
        {
            ToTable(schema + ".RotationNodeRemark");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RotationNodeId).HasColumnName(@"RotationNodeId").IsRequired().HasColumnType("bigint");
            Property(x => x.Remark).HasColumnName(@"Remark").IsRequired().IsUnicode(false).HasColumnType("varchar");
            Property(x => x.DateStamp).HasColumnName(@"DateStamp").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.RotationNode).WithMany(b => b.RotationNodeRemarks).HasForeignKey(c => c.RotationNodeId).WillCascadeOnDelete(false); // FK_RotationNodeRemark_RotationNode
        }
    }

    // RotationNodeUpDoc
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class RotationNodeUpDocConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RotationNodeUpDoc>
    {
        public RotationNodeUpDocConfiguration()
            : this("dbo")
        {
        }
 
        public RotationNodeUpDocConfiguration(string schema)
        {
            ToTable(schema + ".RotationNodeUpDoc");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RotationNodeId).HasColumnName(@"RotationNodeId").IsRequired().HasColumnType("bigint");
            Property(x => x.DocumentUploadId).HasColumnName(@"DocumentUploadId").IsOptional().HasColumnType("bigint");

            // Foreign keys
            HasOptional(a => a.DocumentUpload).WithMany(b => b.RotationNodeUpDocs).HasForeignKey(c => c.DocumentUploadId).WillCascadeOnDelete(false); // FK_RotationNodeUpDoc_DocumentUpload
            HasRequired(a => a.RotationNode).WithMany(b => b.RotationNodeUpDocs).HasForeignKey(c => c.RotationNodeId).WillCascadeOnDelete(false); // FK_RotationNodeUpDoc_RotationNode
        }
    }

    // Stamp
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class StampConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Stamp>
    {
        public StampConfiguration()
            : this("dbo")
        {
        }
 
        public StampConfiguration(string schema)
        {
            ToTable(schema + ".Stamp");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CompanyId).HasColumnName(@"CompanyId").IsRequired().HasColumnType("bigint");
            Property(x => x.Descr).HasColumnName(@"Descr").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(1000);
            Property(x => x.StampFile).HasColumnName(@"StampFile").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.CreatorId).HasColumnName(@"CreatorId").IsOptional().HasColumnType("bigint");
            Property(x => x.UserId).HasColumnName(@"UserId").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Company).WithMany(b => b.Stamps).HasForeignKey(c => c.CompanyId).WillCascadeOnDelete(false); // FK_Stamp_Company
        }
    }

    // StatusCode
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class StatusCodeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StatusCode>
    {
        public StatusCodeConfiguration()
            : this("dbo")
        {
        }
 
        public StatusCodeConfiguration(string schema)
        {
            ToTable(schema + ".StatusCode");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Code).HasColumnName(@"Code").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(2);
            Property(x => x.Descr).HasColumnName(@"Descr").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.TextColor).HasColumnName(@"TextColor").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.BackColor).HasColumnName(@"BackColor").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.Icon).HasColumnName(@"Icon").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
        }
    }

    // SubscriptExtraType
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class SubscriptExtraTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SubscriptExtraType>
    {
        public SubscriptExtraTypeConfiguration()
            : this("dbo")
        {
        }
 
        public SubscriptExtraTypeConfiguration(string schema)
        {
            ToTable(schema + ".SubscriptExtraType");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Price).HasColumnName(@"Price").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.RotationCount).HasColumnName(@"RotationCount").IsRequired().HasColumnType("int");
            Property(x => x.FlowActivityCount).HasColumnName(@"FlowActivityCount").IsRequired().HasColumnType("int");
            Property(x => x.StorageSize).HasColumnName(@"StorageSize").IsRequired().HasColumnType("bigint");
            Property(x => x.DrDriveSize).HasColumnName(@"DrDriveSize").IsRequired().HasColumnType("bigint");
            Property(x => x.UserId).HasColumnName(@"UserId").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");
        }
    }

    // SubscriptType
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class SubscriptTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SubscriptType>
    {
        public SubscriptTypeConfiguration()
            : this("dbo")
        {
        }
 
        public SubscriptTypeConfiguration(string schema)
        {
            ToTable(schema + ".SubscriptType");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.TypeCode).HasColumnName(@"TypeCode").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.ClassName).HasColumnName(@"ClassName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Descr).HasColumnName(@"Descr").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(1000);
            Property(x => x.Price).HasColumnName(@"Price").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.PriceUnitCode).HasColumnName(@"PriceUnitCode").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.PriceUnitDescr).HasColumnName(@"PriceUnitDescr").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.RotationCount).HasColumnName(@"RotationCount").IsRequired().HasColumnType("int");
            Property(x => x.RotationPrice).HasColumnName(@"RotationPrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.FlowActivityCount).HasColumnName(@"FlowActivityCount").IsRequired().HasColumnType("int");
            Property(x => x.FlowActivityPrice).HasColumnName(@"FlowActivityPrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.StorageSize).HasColumnName(@"StorageSize").IsRequired().HasColumnType("bigint");
            Property(x => x.StoragePrice).HasColumnName(@"StoragePrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.DrDriveSize).HasColumnName(@"DrDriveSize").IsRequired().HasColumnType("bigint");
            Property(x => x.DrDrivePrice).HasColumnName(@"DrDrivePrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ExpiryDocDay).HasColumnName(@"ExpiryDocDay").IsRequired().HasColumnType("int");
            Property(x => x.PackageExpiryDay).HasColumnName(@"PackageExpiryDay").IsRequired().HasColumnType("int");
            Property(x => x.UserId).HasColumnName(@"UserId").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");
        }
    }

    // Symbol
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class SymbolConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Symbol>
    {
        public SymbolConfiguration()
            : this("dbo")
        {
        }
 
        public SymbolConfiguration(string schema)
        {
            ToTable(schema + ".Symbol");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Code).HasColumnName(@"Code").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Descr).HasColumnName(@"Descr").IsRequired().IsUnicode(false).HasColumnType("varchar");
            Property(x => x.TextColor).HasColumnName(@"TextColor").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.BackColor).HasColumnName(@"BackColor").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.Icon).HasColumnName(@"Icon").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.SymbolType).HasColumnName(@"SymbolType").IsRequired().HasColumnType("int");
            Property(x => x.ElementName).HasColumnName(@"ElementName").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.UserId).HasColumnName(@"UserId").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");
        }
    }

    // sysdiagrams
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class SysdiagramConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sysdiagram>
    {
        public SysdiagramConfiguration()
            : this("dbo")
        {
        }
 
        public SysdiagramConfiguration(string schema)
        {
            ToTable(schema + ".sysdiagrams");
            HasKey(x => x.DiagramId);

            Property(x => x.Name).HasColumnName(@"name").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.PrincipalId).HasColumnName(@"principal_id").IsRequired().HasColumnType("int");
            Property(x => x.DiagramId).HasColumnName(@"diagram_id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Version).HasColumnName(@"version").IsOptional().HasColumnType("int");
            Property(x => x.Definition).HasColumnName(@"definition").IsOptional().HasColumnType("varbinary");
        }
    }

    // UserAdmin
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class UserAdminConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UserAdmin>
    {
        public UserAdminConfiguration()
            : this("dbo")
        {
        }
 
        public UserAdminConfiguration(string schema)
        {
            ToTable(schema + ".UserAdmin");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Email).HasColumnName(@"Email").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Phone).HasColumnName(@"Phone").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.AdminType).HasColumnName(@"AdminType").IsRequired().HasColumnType("int");
            Property(x => x.LastLogin).HasColumnName(@"LastLogin").IsOptional().HasColumnType("datetime");
            Property(x => x.LastLogout).HasColumnName(@"LastLogout").IsOptional().HasColumnType("datetime");
            Property(x => x.AppZoneAccess).HasColumnName(@"AppZoneAccess").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(1000);
            Property(x => x.Password).HasColumnName(@"Password").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(500);
            Property(x => x.IsActive).HasColumnName(@"IsActive").IsRequired().HasColumnType("bit");
            Property(x => x.PanelType).HasColumnName(@"PanelType").IsRequired().HasColumnType("int");
            Property(x => x.UserId).HasColumnName(@"UserId").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");
        }
    }

    // Versioning
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class VersioningConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Versioning>
    {
        public VersioningConfiguration()
            : this("dbo")
        {
        }
 
        public VersioningConfiguration(string schema)
        {
            ToTable(schema + ".Versioning");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PackageName).HasColumnName(@"PackageName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.VersionCode).HasColumnName(@"VersionCode").IsRequired().HasColumnType("int");
            Property(x => x.VersionName).HasColumnName(@"VersionName").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Version).HasColumnName(@"Version").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
        }
    }

    // Voucher
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class VoucherConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Voucher>
    {
        public VoucherConfiguration()
            : this("dbo")
        {
        }
 
        public VoucherConfiguration(string schema)
        {
            ToTable(schema + ".Voucher");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Number).HasColumnName(@"Number").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Nominal).HasColumnName(@"Nominal").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Price).HasColumnName(@"Price").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.VoucherType).HasColumnName(@"VoucherType").IsRequired().HasColumnType("int");
            Property(x => x.TrxId).HasColumnName(@"TrxId").IsOptional().HasColumnType("bigint");
            Property(x => x.TrxType).HasColumnName(@"TrxType").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.TrxUserId).HasColumnName(@"TrxUserId").IsOptional().HasColumnType("bigint");
            Property(x => x.DateUsed).HasColumnName(@"DateUsed").IsOptional().HasColumnType("datetime");
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
        }
    }

    // VoucherGenerator
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class VoucherGeneratorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VoucherGenerator>
    {
        public VoucherGeneratorConfiguration()
            : this("dbo")
        {
        }
 
        public VoucherGeneratorConfiguration(string schema)
        {
            ToTable(schema + ".VoucherGenerator");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Number).HasColumnName(@"Number").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.Nominal).HasColumnName(@"Nominal").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Price).HasColumnName(@"Price").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Quantity).HasColumnName(@"Quantity").IsRequired().HasColumnType("int");
            Property(x => x.VoucherType).HasColumnName(@"VoucherType").IsRequired().HasColumnType("int");
            Property(x => x.UserId).HasColumnName(@"UserId").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
        }
    }

    // Workflow
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class WorkflowConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Workflow>
    {
        public WorkflowConfiguration()
            : this("dbo")
        {
        }
 
        public WorkflowConfiguration(string schema)
        {
            ToTable(schema + ".Workflow");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Descr).HasColumnName(@"Descr").IsRequired().IsUnicode(false).HasColumnType("varchar");
            Property(x => x.ProjectId).HasColumnName(@"ProjectId").IsRequired().HasColumnType("bigint");
            Property(x => x.IsActive).HasColumnName(@"IsActive").IsRequired().HasColumnType("bit");
            Property(x => x.CreatorId).HasColumnName(@"CreatorId").IsOptional().HasColumnType("bigint");
            Property(x => x.IsTemplate).HasColumnName(@"IsTemplate").IsRequired().HasColumnType("bit");
            Property(x => x.WfType).HasColumnName(@"WfType").IsRequired().HasColumnType("int");
            Property(x => x.UserId).HasColumnName(@"UserId").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").IsOptional().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Project).WithMany(b => b.Workflows).HasForeignKey(c => c.ProjectId).WillCascadeOnDelete(false); // FK_Workflow_Project
        }
    }

    // WorkflowNode
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class WorkflowNodeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<WorkflowNode>
    {
        public WorkflowNodeConfiguration()
            : this("dbo")
        {
        }
 
        public WorkflowNodeConfiguration(string schema)
        {
            ToTable(schema + ".WorkflowNode");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.WorkflowId).HasColumnName(@"WorkflowId").IsRequired().HasColumnType("bigint");
            Property(x => x.MemberId).HasColumnName(@"MemberId").IsOptional().HasColumnType("bigint");
            Property(x => x.SymbolId).HasColumnName(@"SymbolId").IsRequired().HasColumnType("int");
            Property(x => x.Caption).HasColumnName(@"Caption").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Info).HasColumnName(@"Info").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(1000);
            Property(x => x.Operator).HasColumnName(@"Operator").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.Value).HasColumnName(@"Value").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.PosLeft).HasColumnName(@"PosLeft").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.PosTop).HasColumnName(@"PosTop").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.Width).HasColumnName(@"Width").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.Height).HasColumnName(@"Height").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.TextColor).HasColumnName(@"TextColor").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.BackColor).HasColumnName(@"BackColor").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.Flag).HasColumnName(@"Flag").IsRequired().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.Member).WithMany(b => b.WorkflowNodes).HasForeignKey(c => c.MemberId).WillCascadeOnDelete(false); // FK_WorkflowNode_Member
            HasRequired(a => a.Symbol).WithMany(b => b.WorkflowNodes).HasForeignKey(c => c.SymbolId).WillCascadeOnDelete(false); // FK_WorkflowNode_Symbol
            HasRequired(a => a.Workflow).WithMany(b => b.WorkflowNodes).HasForeignKey(c => c.WorkflowId).WillCascadeOnDelete(false); // FK_WorkflowNode_Workflow
        }
    }

    // WorkflowNodeLink
    [System.CodeDom.Compiler.GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.19.2.0")]
    public class WorkflowNodeLinkConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<WorkflowNodeLink>
    {
        public WorkflowNodeLinkConfiguration()
            : this("dbo")
        {
        }
 
        public WorkflowNodeLinkConfiguration(string schema)
        {
            ToTable(schema + ".WorkflowNodeLink");
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").IsRequired().HasColumnType("bigint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.WorkflowNodeId).HasColumnName(@"WorkflowNodeId").IsRequired().HasColumnType("bigint");
            Property(x => x.WorkflowNodeToId).HasColumnName(@"WorkflowNodeToId").IsRequired().HasColumnType("bigint");
            Property(x => x.Caption).HasColumnName(@"Caption").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.Operator).HasColumnName(@"Operator").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.Value).HasColumnName(@"Value").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);
            Property(x => x.SymbolId).HasColumnName(@"SymbolId").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Symbol).WithMany(b => b.WorkflowNodeLinks).HasForeignKey(c => c.SymbolId).WillCascadeOnDelete(false); // FK_WorkflowNodeLink_Symbol
            HasRequired(a => a.WorkflowNode_WorkflowNodeId).WithMany(b => b.WorkflowNodeLinks_WorkflowNodeId).HasForeignKey(c => c.WorkflowNodeId).WillCascadeOnDelete(false); // FK_WorkflowNodeLink_WorkflowNode
            HasRequired(a => a.WorkflowNode_WorkflowNodeToId).WithMany(b => b.WorkflowNodeLinks_WorkflowNodeToId).HasForeignKey(c => c.WorkflowNodeToId).WillCascadeOnDelete(false); // FK_WorkflowNodeLink_WorkflowNode1
        }
    }

}
// </auto-generated>

