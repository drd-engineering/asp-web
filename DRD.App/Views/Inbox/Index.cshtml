@using DRD.Models.View;
@model Layout

@{
    ViewBag.Title = "Inbox";
    ViewBag.Submenu = "INBOX";
}

@section Scripts
{
    <script src="/assets/js/plugins/buttons/spin.min.js" type="text/javascript"></script>
    <script src="/assets/js/plugins/buttons/ladda.min.js" type="text/javascript"></script>
    <script src="/assets/js/pages/components_buttons.js" type="text/javascript"></script>

    <script src="/assets/vendors/angular-1.5.5/angular.js"></script>
    <script src="/assets/vendors/angular-1.5.5/angular-animate.js"></script>
    <script src="/Scripts/ui-bootstrap-tpls-1.3.2.js"></script>

    <script src="/assets/vendors/file-upload/ng-file-upload-shim.min.js"></script> <!-- for no html5 browsers support -->
    <script src="/assets/vendors/file-upload/ng-file-upload.min.js"></script>
    <script src="/assets/vendors/ng_only_number.js"></script>

    <link href="/assets/vendors/bootstrap-switch/bootstrap3/bootstrap-switch.css" rel="stylesheet" type="text/css" />
    <script src="/assets/vendors/bootstrap-switch/bootstrap-switch.js"></script>

    <script type="text/javascript" src="/assets/js/plugins/forms/styling/uniform.min.js"></script>
    <script type="text/javascript" src="/assets/js/plugins/forms/styling/switchery.min.js"></script>
    <script type="text/javascript" src="/assets/js/plugins/forms/styling/switch.min.js"></script>

    <script type="text/javascript" src="/assets/js/plugins/notifications/bootbox.min.js"></script>
    <script type="text/javascript" src="/assets/js/plugins/notifications/sweet_alert.min.js"></script>

    <script src="/html2pdf-master/dist/html2pdf.bundle.js"></script>
    <script src="/assets/vendors/ng_only_number.js"></script>
    <script src="/assets/vendors/angular-1.5.5/angular-sanitize.min.js"></script>
    <script src="~/Scripts/xpublic.js"></script>

    <script type="text/javascript" src="/assets/js/plugins/forms/styling/uniform.min.js"></script>
    <script type="text/javascript" src="/assets/js/plugins/forms/styling/switchery.min.js"></script>
    <script type="text/javascript" src="/assets/js/plugins/forms/styling/switch.min.js"></script>


}
@section Styles{
    <link href="/assets/css/pages/inbox.css" rel="stylesheet" type="text/css">
}

<body>
    <!-- Page container -->
    <div class="page-container" ng-controller="drdController">
        <!-- Page content -->
        <div class="page-content">


            <!-- Main content -->
            <div class="content-wrapper" style="display:none">
                <!-- Page header -->
                <div class="page-header page-header-default">
                    <div class="page-header-content">
                        <div class="page-title">
                            <h4><i class="icon-envelope position-left"></i>Inbox: {{currentRotationNode.WorkflowNode.Caption}}</h4>
                            Rotation: {{model.Subject}}
                        </div>
                    </div>

                </div>
                <!-- /page header -->
                <!-- Horizontal form options -->
                <!-- Content area -->
                <div class="content">
                    <!-- Basic layout-->
                    <div class="panel panel-flat">
                        <div class="panel-body">


                            <!--MEMBER DATA-->

                            <form name="myForm" class="form-horizontal" autocomplete="off">
                                <div ng-show="wizarno=='product'">
                                    <fieldset>
                                        <div class="col-md-12">

                                            <div ng-show="loadingLog==1">
                                                <i class="icon-spinner2 spinner"></i>
                                                <span>Loading log...</span>
                                            </div>
                                            <div class="row">
                                                <div class="col-md-10">
                                                    <ng-include src="'/Include/RotationLog'" onload="finishLoading()"></ng-include>
                                                </div>
                                            </div>
                                            <br />
                                            <div class="row" ng-show="model.DecissionInfo!=''">
                                                @*<div class="col-md-10">
                                                    <label class="control-label">Value to decision ({{model.DecissionInfo}})</label>
                                                    <input type="text" class="form-control" ng-model="model.Value" ng-required="wizarno=='product' && model.DecissionInfo!=''" maxlength="100" />*@
                                            </div>

                                        </div>
                                        <div class="row">

                                            <div ng-show="checkIsActive()" class="col-md-10">
                                                <label   class="control-label">Message for the next person</label><br />
                                                <textarea class="control-label" ng-model="model.Remark" rows="3" style="resize: none; overflow-y: hidden; opacity: 0.8; height: 100px;width:100%" @*ng-required="wizarno=='product'"*@></textarea>
                                            </div>

                                        </div>

                                        <hr />

                                        <div class="row">
                                            <div class="col-md-5">
                                                <span style="font-size:medium"><b>Document</b></span>
                                            </div>
                                            <div class="col-md-5">
                                                <button class="btn bg-slate-400 btn-xs pull-right" type="button" ng-show="checkIsFirstPerson() && checkIsActive()" ng-click="popupDocument()">Add</button>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-lg-10">
                                                <div style="height:5px"></div>
                                                <table class="table-xs table-bordered table-striped" style="font-size:small;width:100%">
                                                    <thead>
                                                        <tr>
                                                            <th width="25px">#</th>
                                                            <th width="150px">Original File Name</th>
                                                            <th width="100px">Action</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <tr ng-repeat="x in docs">
                                                            <td class="text-top">{{$index+1 + index}}</td>
                                                            <td class="text-top">
                                                                <a ng-click="editDocument($index);">
                                                                    <img ng-src="/Images/FileType/{{x.Document.ExtFile}}.png" width="16" />
                                                                    {{x.Document.FileName}}
                                                                </a><br />
                                                                <div style="height:5px"></div>
                                                                <span style="font-size:xx-small;">
                                                                    <!-- <span class="btn-permission{{(validAction(x.FlagAction,1)?' action-processed':'')}}" ng-show="validAction(x.Document.DocumentMember.FlagPermission,1)" ng-click="signDocument($index);">{{(validAction(x.FlagAction,1)?'Signed':'Sign')}}</span>
                                                                    <span ng-show={{(validAction(x.FlagAction,2)}} class="btn-permission{{(validAction(x.FlagAction,2)?' action-processed':'')}}" ng-click="revisiDocument($index);">{{(validAction(x.FlagAction,2)?'Revised':'Revision')}}</span> -->
                                                                    <span ng-show="true" class="btn-permission" ng-click="viewerDocument($index);">{{(validAction(x.FlagAction,4)?'Viewed':'View')}}</span>
                                                                </span>
                                                            </td>
                                                            <td class="text-top"><a ng-click="removeDocument($index);">Remove</a> </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                                </div>
                                            </div>
                                            <hr />
                                    </fieldset>
                                <br />
                                <div class="col-md-10" style="display:none" id="action-panel">
                                    <div class="panel panel-body border-top-primary text-center">
                                        <button type="button" ng-show="!checkIsFirstPerson() && checkIsActive()" class="btn bg-brown btn-ladda btn-submit" data-spinner-color="#333" data-style="zoom-in" ng-click="processActivity(4)"><span class="ladda-label">Revision</span></button>
                                        <button type="button" ng-show="!checkIsFirstPerson() && checkIsActive()" class="btn btn-danger btn-ladda btn-submit" data-style="zoom-in"><span class="ladda-label" ng-click="processActivity(2)">Reject</span></button>
                                        <button type="button" ng-show="validAction(model.FlagAction,8) && checkIsActive()" class="btn bg-info btn-ladda btn-submit" data-style="zoom-in"><span class="ladda-label" ng-click="processActivity(8)">Alter</span></button>
                                        <button type="button" ng-show="checkIsActive()" class="btn bg-grey-800 btn-ladda btn-submit" data-style="zoom-in"><span class="ladda-label" ng-click="processActivity(1)">Submit</span></button>
                                    </div>
                                </div>
                            </div>
                        </form>


                        <!-- View member modal -->
                        <ng-include src="'/Include/PopupDocument'"></ng-include>
                        <ng-include src="'/Include/PopupPassword'"></ng-include>
                        <ng-include src="'/Include/PopupIdentityImage'"></ng-include>
                        <ng-include src="'/Include/PdfIViewer'" onload="finishLoading()"></ng-include>
                        <!-- View member modal -->
                        <!--/MEMBER DATA-->
                        <!--CONFIRMATION THANK YOU-->

                        <div ng-show="wizarno=='success'">
                            <div class="col-md-12">

                                <div class="alert alert-success alert-styled-left">
                                    Data successfully saved.
                                </div>
                            </div>

                        </div>

                    </div>
                </div>


                <!-- /basic layout -->



            </div>
            <!-- /vertical form options -->
        </div>
        <!-- /Main content -->
    </div>
    <!-- /Page content -->
    </div>
    <!-- /Page container -->

    <script type="text/javascript">


        var myApp = angular.module('drdApp', ['ngAnimate', 'ui.bootstrap', 'ngFileUpload', 'ngOnlyNumberApp'])
        myApp.directive('onFinishRender', function ($timeout) {
            return {
                restrict: 'A',
                link: function (scope, element, attr) {
                    if (scope.$last === true) {
                        $timeout(function () {
                            scope.$emit('ngRepeatBindRoutesFinished');
                        });
                    }
                }
            }
        });
        myApp.controller("drdController", function ($scope, Upload, $location, $http, $filter) {
            // modal document
            $scope.companyId = -1;
            $scope.document = {};
            $scope.documents = [];
            $scope.documentCount = [];
            // modal workflow
            $scope.workflow = {};
            $scope.workflows = [];
            $scope.workflowCount = [];
            $scope.paging = [];
            $scope.kriteria = "";
            $scope.page = 1;
            $scope.row = 20;
            $scope.currPage = 0;
            $scope.index = 0;
            // modal workflow

            $scope.model = {};
            $scope.wizarno = 'product';
            $scope.master = {};
            $scope.model.IsActive = true;
            $scope.model.Image = "no_picture.png";
            $scope.docFileName = "";
            $scope.fileTypeImage = "no_document.png";
            $scope.model.Id = 0;
            $scope.rotationId = 0;
            $scope.model.Status = 0;
            $scope.isUpload = 0;
            $scope.infoSuccess = "Data berhasil disimpan.";

            $scope.currentRotationNode = {};
            $scope.tempDoc = {};
            $scope.docs = [];
            $scope.updocs = [];
            $scope.annos = [];
            $scope.loadingLog = 1;
            $scope.selectedIdx;
            $scope.curentUser;
            $scope.passwordType = 0;
            $scope.passwordcheck = false;
            $scope.docIdx = 0;
            $scope.identities = [];
            initValues();
            //initDocumentValues();


            $(".control-warning").uniform({
                radioClass: 'choice',
                wrapperClass: 'border-warning-600 text-warning-800'
            });

            $scope.$on('ngRepeatBindRoutesFinished', function (ngRepeatFinishedEvent) {

            });
            /*--------------------------------------------------------------
            INIT DATA
            --------------------------------------------------------------*/
            angular.element(document).ready(function () {
                $scope.thePassword = "";
                $(".content-wrapper").show();
            });

            function initValues() {
                $scope.curentUser = @Html.Raw(Json.Encode(Model.user));
                $scope.inboxId = @Html.Raw(Json.Encode(Model.dataId));
                $scope.dbmenus = @Html.Raw(Json.Encode(Model.dbmenus));
                var product = @Html.Raw(Json.Encode(Model.obj));

                if (product.id != 0) {
                    $scope.model.Id = $scope.inboxId;
                    $scope.rotationId = product.Id;
                    $scope.model.RotationNodeId = product.RotationNodeId;
                    $scope.model.FirstNodeId = product.FirstNodeId;
                    $scope.model.DefWorkflowNodeId = product.DefWorkflowNodeId;
                    $scope.model.Subject = product.Subject
                    $scope.model.CurrentActivity = product.CurrentActivity;
                    $scope.model.Status = product.Status;
                    $scope.model.Remark = product.Remark;
                    $scope.model.Value = product.RotationNodes[product.RotationNodes.length - 1].Value;
                    $scope.model.FlagAction = product.FlagAction;
                    $scope.model.DecissionInfo = product.DecissionInfo;
                    $scope.model.UserId = product.UserId;
                    $scope.rotationNodes = product.RotationNodes;
                    $scope.workflow = product.Workflow;
                    $scope.currentRotationNode = product.RotationNodes.filter((subject) => subject.Id == product.RotationNodeId)[0];
                    $scope.sumDocuments = product.SumRotationNodeDocs;
                    $scope.sumAttachments = product.SumRotationNodeUpDocs;

                    if ($scope.model.Status == 0) {
                        if ($scope.currentRotationNode.SenderRotationNodeId != null) {
                            var sender = angular.copy($scope.currentRotationNode);
                            // copy doc and updoc from sender
                            var sender = angular.copy($scope.rotationNodes.filter((subject) => subject.Id == $scope.currentRotationNode.SenderRotationNodeId)[0]);
                            if (sender.RotationNodeDocs.length > 0) {
                                $scope.docs = sender.RotationNodeDocs;
                                for (i = 0; i < $scope.docs.length; i++) {
                                    $scope.docs[i].FlagAction = 0;
                                }
                                console.log($scope.docs);
                            }
                            if (sender.RotationNodeUpDocs.length > 0)
                                $scope.updocs = sender.RotationNodeUpDocs;
                        }
                    }


                } else {
                    // error response, 404 inbox
                }
                console.log($scope);
                console.log("rotation id is " + $scope.rotationId);
                $('#checkbox1').bootstrapSwitch.defaults.size = 'mini';

            }

            $scope.checkSignOrStamp = function () {
                for (var i = 0; i < $scope.docs.length; i++) {
                    var doc = {};
                    doc.Document = $scope.docs[i].Document;
                    doc.DocumentId = $scope.docs[i].DocumentId;
                    if (($scope.validAction(doc.Document.DocumentUser.FlagPermission, 1) || $scope.validAction(doc.Document.DocumentUser.FlagPermission, 32))) {
                        //passwordtype = 5 ==> there is any document to be signed or stamped
                        $scope.passwordType = 5;
                        $scope.checkUserSignatureData();
                        console.log("password type inside check signature: " + $scope.passwordType);
                        return true;
                    }
                }
                return false;
            }

            function initDocumentValues() {

                var product = @Html.Raw(Json.Encode(Model.obj));
                if (product.Id!=0 ){
                    $scope.model.Id=product.Id;
                    $scope.model.Title=product.Title;
                    $scope.model.Descr=product.Descr;
                    $scope.model.FileName=product.FileName;
                    $scope.model.FileNameOri=product.FileNameOri;
                    $scope.model.ExtFile=product.ExtFile;
                    $scope.model.FileSize=product.FileSize;
                    $scope.model.MaxPrint=product.MaxPrint;
                    $scope.model.MaxDownload=product.MaxDownload;
                    $scope.model.ExpiryDay=product.ExpiryDay;
                    $scope.model.Version=product.Version;
                    $scope.model.AppZone=product.AppZone;
                    $scope.model.UserId=product.UserId;

                    $scope.pdfFileName=product.FileName;

                    $scope.isUpload=1;
                    $scope.fileTypeImage=product.ExtFile+".png";

                    //$scope.users=product.DocumentMembers;

                    $scope.annos=[];
                    for(i=0;i<product.DocumentAnnotates.length;i++){
                        var ix=product.DocumentAnnotates[i];
                        var item={};
                        item.Id=ix.Id;
                        item.SvgId='svg'+i;
                        item.Page=ix.Page;
                        item.AnnotateType=ix.AnnotateTypeId;
                        item.LeftPosition=ix.LeftPosition;
                        item.TopPosition=ix.TopPosition;
                        item.WidthPosition=ix.WidthPosition;
                        item.HeightPosition=ix.HeightPosition;
                        item.Color=ix.Color;
                        item.BackColor=ix.BackColor;
                        item.Data=ix.Data;
                        item.Data2=ix.Data2;
                        item.Rotation=ix.Rotation;
                        item.ScaleX=ix.ScaleX;
                        item.ScaleY=ix.ScaleY;
                        item.TransitionX=ix.TransitionX;
                        item.TransitionY=ix.TransitionY;
                        item.StrokeWidth=ix.StrokeWidth;
                        item.Opacity=ix.Opacity;
                        item.Flag=ix.Flag;
                        item.FlagCode=ix.FlagCode;
                        item.FlagDate=convertJsonDate(ix.FlagDate);
                        item.FlagImage=ix.FlagImage;
                        item.CreatorId=ix.CreatorId;
                        item.ElementId=ix.ElementId;
                        item.Annotate=ix.Annotate;
                        $scope.annos.push(item);
                    }

                }
                //$('#checkbox1').bootstrapSwitch.defaults.size='mini';
            }

            $scope.gotoAddDoc = function () {
                var url=$filter('filter')($scope.dbmenus,{SecondaryKey:'DOCUMENT'})[0].UrlPage.replace('list?','?');
                location.href = url;
            }
            $scope.initData = function () {

            }
            $scope.docAlert = function (text) {
                showInfo("Click on "+text);
            }



            $scope.checkUserSignatureData= function () {
                $http.post('/document/CheckingSignature', { memberId: 0 }).then(function (response) {
                    if (response.data) {
                        if (response.data==-1){
                            showError("Complete your user profiles to continue to sign this document. (KTP, initial, signature, and stamp)");
                            return false;
                        }
                        console.log("Sign document is able do to, add password to do it");
                        return true;
                        
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            }

            $scope.showPasswordModal = function (){
                var val = document.getElementById("thePassword");
                val.value="";
                $scope.thePassword="";
                $("#modal_password").modal("show");
            }
            $scope.setPassword = function (){
                var val = document.getElementById("thePassword");
                var thePassword = val.value;

                console.log(thePassword);
                console.log($scope.model.UserId);
                $http.post('/user/ValidationPassword', { userId: $scope.model.UserId, password: thePassword }).then(function (response) {
                    if (response.data == true) {
                        $scope.passwordcheck = true;
                        $scope.submitActivityProcess(1);
                        return true;
                    } else
                        $scope.passwordcheck = false;
                        console.log("password error");
                        showInfo("Invalid password.");
                        return;
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            }


            $scope.stampDocument = function (idx) {
                $http.post('/document/CheckingPrivateStamp', { memberId: 0 }).then(function (response) {
                    if (response.data) {
                        if (response.data==-1){
                            showError("Check your registration form. Completed your field private stamp image.");
                            return;
                        }

                       $scope.stampDocumentValidation(idx);

                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });

            }

            $scope.stampDocumentValidation = function (idx){
                var val = document.getElementById("thePassword");
                val.value="";
                $scope.docIdx=idx;
                $scope.thePassword="";
                $("#modal_password").modal("show");
            }

            var setAnnos = function(idx){
                var doc=$scope.docs[idx];
                $scope.annos = [];
                for(i=0;i<doc.Document.DocumentElements.length;i++){
                    var ix=doc.Document.DocumentElements[i];
                    //if (ix.IsDeleted) continue;
                    var item={};
                    item.SvgId='svg'+i;
                    item.Page=ix.Page;
                    item.ElementType=(ix.ElementTypeId==undefined?ix.ElementType:ix.ElementTypeId);
                    item.LeftPosition=ix.LeftPosition;
                    item.TopPosition=ix.TopPosition;
                    item.WidthPosition=ix.WidthPosition;
                    item.HeightPosition=ix.HeightPosition;
                    item.Color=ix.Color;
                    item.BackColor=ix.BackColor;
                    item.Data=ix.Data;
                    item.Data2=ix.Data2;
                    item.Rotation=ix.Rotation;
                    item.ScaleX=ix.ScaleX;
                    item.ScaleY=ix.ScaleY;
                    item.TransitionX=ix.TransitionX;
                    item.TransitionY=ix.TransitionY;
                    item.StrokeWidth=ix.StrokeWidth;
                    item.Opacity=ix.Opacity;
                    item.Flag=ix.Flag;
                    item.FlagCode=ix.FlagCode;
                    item.FlagDate = convertJsonDate(ix.FlagDate);
                    item.FlagImage=ix.FlagImage;
                    item.CreatorId=ix.CreatorId;
                    item.ElementId=ix.ElementId;
                    item.Element=ix.Element;
                    item.IsDeleted=ix.IsDeleted;
                    $scope.annos.push(item);
                }
            }
            $scope.viewerDocument = function (idx) {
                var doc=$scope.docs[idx];
                var iframe=document.getElementById('xpdfIFrame');
                iframe.contentWindow.angular.element("#xpdfController").scope().setEmptyPdf();
                console.log(doc)
                $http.post('/document/openfile', { fileName: doc.Document.FileUrl }).then(function (response) {
                    if (response.data) {
                        $scope.openViewerDocument(idx, response.data);
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            }

            $scope.openViewerDocument = function (idx, fileName){
                var doc=$scope.docs[idx];
                doc.FlagAction|=4;
                setAnnos(idx);
                var iframe = document.getElementById('xpdfIFrame');
                if (iframe.contentWindow==null)
                    return;
                if ($scope.annos.length>0)
                    iframe.contentWindow.angular.element("#xpdfController").scope().setAnnoItems($scope.annos);

                iframe.contentWindow.angular.element("#xpdfController").scope().setDefaultPdf(fileName, false);//doc.Document.FileName);
                iframe.contentWindow.angular.element("#xpdfController").scope().setAnnoToolbarVisible(true);
                var flagDownload = 0; //doc.Document.DocumentMember.FlagPermission; nanti harus dikerjain
                iframe.contentWindow.angular.element("#xpdfController").scope().showDownload();
                iframe.contentWindow.angular.element("#xpdfController").scope().showPrint();
                iframe.contentWindow.angular.element("#xpdfController").scope().setDownloadFileName($scope.model.FileNameOri);
                isdefineiframe=true;
                $("#modal_pdf_viewer").modal("show");
                //if (!isdefineiframe){

            }
            $scope.revisiDocument = function (idx) {
                var doc=$scope.docs[idx];
                var iframe=document.getElementById('xpdfIFrame');
                iframe.contentWindow.angular.element("#xpdfController").scope().setEmptyPdf();
                $http.post('/document/openfile', { fileName: doc.Document.FileName }).then(function (response) {
                    if (response.data) {
                        $scope.openRevisiDocument(idx, response.data);
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            }

            $scope.openRevisiDocument = function (idx, fileName){
                var doc=$scope.docs[idx];
                doc.FlagAction|=2;
                setAnnos(idx);
                var iframe=document.getElementById('xpdfIFrame');
                iframe.contentWindow.angular.element("#xpdfController").scope().setDefaultPdf(fileName);//doc.Document.FileName);
                iframe.contentWindow.angular.element("#xpdfController").scope().setAnnoItems($scope.annos);
                iframe.contentWindow.angular.element("#xpdfController").scope().setAnnoToolbarVisible(true);
                var flagDownload=doc.Document.DocumentMember.FlagPermission;
                iframe.contentWindow.angular.element("#xpdfController").scope().showDownload((flagDownload & 16)==16);
                iframe.contentWindow.angular.element("#xpdfController").scope().setDownloadFileName(doc.Document.FileNameOri);
                $("#modal_pdf_viewer").modal("show");
                $('#modal_pdf_viewer').on('hidden.bs.modal',revisiFinished);
                $scope.selectedIdx=idx;
            }
            var revisiFinished = function(e){
                $('#modal_pdf_viewer').off('hidden.bs.modal',revisiFinished);
                var items=document.getElementById("xpdfIFrame").contentWindow.angular.element("#xpdfController").scope().getAnnoItems();
                $scope.docs[$scope.selectedIdx].Document.DocumentAnnotates=items;

                var doc=$scope.docs[$scope.selectedIdx];
                var defPermission=doc.Document.DocumentMember.FlagPermission;
                var newPermission=defPermission;
                if ((defPermission & 1) == 1 )
                    newPermission=defPermission-1;
                if ((defPermission & 32) == 32 )
                    newPermission=defPermission-32;

                for(i=0;i<doc.Document.DocumentAnnotates.length;i++){
                    var anno=doc.Document.DocumentAnnotates[i];

                    if (anno.ElementId==null || anno.ElementId!= $scope.curentUser.Id || anno.IsDeleted)
                        continue;

                    if (anno.AnnotateType==4 || anno.AnnotateType==5)
                        newPermission|=1;
                    else if (anno.AnnotateType==7)
                        newPermission|=32;
                }

                doc.Document.DocumentMember.FlagPermission=newPermission;
                $scope.$apply();

            }

            var isok=false;
            $scope.printDocument = function (idx) {
                var doc=$scope.docs[idx];
                var iframe=document.getElementById('xpdfIFrame');
                iframe.contentWindow.angular.element("#xpdfController").scope().setEmptyPdf();
                $http.post('/document/openfile', { fileName: doc.Document.FileName }).then(function (response) {
                    if (response.data) {
                        $scope.openPrintDocument(idx, response.data);
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            }

            $scope.checkIsFirstPerson = function () {
                return $scope.model.DefWorkflowNodeId == $scope.model.FirstNodeId;
            }

            $scope.checkIsActive = function () {
                return $scope.model.Status == '00';
            }

            $scope.openPrintDocument = function (idx, fileName){
                var doc=$scope.docs[idx];
                doc.FlagAction|=8;
                setAnnos(idx);
                if (!isok){
                    var iframe=document.getElementById('xpdfIFrameView');
                    iframe.contentWindow.angular.element("#xpdfController").scope().setDefaultPdf(fileName);//doc.Document.FileName);
                    iframe.contentWindow.angular.element("#xpdfController").scope().setAnnoItems($scope.annos);
                }
                isok=true;
                //setTimeout(function () {
                var element =$("iframe#xpdfIFrameView").contents()[0].getElementById('viewer');
                var mode = 'specify';
                var pagebreak = (mode === 'specify') ?
                            { mode: '', before: '.before', after: '.after', avoid: '.avoid' } :
                            { mode: mode };

                // Generate the PDF.
                html2pdf().from(element).set({
                    filename: mode + '.pdf',
                    pagebreak: pagebreak,
                    jsPDF: { orientation: 'portrait', unit: 'in', format: 'letter', compressPDF: false }
                }).save();
                //}, 1000);
            }

            $scope.downloadDocument = function (idx){
                var doc=$scope.docs[idx];
                var iframe=document.getElementById('xpdfIFrame');
                iframe.contentWindow.angular.element("#xpdfController").scope().setEmptyPdf();
                $http.post('/document/openfile', { fileName: doc.Document.FileName }).then(function (response) {
                    if (response.data) {
                        $scope.openDownloadDocument(idx, response.data);
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            }

            $scope.openDownloadDocument = function (idx, fileName){
                var doc=$scope.docs[idx];
                doc.FlagAction|=16;
                setAnnos(idx);
                var iframe=document.getElementById('xpdfIFrame');
                iframe.contentWindow.angular.element("#xpdfController").scope().setDefaultPdf(fileName);//doc.Document.FileName);
                iframe.contentWindow.angular.element("#xpdfController").scope().setAnnoItems($scope.annos);
                iframe.contentWindow.angular.element("#xpdfController").scope().setAnnoToolbarVisible(false);
                iframe.contentWindow.angular.element("#xpdfController").scope().showDownload();

                $("#modal_pdf_viewer").modal("show");

            }

            $scope.downloadAttchment = function (atth){
                location.href = "/updownfile/xdownload?ufileName=" + atth.DocumentUpload.FileName+"&isDocument=false";
            }
            $scope.viewDocument = function (arg) {
                var member=arg.Document.DocumentMember;//s.filter((subject) => subject.MemberId == $scope.curentUser.Id)[0];
                if (member == undefined || arg.Document.DocumentMember==null || arg.Document.DocumentMember.FlagPermission<=1){
                    showInfo("You don't have permission to open this file.");
                    return;
                }
                var iframe=document.getElementById('xpdfIFrame');
                if (iframe.contentWindow==null)
                    return;

                var iframe=document.getElementById('xpdfIFrame');
                iframe.contentWindow.angular.element("#xpdfController").scope().setEmptyPdf();
                $http.post('/document/openfile', { fileName: arg.Document.FileName }).then(function (response) {
                    if (response.data) {
                        $scope.openDocument(member, iframe, arg, response.data);
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });

            }
            $scope.openDocument = function (member, iframe, arg, fileName){
                if (arg.Document.DocumentAnnotates.length>0){
                    $scope.annos=[];
                    for(i=0;i<arg.Document.DocumentAnnotates.length;i++){
                        var ix=arg.Document.DocumentAnnotates[i];
                        var item={};
                        item.SvgId='svg'+i;
                        item.Page=ix.Page;
                        item.AnnotateType=ix.AnnotateTypeId;
                        item.LeftPosition=ix.LeftPosition;
                        item.TopPosition=ix.TopPosition;
                        item.WidthPosition=ix.WidthPosition;
                        item.HeightPosition=ix.HeightPosition;
                        item.Color=ix.Color;
                        item.BackColor=ix.BackColor;
                        item.Data=ix.Data;
                        item.Data2=ix.Data2;
                        item.Rotation=ix.Rotation;
                        item.ScaleX=ix.ScaleX;
                        item.ScaleY=ix.ScaleY;
                        item.TransitionX=ix.TransitionX;
                        item.TransitionY=ix.TransitionY;
                        item.StrokeWidth=ix.StrokeWidth;
                        item.Opacity=ix.Opacity;
                        item.Flag=ix.Flag;
                        item.FlagCode=ix.FlagCode;
                        item.FlagDate = convertJsonDate(ix.FlagDate);
                        item.FlagImage=ix.FlagImage;
                        item.CreatorId=ix.CreatorId;
                        item.ElementId=ix.ElementId;
                        item.Annotate=ix.Annotate;
                        $scope.annos.push(item);
                    }
                    iframe.contentWindow.angular.element("#xpdfController").scope().setAnnoItems($scope.annos);
                }
                iframe.contentWindow.angular.element("#xpdfController").scope().setDefaultPdf(fileName);//arg.Document.FileName);
                iframe.contentWindow.angular.element("#xpdfController").scope().setAnnoToolbarVisible(false);
                var flagDownload=member.FlagPermission;
                iframe.contentWindow.angular.element("#xpdfController").scope().showDownload((flagDownload & 16)==16);
                iframe.contentWindow.angular.element("#xpdfController").scope().showPrint((flagDownload & 8)==8);
                iframe.contentWindow.angular.element("#xpdfController").scope().setDownloadFileName(arg.Document.FileNameOri);
                $("#modal_pdf_viewer").modal("show");
            }
            /*--------------------------------------------------------------
            submitActivity
            --------------------------------------------------------------*/
            $scope.submitActivity = function (bit) {
                $scope.checkSignOrStamp();
                var eventString="";
                if (bit == 1)
                    eventString="Submit";
                else if (bit==2)
                    eventString="Reject";
                else if (bit==4)
                    eventString="Revision";
                else if (bit==8)
                    eventString = "Manual Alter";
                
                console.log("password type: " + $scope.passwordType);
                swal({
                    title: "Confirmation",
                    text: "This activity will be "+eventString+", continue?",
                    type: "warning",
                    showCancelButton: true,
                    closeOnConfirm: false,
                    confirmButtonColor: "#2196F3",
                    showLoaderOnConfirm: true,
                    confirmButtonText: "Yes, "+eventString+" it!",
                    cancelButtonText: "No, cancel please!",
                },
                function (isConfirm) {
                    setTimeout(function () {
                        if (isConfirm) {
                            if ($scope.passwordType == 5) {
                                $scope.showPasswordModal();
                            } else {
                                $scope.submitActivityProcess(bit);
                            }
                        }
                        swal.close();
                    }, 500);
                });
            }



            $scope.submitActivityProcess = function (bit) {
                var rotNodeDocs = [];
                for(var i=0; i<$scope.docs.length; i++){
                    var doc = {};
                    doc.Document=$scope.docs[i].Document;

                    doc.DocumentId = $scope.docs[i].DocumentId;
                    if (bit == 1 && $scope.papasswordType == 5 && $scope.validAction(doc.Document.DocumentUser.FlagPermission, 1)) {
                        var doc = $scope.docs[i];
                        doc.FlagAction |= 1;
                    } else {
                        doc.FlagAction = $scope.docs[i].FlagAction;
                    }
                    if (bit == 1 && $scope.papasswordType == 5 && $scope.validAction(doc.Document.DocumentUser.FlagPermission, 32)) {
                        var doc = $scope.docs[i];
                        doc.FlagAction |= 32;
                    } else {
                        doc.FlagAction = $scope.docs[i].FlagAction;
                    }
                    
                    var annos = [];
                    for (x = 0; x < $scope.docs[i].Document.DocumentElements.length; x++){
                        var ix=$scope.docs[i].Document.DocumentElements[x];
                        if (ix.IsDeleted) continue;
                        var item = {};
                        item.id = ix.id;
                        item.Page = ix.Page;
                        item.DocumentId = ix.DocumentId;
                        item.Document = ix.Document;
                        item.ElementTypeId=(ix.ElementTypeId==undefined?ix.ElementType:ix.ElementTypeId);
                        item.LeftPosition=ix.LeftPosition;
                        item.TopPosition=ix.TopPosition;
                        item.WidthPosition=ix.WidthPosition;
                        item.HeightPosition=ix.HeightPosition;
                        item.Color=ix.Color;
                        item.BackColor=ix.BackColor;
                        item.Data=ix.Data;
                        item.Data2=ix.Data2;
                        item.Rotation = ix.Rotation;
                        item.RotationId = ix.RotationId;
                        item.ScaleX=ix.ScaleX;
                        item.ScaleY=ix.ScaleY;
                        item.TransitionX=ix.TransitionX;
                        item.TransitionY=ix.TransitionY;
                        item.StrokeWidth=ix.StrokeWidth;
                        item.Opacity=ix.Opacity;
                        item.Flag=ix.Flag;
                        item.FlagCode=ix.FlagCode;
                        item.FlagDate=ix.FlagDate;
                        item.FlagImage=ix.FlagImage;
                        item.CreatorId=ix.CreatorId;
                        item.ElementId=ix.ElementId;
                        annos.push(item);
                    }
                    doc.Document.DocumentElements = annos;
                    rotNodeDocs.push(doc);
                    console.log(rotNodeDocs);
                }
                var rotNodeUpDocs=[];
                for(i=0;i<$scope.updocs.length;i++){
                    var doc={};
                    doc.DocumentUpload={};
                    doc.DocumentUpload.FileName=$scope.updocs[i].DocumentUpload.FileName;
                    doc.DocumentUpload.FileNameOri=$scope.updocs[i].DocumentUpload.FileNameOri;
                    doc.DocumentUpload.ExtFile=$scope.updocs[i].DocumentUpload.ExtFile;
                    doc.DocumentUpload.FileSize=$scope.updocs[i].DocumentUpload.FileSize;
                    rotNodeUpDocs.push(doc);
                }
                console.log(rotNodeDocs);
                var btn = Ladda.create(document.querySelector('.btn-submit'));
                btn.start();
                $http.post('@Url.Action("ProcessActivity", "Rotation")',
                    {
                        param:{
                            RotationNodeId: $scope.model.RotationNodeId,
                            Remark:$scope.model.Remark,
                            Value:$scope.model.Value,
                            RotationNodeDocs:rotNodeDocs,
                            RotationNodeUpDocs:rotNodeUpDocs,
                        },
                        bit: bit,
                    }).then(function (response) {
                        btn.stop();
                        if (response.data) {
                            if (response.data==-1){
                                showInfo("Transfer cannot be processed, balance insufficient of the sender. Please contact the sender");
                                return;
                            }
                            $scope.wizarno = 'success';
                        }
                    }, function (response) {
                        btn.stop();
                        showInfo("An error has occurred, please try submitting again.");
                        var x = 0;
                    });
            }

            $scope.processActivity = function (bit) {
                //var iframe=document.getElementById('xpdfIFrame');
                //var iframeView=document.getElementById('xpdfIFrameView');
                //var data=iframe.contentWindow.angular.element("#xpdfController").scope().getBase64Pdf();
                //iframeView.src=data;
                //return;

                if (!$scope.isValidForm($scope.myForm)){
                    showInfo("There is a problem, please press submit again.");
                    return;
                }

                //if ($scope.model.Status!='00') {
                //    showInfo("The inbox has expired to be processed");
                //    return;
                //}

                if ($scope.model.Value==undefined && $scope.model.DecissionInfo!='') {
                    showInfo("Required value for decission");
                    return;
                }

                $scope.submitActivity(bit);
            }

            $scope.isValidForm = function (theForm) {
                var isvalid = theForm.$valid;
                return isvalid;
            };

            $scope.scrollingPage = function (id) {
                $('html, body').animate({
                    scrollTop: $(id).offset().top
                }, 200);
            }

            $scope.validAction = function (val, ...bits) {
                var ret=false;
                for(i=0; i<bits.length; i++){
                    if ((val & bits[i])==bits[i]){
                        ret=true;
                        break;
                    }
                }
                return ret;
            }
            //$scope.validActionx = function (val, bit) {
            //    return ((val & bit)==bit);
            //}

            $scope.finishLoading = function() {
                $scope.loadingLog=0;
            }
            $scope.showIdentityImage = function(member) {
                $scope.identities=[];
                //if (member.ImageProfile!=null) {
                //    $scope.identities.push({Title:'Profile', Image:member.ImageProfile});
                //}
                if (member.ImageKtp1!=null) {
                    $scope.identities.push({Title:'KTP 1', Image:member.ImageKtp1});
                }
                if (member.ImageKtp2!=null){
                    $scope.identities.push({Title:'KTP 2', Image:member.ImageKtp2});
                }
                //if (member.ImageSignature!=null){
                //    $scope.identities.push({Title:'Signature', Image:member.ImageSignature});
                //}
                //if (member.ImageInitials!=null){
                //    $scope.identities.push({Title:'Initial', Image:member.ImageInitials});
                //}
                //if (member.ImageStamp!=null){
                //    $scope.identities.push({Title:'Private Stamp', Image:member.ImageStamp});
                //}
                if ($scope.identities.length==0){
                    showInfo("No ID image found");
                    return;
                }
                $("#modal_identity_image").modal("show");
            }

            /*--------------------------------------------------------------
                POPUP DOC
            --------------------------------------------------------------*/
            $scope.documentIdx=-1;
            $scope.editDocument = function (idx) {
                $('#kriteria').val("");
                $scope.documentIdx=idx;
                $scope.documents = [];
                $("#modal_select_document").modal("show");
            }

            $scope.popupDocument = function () {
                $('#kriteria').val("");
                $scope.documentIdx=-1;
                $scope.documents = [];
                $("#modal_select_document").modal("show");
            }
            $scope.setDocument = function (idx) {
                if ($scope.docs.length>0){
                    for(i=0;i<$scope.docs.length;i++){
                        if ($scope.docs[i].DocumentId==$scope.documents[idx].Id)
                            return;
                    }
                }

                //var dxid=0;
                //var docidx=0;
                if ($scope.documentIdx==-1){
                    var doc={};
                    doc.Document={};
                    doc.DocumentId=$scope.documents[idx].Id;
                    doc.FlagAction=0;
                    doc.Document.Title=$scope.documents[idx].Title;
                    doc.Document.FileNameOri=$scope.documents[idx].FileNameOri;
                    doc.Document.FileName="Loading...";//$scope.documents[idx].FileName;
                    doc.Document.ExtFile=$scope.documents[idx].ExtFile;
                    //doc.Document.DocumentMember=$scope.documents[idx].DocumentMembers.filter((subject) => subject.MemberId == $scope.model.MemberId)[0];
                    $scope.docs.push(doc);
                    $scope.getDocument($scope.docs.length-1, $scope.model.RotationNodeId, doc.DocumentId);
                    //dxid=doc.DocumentId;
                    //docidx=$scope.docs.length-1;
                }else{
                    $scope.docs[$scope.documentIdx].DocumentId=$scope.documents[idx].Id;
                    $scope.docs[$scope.documentIdx].FlagAction=0;
                    $scope.docs[$scope.documentIdx].Document.Title=$scope.documents[idx].Title;
                    $scope.docs[$scope.documentIdx].Document.FileNameOri=$scope.documents[idx].FileNameOri;
                    $scope.docs[$scope.documentIdx].Document.FileName="Loading...";//$scope.documents[idx].FileName;
                    $scope.docs[$scope.documentIdx].Document.ExtFile=$scope.documents[idx].ExtFile;
                    //$scope.docs[$scope.documentIdx].Document.DocumentMember=$scope.documents[idx].DocumentMembers.filter((subject) => subject.MemberId == $scope.model.MemberId)[0];
                    $scope.getDocument($scope.documentIdx, $scope.model.RotationNodeId, $scope.documents[idx].Id);
                    //dxid=$scope.documents[idx].Id;
                    //docidx=$scope.documentIdx;
                }

                @*$http.post('@Url.Action("getpermission", "document")',
                   {
                        rotationNodeId:$scope.model.RotationNodeId,
                        documentId:dxid,
                   }).then(function (response) {
                       if (response.data) {
                           $scope.docs[docidx].Document.DocumentMember.FlagPermission=response.data;
                       }
                   }, function (response) {
                       var x = 0;
                   });*@


            }

            $scope.removeDocument = function (idx) {
                $scope.docs.splice(idx,1);
            }

            $scope.removeUpDocument = function (idx) {
                $scope.updocs.splice(idx,1);
            }

            $scope.getLiteDocuments = function (kriteria, page, row) {
                $scope.documents = [];
                $http.post('/Document/GetLiteAll3', { topCriteria: kriteria, page: page, pageSize: row }).then(function (response) {
                    if (response.data) {
                        $scope.documents = response.data;

                        $scope.index = row * (page - 1);

                        $scope.paging = [];
                        $scope.getDocumentCount(kriteria);

                        $scope.isView = true;
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            }

            $scope.changePageDocument = function (kriteria, page, row) {
                $scope.documents = [];
                $http.post('/Document/GetLiteAll3', { topCriteria: kriteria, page: page, pageSize: row }).then(function (response) {
                    if (response.data) {
                        $scope.documents = response.data;
                        $scope.index = row * (page - 1);
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            }

            $scope.getDocumentCount = function (kriteria) {
                $http.post('/Document/GetLiteAllCount3', { topCriteria: kriteria }).then(function (response) {
                    if (response.data) {

                        var jumlahData = response.data;
                        var jumlahPage = Math.ceil(jumlahData / $scope.row);
                        for (var i = 1; i <= jumlahPage; i++) {
                            $scope.paging.push({ value: i, text: i });
                        }

                        $scope.page = "1";

                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            }

            //$scope.getDocumentById = function (idx, id) {
            //    $http.post('/Document/GetDocument', { id:id }).then(function (response) {
            //        if (response.data) {
            //            $scope.docs[idx].Document.FileName=response.data.FileName;
            //            $scope.docs[idx].Document.DocumentAnnotates=response.data.DocumentAnnotates;
            //        }
            //    }, function (response) {
            //        //error handle\
            //        var x = 0;
            //    });
            //}

            $scope.getDocument = function (idx, rotationNodeId, documentId) {
                $http.post('/Document/GetDocument', { rotationNodeId:rotationNodeId, documentId:documentId }).then(function (response) {
                    if (response.data) {
                        $scope.docs[idx].Document.FileName=response.data.FileName;
                        $scope.docs[idx].Document.DocumentAnnotates=response.data.DocumentAnnotates;
                        $scope.docs[idx].Document.DocumentMember=response.data.DocumentMember;
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            }

            /*--------------------------------------------------------------
                END POPUP DOC
            --------------------------------------------------------------*/

            /*--------------------------------------------------------------
            UPLOAD FILE
            --------------------------------------------------------------*/
            $scope.humanFileSize = function (bytes, si) {
                var thresh = si ? 1000 : 1024;
                if(Math.abs(bytes) < thresh) {
                    return bytes + ' B';
                }
                var units = si
                    ? ['kB','MB','GB','TB','PB','EB','ZB','YB']
                    : ['KiB','MiB','GiB','TiB','PiB','EiB','ZiB','YiB'];
                var u = -1;
                do {
                    bytes /= thresh;
                    ++u;
                } while(Math.abs(bytes) >= thresh && u < units.length - 1);
                return bytes.toFixed(1)+' '+units[u];
            }

            $scope.getStatusName = function (status) {
                switch (status) {
                    case 0:
                        return "Open";
                        break;
                    case 1:
                        return "In Progress";
                        break;
                    case 2:
                        return "Pending";
                        break;
                    case 3:
                        return "Signed";
                        break;
                    case 5:
                        return "Revision";
                        break;
                    case 6:
                        return "Altered";
                        break;
                    case 90:
                        return "Completed";
                        break;
                    case 98:
                        return "Declined";
                        break;
                    case 99:
                        return "Canceled";
                        break;
                    case 10:
                        return "Waiting_For_Response";
                        break;
                    case 11:
                        return "Accepted";
                        break;
                    case 97:
                        return "Expired";
                        break;

                }
            }

            $scope.uploadDocFile = function (idx, file, errFiles) {
                $scope.finit = $scope.f;
                $scope.f = file;
                $scope.errFile = errFiles && errFiles[0];
                if (file) {
                    $scope.docFileName = file.name;
                    $scope.model.FileUrl = file.name;
                    $scope.model.FileSize = $scope.humanFileSize(file.size, true);
                    //var obUrl = URL.createObjectURL(file);
                    //document.getElementById('audio').setAttribute('src', obUrl);

                    file.upload = Upload.upload({
                        url: '/updownfile/xuploadastemporary?idx='+idx+'&fileType=0&companyId='+$scope.companyId,
                        data: { FileUploaded: file }
                    });

                    file.upload.then(function (response) {
                        //$timeout(function () {
                        file.result = response.data;
                        if (file.result.idx==-2){
                            show +
                                Info("Invalid plan Used.");
                            $scope.resetFileUploadDetails();
                            $scope.progressValueUploadFile = "Failed";
                            return;
                        }else if (file.result.idx==-4){
                            showInfo("Document quota is insufficient.");
                            $scope.resetFileUploadDetails();
                            $scope.progressValueUploadFile = "Failed";
                            return;
                        } else {
                            if (file.result) {
                                $scope.model.FileName= file.result.filename;
                                $scope.model.ExtFile = file.result.fileext;
                                $scope.model.FileNameOri = file.result.filenameori;
                                $scope.fileTypeImage=$scope.model.ExtFile+".png";
                                $scope.progressValueUploadFile="Upload success";
                                isdefineiframe = false;
                                var doc = {};
                                doc.Document = {};
                                doc.Document.FileName = file.result.filename;
                                doc.FlagAction = $scope.model.FlagAction;
                                doc.Document.FileNameOri=file.result.filenameori;
                                doc.Document.ExtFile=file.result.fileext;
                                $scope.tempDoc = doc;
                                $scope.isUpload = 1;
                                document.querySelector('.submit-document').disabled = false;
                            }
                        }
                        //});
                    }, function (response) {
                        if (response.status > 0){
                            showError("Error upload file : "+response.statusText);
                        }
                    }, function (evt) {
                        file.progress = Math.min(100, parseInt(100.0 * evt.loaded / evt.total));
                            if (file.progress >= 100) {
                                $scope.progressValueUploadFile = "Upload success";
                                ////$scope.podcastImage="podcast_uploaded.png";
                                isdefineiframe = false;
                            } else {
                                $scope.progressValueUploadFile = "Uploading...(" + file.progress + "%)";
                            }
                    });
                } else if ($scope.errFile != null) {
                    showError("Error upload file : " + $scope.errFile.$error + " (" + $scope.errFile.$errorParam + ")");
                }
            }

            $scope.updateProduct = function () {
                if ($scope.isUpload==0) {
                    showInfo("document must be uploaded");
                    return;
                }

                if (!$scope.isValidForm($scope.myForm))
                    return;

                var tmpAnnos=angular.copy($scope.annos);
                $scope.annos=[];
                for(i=0;i<tmpAnnos.length;i++){
                    var ix=tmpAnnos[i];
                    if (ix.IsDeleted) continue;
                    var item={};
                    item.Id=ix.Id;
                    item.Page=ix.Page;
                    item.ElementTypeId=ix.ElementType;
                    item.LeftPosition=ix.LeftPosition;
                    item.TopPosition=ix.TopPosition;
                    item.WidthPosition=ix.WidthPosition;
                    item.HeightPosition=ix.HeightPosition;
                    item.Color=ix.Color;
                    item.BackColor=ix.BackColor;
                    item.Data=ix.Data;
                    item.Data2=ix.Data2;
                    item.Rotation=ix.Rotation;
                    item.ScaleX=ix.ScaleX;
                    item.ScaleY=ix.ScaleY;
                    item.TransitionX=ix.TransitionX;
                    item.TransitionY=ix.TransitionY;
                    item.StrokeWidth=ix.StrokeWidth;
                    item.Opacity=ix.Opacity;
                    item.Flag=ix.Flag;
                    item.FlagCode=ix.FlagCode;
                    item.FlagDate = ix.FlagDate;
                    item.FlagImage = ix.FlagImage;
                    item.CreatorId=ix.CreatorId;
                    item.ElementId=ix.ElementId;
                    $scope.annos.push(item);
                }
                console.log("PRINT INI SEBELUM SAVE");
                console.log($scope.annos);
                $scope.saveProduct();
            }

            $scope.isValidForm = function (theForm) {
                var isvalid = theForm.$valid;
                return isvalid;
            };
            $scope.resetFileUploadDetails = function () {
                $scope.f = $scope.finit;
                $scope.docFileName = "";
                $scope.model.FileUrl = "";
                $scope.model.FileSize = "";
                $scope.model.FileName = "";
                $scope.model.ExtFile = "";
                $scope.model.FileNameOri = "";
                $scope.fileTypeImage = "no_document.png";
                $scope.progressValueUploadFile = "";
                var doc = {};
                $scope.tempDoc = doc;
                $scope.isUpload = 0;
                document.querySelector('.submit-document').disabled = true;
            }

            $scope.saveProduct = function () {
                var btn = Ladda.create(document.querySelector('.submit-document'));
                btn.start();
                console.log("TRY TO SAVE DOCUMENT");
                $http.post('@Url.Action("Save", "document")',
                    {
                        prod: {
                            Id: $scope.model.Id,
                            Title: $scope.model.Title,
                            Description: $scope.model.Descr,
                            FileUrl: $scope.model.FileName,
                            FileName: $scope.model.FileNameOri,
                            ExtFile: $scope.model.ExtFile,
                            FileSize: $scope.model.FileSize,
                            MaxPrintPerActivity: $scope.model.MaxPrint,
                            MaxDownloadPerActivity: $scope.model.MaxDownload,
                            ExpiryDay: $scope.model.ExpiryDay,
                            Version: $scope.model.Version,
                            DocumentElements: $scope.annos,
                            /*UserId: 'SYST',*/
                            //DocumentMembers:$scope.users,
                        }, companyId: $scope.companyId,
                        rotationId: $scope.rotationId
                    }).then(function (response) {
                        btn.stop();
                        if (response.data) {
                            response.data.ExtFile = $scope.tempDoc.Document.ExtFile;
                            $scope.tempDoc.Document = response.data;
                            $scope.tempDoc.DocumentId = response.data.Id;
                            $scope.docs.push($scope.tempDoc);
                            $scope.resetFileUploadDetails();
                            $("#modal_select_document").modal('hide');
                            showInfo("Success store document");
                            console.log($scope.docs);
                        }
                    }, function (response) {
                        //error handle\
                        btn.stop();
                        showInfo("An error has occurred, please try submitting again.");
                    });
            }

            /*--------------------------------------------------------------
               POPUP ANNOTATION
           --------------------------------------------------------------*/
            var isdefineiframe=false;
            $scope.annoDocument = function () {
                var iframe = document.getElementById('xpdfIFrame');
                $("#modal_select_document").modal("hide");

                iframe.contentWindow.angular.element("#xpdfController").scope().setEmptyPdf();
                $http.post('/document/openfile', { fileName: $scope.model.FileName }).then(function (response) {
                    if (response.data) {
                        $scope.openDocument(response.data, true);
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });                
            }

            $scope.openDocument = function (fileName, isNew){
                //if (!isdefineiframe){
                var iframe=document.getElementById('xpdfIFrame');
                if (iframe.contentWindow==null)
                    return;

                if ($scope.annos.length>0)
                    iframe.contentWindow.angular.element("#xpdfController").scope().setAnnoItems($scope.annos);

                iframe.contentWindow.angular.element("#xpdfController").scope().setDefaultPdf(fileName, isNew);//$scope.model.FileName);
                iframe.contentWindow.angular.element("#xpdfController").scope().showDownload();
                iframe.contentWindow.angular.element("#xpdfController").scope().showPrint();
                iframe.contentWindow.angular.element("#xpdfController").scope().setDownloadFileName($scope.model.FileNameOri);
                isdefineiframe=true;
                //}
                $("#modal_pdf_viewer").modal("show");
                $('#modal_pdf_viewer').on('hidden.bs.modal', revisiFinished);
            }

            var revisiFinished = function(e){
                $('#modal_pdf_viewer').off('hidden.bs.modal', revisiFinished);
                var items=document.getElementById("xpdfIFrame").contentWindow.angular.element("#xpdfController").scope().getAnnoItems();
                $scope.annos = items;
            }


            /*--------------------------------------------------------------
                POPUP MEMBER
            --------------------------------------------------------------*/
            $scope.memberIdx=-1;
            $scope.editMember = function (idx) {
                $scope.memberIdx=idx;
                $scope.members = [];
                $scope.page = "1";
                $scope.kriteria = "";
                $("#modal_select_member").modal("show");
            }
             $scope.SetItemClass = function (status) {
                    if (status == 98 || status == 99 || status == 97 ) {
                        return "danger";
                    } else if (status == 5) {
                        return "warning";
                    } else if ( status == 1 || status == 2) {
                        return "default";
                    } 
                    return "info";
                    
            }
            $scope.findMembers = function (kriteria, page, row) {
                $scope.page = 1;
                $scope.members = [];
                $http.post('/Member/FindMembers', { topCriteria: kriteria, page: page, pageSize: row }).then(function (response) {
                    if (response.data) {
                        $scope.members = response.data;
                        $scope.index = row * (page - 1);
                        $scope.findMembersCountAll(kriteria);
                        $scope.isView = true;
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            }
            $scope.findMembersCountAll = function (kriteria) {
                $scope.paging = [];
                $http.post('/Member/FindMembersCountAll', { topCriteria: kriteria }).then(function (response) {
                    if (response.data) {
                        var jumlahData = response.data;
                        var jumlahPage = Math.ceil(jumlahData / $scope.row);
                        for (var i = 1; i <= jumlahPage; i++) {
                            $scope.paging.push({ value: i, text: i });
                        }
                        $scope.page = "1";
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            }
            $scope.changePageMember = function (kriteria, page, row) {
                $scope.products = [];
                $http.post('/Member/FindMembers', { topCriteria: kriteria, page: page, pageSize: row }).then(function (response) {
                    if (response.data) {
                        $scope.members = response.data;
                        $scope.index = row * (page - 1);
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            }

            $scope.setMember = function (idx) {
                $scope.users[$scope.memberIdx].UserId=$scope.members[idx].Id;
                $scope.users[$scope.memberIdx].Name=$scope.members[idx].Name;
                $scope.users[$scope.memberIdx].Email=$scope.members[idx].Email;
                $scope.users[$scope.memberIdx].Picture = $scope.members[idx].ImageProfile;
                $scope.users[$scope.memberIdx].EncryptedId = $scope.members[idx].EncryptedId;
            }
            $scope.removeMember = function (idx) {
                $scope.users.splice(idx,1);
            }
            $scope.popupMember = function () {
                $scope.memberIdx=-1;
                $scope.members = [];
            }
            /*--------------------------------------------------------------
                END POPUP MEMBER
            --------------------------------------------------------------*/


            /*--------------------------------------------------------------
            CONVERT JSON DATE
            --------------------------------------------------------------*/
            $scope.convertJsonDate = function (val) {
                if (val == undefined)
                    return null;
                if (val instanceof Date)
                    return val;
                return new Date(parseInt(val.substr(6)));
            }
            function convertJsonDate(val) {
                if (val == undefined)
                    return null;
                if (val instanceof Date)
                    return val;
                return new Date(parseInt(val.substr(6)));
            }

        });


        $(function () {
        });


        $(document).ready(function () {
            $('#checkbox1').bootstrapSwitch();
            $('#action-panel').show();

        })

    </script>

</body>