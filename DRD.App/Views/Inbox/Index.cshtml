@using DRD.Models.View;
@model Layout

@{
    ViewBag.Title = "Inbox Detail";
    ViewBag.Submenu = "INBOX";
}

@section Scripts
{
    <script src="/assets/js/pages/components_buttons.js" type="text/javascript"></script>

    <script src="/assets/vendors/file-upload/ng-file-upload-shim.min.js"></script> <!-- for no html5 browsers support -->
    <script src="/assets/vendors/file-upload/ng-file-upload.min.js"></script>
    <script src="/assets/vendors/ng_only_number.js"></script>

    <link href="/assets/vendors/bootstrap-switch/bootstrap3/bootstrap-switch.css" rel="stylesheet" type="text/css" />
    <script src="/assets/vendors/bootstrap-switch/bootstrap-switch.js"></script>

    <script type="text/javascript" src="/assets/js/plugins/forms/styling/uniform.min.js"></script>
    <script type="text/javascript" src="/assets/js/plugins/forms/styling/switchery.min.js"></script>
    <script type="text/javascript" src="/assets/js/plugins/forms/styling/switch.min.js"></script>

    <script src="/html2pdf-master/dist/html2pdf.bundle.js"></script>
    <script src="/assets/vendors/angular-1.5.5/angular-sanitize.min.js"></script>

}
@section Styles{
    <link href="/assets/css/pages/inbox.css" rel="stylesheet" type="text/css">
}

<body>
    <h4>
        <a class="btn" href="/inbox/list" style="border-radius:15px;text-align:center;padding:5px;margin-left:20px;font-weight:800;background-color:#5D90AE;color:white;"><i class="icon-envelope"></i></a> @ViewBag.Title
    </h4>
    <!-- Page container -->
    <div class="page-container" ng-controller="drdController">
        <div>
            <div class="col-md-12">

            </div>
        </div>
        <!-- Content area -->
        <div class="content">
            <!-- Basic layout-->
            <div class="panel panel-flat container-fluid">

                <div ng-show="wizarno=='success'" style="height:50px;margin-top:10px" class="alert alert-success alert-styled-left">
                    Data successfully saved.
                </div>

                <div style="padding-left:20px; padding-right:20px">
                    <h4 style="margin-bottom:0px;margin-top:20px">Rotation : {{model.Name}}</h4>
                    {{currentRotationNode.WorkflowNode.Caption}}
                    <div ng-show="model.Tags.length>0" style="margin-top:5px">
                    
                    </div>
                    <hr>
                </div>

                <!--MEMBER DATA-->

                <form name="myForm" class="form-horizontal" autocomplete="off">
                    <div class="row" style="padding-left:40px; padding-right:40px">
                        <div class="col-md-12">
                            <button ng-show="checkIsActive()" type="button" data-target="#rot-log" data-toggle="collapse" role="button" aria-expanded="false" aria-controls="rot-log" class="btn" style="color:white; background-color:#818181">
                                Activity Log
                            </button>
                            <button ng-show="checkIsActive() && sumDocuments.length>0" type="button" data-target="#doc-sum" data-toggle="collapse" role="button" aria-expanded="false" aria-controls="doc-sum" class="btn" style="color:white; background-color:#818181">
                                Document Summary
                            </button>
                            <div class="{{checkIsActive()?'collapse':'collapse show'}}" id="rot-log">
                                <div ng-show="loadingLog==1">
                                    <i class="icon-spinner2 spinner"></i>
                                    <span>Loading log...</span>
                                </div>
                                <ng-include src="'/Include/RotationLog'" onload="finishLoading()"></ng-include>
                            </div>
                            <div class="{{checkIsActive()?'collapse':'collapse show'}}" id="doc-sum">
                                <ng-include src="'/Include/DocumentSummary'" onload="finishLoading()"></ng-include>
                            </div>

                        </div>

                        <hr />
                        <div class="row" ng-show="!isCompleteRotation() && checkIsActive()">
                            <div class="col-md-12">
                                <h3>Document</h3>
                            </div>
                            <button class="btn btn-flat" ng-show="checkIsFirstPerson() && checkIsActive()" style="margin-left:10px;background-color:#075685; color:white; width:100px;height:50px" data-toggle="tooltip" title="upload a document" ng-click="popupDocument()">
                                <i class="icon-plus2"></i> Add
                            </button>
                        </div>
                        <div class="row" ng-show="!isCompleteRotation() && checkIsActive()">
                            <div style="border:groove grey;border-width:thin; min-height:66px; margin-top:10px" class="col-lg-12">
                                <div style="height:5px"></div>
                                <table class="table-xs table-hover datatable-highlight" style="font-size:small;width:100%">
                                    <tbody>
                                        <tr ng-show="docs.length==0"><td style="text-align:center"> You need to upload a pdf document</td></tr>
                                        <tr style="vertical-align:central; cursor:pointer;" ng-repeat="x in docs" ng-show="!validAction(x.ActionStatus, 64)">
                                            <td style="max-width:90%" ng-click="viewDocument($index)" class="text-top">
                                                <img ng-src="/Images/FileType/{{x.Document.Extension}}.png" width="50" />
                                                {{x.Document.FileName}}
                                            </td>
                                            <td style="height:50px;width:20%" class="text-top">
                                                <button ng-show="checkIsFirstPerson()" class="btn pull-right" style="margin:5px;background-color: maroon;border: none;color: white;width:100px;padding: 10px 12px;cursor: pointer;" data-toggle="tootltip" title="remove document" ng-click="removeDocument($index);">remove</button>
                                                <button ng-show="checkIsFirstPerson()" class="btn pull-right" style="margin:5px; color:black;background-color: #AFC9D8;border: none;color: white;width:100px;padding: 10px 12px;cursor: pointer;" data-toggle="tootltip" title="Set up the initial and signature" ng-click="revisedDocument($index);">Set Up</button>
                                                <button ng-show="!checkIsFirstPerson()" class="btn pull-right" style="color:black;background-color: #AFC9D8;border: none;color: white;width:100px;padding: 10px 12px;cursor: pointer; margin:5px; " data-toggle="tootltip" title="give scracth or note to be revised by the uploader" ng-click="revisedDocument($index);">{{(validAction(x.ActionStatus, 2)?'Revised':'Revision')}}</button>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <hr />
                        <br />
                        <div class="col-md-12" style="display:none" id="action-panel" ng-show="!isCompleteRotation()">
                            <div class="text-center">
                                <button style="width:100px;height:50px" type="button" ng-show="!checkIsFirstPerson() && checkIsActive()" class="btn bg-brown btn-ladda btn-submit" ng-disabled="btnDisabled" data-spinner-color="#333" data-style="zoom-in" ng-click="processActivity(4)"><span class="ladda-label">Revision</span></button>
                                <button style="width:100px;height:50px" type="button" ng-show="!checkIsFirstPerson() && checkIsActive() && (!validAction(model.ActionStatus, 2))" ng-disabled="btnDisabled" class="btn btn-danger btn-ladda btn-submit" data-spinner-color="#333" data-style="zoom-in" ng-click="processActivity(2)"><span class="ladda-label">Reject</span></button>
                                <button style="width:100px;height:50px" type="button" ng-show="validAction(model.ActionStatus, 8) && checkIsActive() && ((!validAction(model.ActionStatus, 2)) || checkIsFirstPerson())" data-spinner-color="#333" class="btn bg-info btn-ladda btn-submit" data-style="zoom-in" ng-click="processActivity(8)"><span class="ladda-label">Alter</span></button>
                                <button style="width:100px;height:50px" type="button" ng-show="checkIsActive() && ((!validAction(model.ActionStatus, 2)) || checkIsFirstPerson())" ng-disabled="btnDisabled" class="btn bg-grey-800 btn-ladda btn-submit" data-spinner-color="#333" data-style="zoom-in" ng-click="processActivity(1)"><span class="ladda-label">Submit</span></button>
                            </div>
                        </div>
                    </div>
                </form>

                <!-- View member modal -->
                <ng-include src="'/Include/PopupDocument'"></ng-include>
                <ng-include src="'/Include/PopupPassword'"></ng-include>
                <ng-include src="'/Include/PopupIdentityImage'"></ng-include>
                <ng-include src="'/Include/PdfIViewer'" onload="finishLoading()"></ng-include>
                <!--CONFIRMATION THANK YOU-->
            </div>

            <!-- /basic layout -->
        </div>
        <!-- /vertical form options -->

    </div>
    <!-- /Page container -->

    <script type="text/javascript">
        var myApp = angular.module('drdApp', ['ngAnimate', 'ui.bootstrap', 'ngFileUpload', 'ngOnlyNumberApp', ]);

        myApp.directive('onFinishRender', function ($timeout) {
            return {
                restrict: 'A',
                link: function (scope, element, attr) {
                    if (scope.$last === true) {
                        $timeout(function () {
                            scope.$emit('ngRepeatBindRoutesFinished');
                        });
                    }
                }
            };
        });

        myApp.controller("drdController", function ($scope, Upload, $location, $http, $filter) {
            // modal document
            $scope.fromSelectDoc = false;
            $scope.companyId = 0;
            $scope.document = {};
            $scope.documents = [];
            $scope.documentCount = [];
            // modal workflow
            $scope.workflow = {};
            $scope.workflows = [];
            $scope.workflowCount = [];

            $scope.paging = [];
            $scope.criteria = "";
            $scope.page = 1;
            $scope.row = 20;
            $scope.currPage = 0;
            $scope.index = 0;

            $scope.model = {};
            $scope.wizarno = 'product';
            $scope.master = {};
            $scope.model.IsActive = true;
            $scope.model.accessType = 0;
            $scope.model.DocumentActionPermissionType = 0;
            $scope.model.Image = "no_picture.png";
            $scope.docFileName = "";
            $scope.fileTypeImage = "no_document.png";
            $scope.model.Id = 0;
            $scope.rotationId = 0;
            $scope.model.Status = 0;
            $scope.isUpload = 0;
            $scope.infoSuccess = "Data berhasil disimpan.";

            $scope.currentRotationNode = {};
            $scope.tempDoc = {};
            $scope.docs = [];
            $scope.updocs = [];
            $scope.annos = [];
            $scope.loadingLog = 1;
            $scope.selectedIdx;
            $scope.curentUser;
            // 1 need sign, 32 need stamp
            $scope.needPassword = 0;
            $scope.passwordcheck = false;
            $scope.passwordError = false;
            $scope.isRevising = false;
            $scope.isUploading = false;
            $scope.docIdx = 0;
            $scope.btnDisabled = true;
            $scope.identities = [];
            initValues();
            $(".control-warning").uniform({
                radioClass: 'choice',
                wrapperClass: 'border-warning-600 text-warning-800'
            });

            $scope.$on('ngRepeatBindRoutesFinished', function (ngRepeatFinishedEvent) { });
            /*--------------------------------------------------------------
            INIT DATA
            --------------------------------------------------------------*/
            angular.element(document).ready(function () {
                $scope.thePassword = "";
                $(".content-wrapper").show();
            });

            function initValues() {
                $scope.curentUser = @Html.Raw(Json.Encode(Model.User));
                $scope.inboxId = @Html.Raw(Json.Encode(Model.DataId));
                var product = @Html.Raw(Json.Encode(Model.Object));
                assignProdut(product);
            }

            function assignProdut(product) {
                if (product.id != 0) {
                    // reset item first
                    $scope.model = {};
                    $scope.sumDocuments = [];
                    $scope.rotationNodes = [];
                    $scope.currentRotationNode = {};
                    $scope.docs = [];
                    $scope.workflow = {};

                    $scope.model.Id = $scope.inboxId;

                    $scope.rotationId = product.Id;
                    $scope.model.Name = product.Name;
                    $scope.model.Status = product.Status;
                    $scope.model.RotationStatus = product.RotationStatus;
                    $scope.companyId = product.CompanyId;
                    $scope.model.FirstNodeId = product.FirstNodeId;
                    $scope.model.RotationNodeId = product.RotationNodeId;
                    $scope.model.WorkflowId = product.WorkflowId;
                    $scope.model.UserId = product.UserId;
                    $scope.model.ActionStatus = product.ActionStatus;
                    $scope.model.SubscriptionType = product.SubscriptionType;
                    $scope.model.accessType = product.AccessType;
                    $scope.model.DocumentActionPermissionType = product.DocumentActionPermissionType;
                    $scope.sumDocuments = product.SumRotationNodeDocs;
                    $scope.rotationNodes = product.RotationNodes;
                    $scope.currentRotationNode = product.RotationNodes.filter((subject) => subject.Id == product.RotationNodeId)[0];
                    $scope.model.Tags = product.Tags;
                    
                    $scope.model.CurrentActivity = product.CurrentActivity;
                    $scope.workflow = product.Workflow;
                    if ($scope.model.Status == 0) {
                        if ($scope.currentRotationNode.SenderRotationNodeId != null) {
                            $scope.btnDisabled = false;
                            // copy doc and updoc from sender
                            var sender = angular.copy($scope.rotationNodes.filter((subject) => subject.Id == $scope.currentRotationNode.SenderRotationNodeId)[0]);
                            if (sender.RotationNodeDocs.length > 0) {
                                var tempDocs = sender.RotationNodeDocs;
                                for (i = 0; i < tempDocs.length; i++) {
                                    if ((tempDocs[i].ActionStatus & 64) != 64) {
                                        tempDocs[i].ActionStatus = 0;
                                        $scope.docs.push(tempDocs[i]);
                                    }
                                }
                            }
                        }
                    }
                } else {
                    // error response, 404 inbox
                }
            }
            $scope.initData = function () { };
            /*--------------------------------------------------------------
                DOCUMENT VIEW FUNCTION FOR SUMMARY DOCUMENT
            --------------------------------------------------------------*/
            $scope.viewDocumentSummary = function (arg) {
                if (arg.Document.DocumentUser == undefined) {
                    showInfo("You don't have any permission in this file.");
                    return;
                }
                if (arg.Document.DocumentUser == null) {
                    showInfo("You don't have any permission in this file.");
                    return;
                }
                var iframe = document.getElementById('xpdfIFrame');
                if (iframe.contentWindow == null)
                    return;

                var iframe = document.getElementById('xpdfIFrame');
                // Reset everytime document want to open
                iframe.contentWindow.angular.element("#xpdfController").scope().setEmptyPdf();
                iframe.contentWindow.angular.element("#xpdfController").scope().resetAnnoItems();
                $http.post('/document/openfile', { fileName: arg.Document.FileUrl }).then(function (response) {
                    if (response.data) {
                        $scope.openDocumentSumarryViewer(iframe, arg, response.data);
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            };
            $scope.openDocumentSumarryViewer = function (iframe, arg, fileName) {
                $scope.btnDisabled = true;
                $scope.setAnnos(arg.Document.DocumentAnnotations);
                iframe.contentWindow.angular.element("#xpdfController").scope().setDefaultPdf(fileName, false);
                iframe.contentWindow.angular.element("#xpdfController").scope().setAnnoItems($scope.annos);
                iframe.contentWindow.angular.element("#xpdfController").scope().setAnnoToolbarVisible(false);
                var permission = arg.Document.DocumentUser.ActionPermission;
                iframe.contentWindow.angular.element("#xpdfController").scope().showDownload
                    (
                        $scope.isCompleteRotation() && ((arg.ActionStatus & 64) != 64) && ( $scope.model.DocumentActionPermissionType == 2 || ((permission & 16) == 16))
                    );
                iframe.contentWindow.angular.element("#xpdfController").scope().showPrint
                    (
                        $scope.isCompleteRotation() && ((arg.ActionStatus & 64) != 64) && ( $scope.model.DocumentActionPermissionType == 2 || ((permission & 8) == 8))
                    );
                iframe.contentWindow.angular.element("#xpdfController").scope().setDownloadFileName(arg.Document.FileName);
                // used for print request and download request in document viewer.
                iframe.contentWindow.angular.element("#xpdfController").scope().setRotationId($scope.rotationId);
                $("#modal_pdf_viewer").modal("show");
            };

            /*--------------------------------------------------------------
                DOCUMENT VIEW FUNCTION
            --------------------------------------------------------------*/
            $scope.viewDocument = function (idx) {
                $scope.btnDisabled = true;
                var doc = $scope.docs[idx];
                var iframe = document.getElementById('xpdfIFrame');
                // Reset everytime document want to open
                iframe.contentWindow.angular.element("#xpdfController").scope().setEmptyPdf();
                iframe.contentWindow.angular.element("#xpdfController").scope().resetAnnoItems();
                $http.post('/document/openfile', { fileName: doc.Document.FileUrl }).then(function (response) {
                    if (response.data) {
                        $scope.openDocumentViewer(iframe, idx, response.data);
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            };
            $scope.openDocumentViewer = function (iframe, idx, fileName) {
                $scope.btnDisabled = true;
                var doc = $scope.docs[idx];
                $scope.model.ActionStatus |= 4;
                doc.ActionStatus |= 4;
                $scope.setAnnos(doc.Document.DocumentAnnotations);
                if (iframe.contentWindow == null)
                    return;
                iframe.contentWindow.angular.element("#xpdfController").scope().setDefaultPdf(fileName, false);
                iframe.contentWindow.angular.element("#xpdfController").scope().setAnnoItems($scope.annos);
                iframe.contentWindow.angular.element("#xpdfController").scope().setAnnoToolbarVisible(false);
                $("#modal_pdf_viewer").modal("show");
            };
            /*--------------------------------------------------------------
                DOCUMENT REVISED FUNCTION
            --------------------------------------------------------------*/
            $scope.revisedDocument = function (idx) {
                $scope.btnDisabled = true;
                var doc = $scope.docs[idx];
                var iframe = document.getElementById('xpdfIFrame');
                $scope.isRevising = true;
                // Reset everytime document want to open
                iframe.contentWindow.angular.element("#xpdfController").scope().setEmptyPdf();
                iframe.contentWindow.angular.element("#xpdfController").scope().resetAnnoItems();
                $http.post('/document/openfile', { fileName: doc.Document.FileUrl }).then(function (response) {
                    if (response.data) {
                        $scope.openDocumentRevision(iframe, idx, response.data);
                    }
                }, function (response) {
                    //error handle\
                        $scope.btnDisabled = false;
                    var x = 0;
                });
            };

            $scope.openDocumentRevision = function (iframe, idx, fileName) {
                $scope.btnDisabled = true;
                var doc = $scope.docs[idx];
                $scope.setAnnos(doc.Document.DocumentAnnotations);
                if (iframe.contentWindow == null)
                    return;
                iframe.contentWindow.angular.element("#xpdfController").scope().setDefaultPdf(fileName, false);
                iframe.contentWindow.angular.element("#xpdfController").scope().setAnnoItems($scope.annos);
                iframe.contentWindow.angular.element("#xpdfController").scope().setAnnoToolbarVisible(true);
                iframe.contentWindow.angular.element("#xpdfController").scope().setFirstPersonToolbar($scope.checkIsFirstPerson());
                iframe.contentWindow.angular.element("#xpdfController").scope().setRotationId($scope.rotationId);
                isdefineiframe = true;
                $scope.selectedIdx=idx;
                $("#modal_pdf_viewer").modal("show");
                $(window).on('beforeunload', function(){ return "";});
                /*$('#modal_pdf_viewer').on('hidden.bs.modal', revisiFinished);*/
            };
            $scope.closePdf = function () {
                if ($scope.isRevising) {
                    var items = document.getElementById("xpdfIFrame").contentWindow.angular.element("#xpdfController").scope().getAnnoItems();
                    if (items != [] && items != null && items != undefined) {
                        swal({
                            title: "Confirmation",
                            text: "Do you want to save these changes?",
                            type: "warning",
                            showCancelButton: true,
                            closeOnConfirm: true,
                            closeOnCancel: true,
                            confirmButtonColor: "#2196F3",
                            showLoaderOnConfirm: true,
                            confirmButtonText: "Yes ",
                            cancelButtonText: "No",
                        },function (isConfirm) {
                            $scope.btnDisabled = false;
                            if (isConfirm) {
                                $scope.docs[$scope.selectedIdx].Document.DocumentAnnotations = items;
                                if (!$scope.checkIsFirstPerson()) {
                                    $scope.model.ActionStatus |= 2;
                                    $scope.docs[$scope.selectedIdx].ActionStatus |= 2;
                                }
                                $scope.$apply();
                                if ($scope.fromSelectDoc) {
                                    $("#modal_select_document").modal("show");
                                }
                            }
                            $("#modal_pdf_viewer").modal("hide");
                        });
                    }
                } else if ($scope.isUploading) {
                    var items = document.getElementById("xpdfIFrame").contentWindow.angular.element("#xpdfController").scope().getAnnoItems();
                    $scope.annos = items;
                    $("#modal_pdf_viewer").modal("hide");
                    if ($scope.fromSelectDoc) {
                        $("#modal_select_document").modal("show");
                    }
                } else {
                    $("#modal_pdf_viewer").modal("hide");
                }
                $scope.btnDisabled = false;
                $scope.isRevising = false;
                $scope.isUploading = false;
            }
            /*--------------------------------------------------------------
               DOCUMENT FIRST TIME SETUP DOCUMENT
           --------------------------------------------------------------*/
            $scope.annoDocument = function () {
                $("#modal_select_document").modal("hide");
                $scope.fromSelectDoc = true;
                $scope.isUploading = true;
                var iframe = document.getElementById('xpdfIFrame');
                // Reset everytime document want to open
                iframe.contentWindow.angular.element("#xpdfController").scope().setEmptyPdf();
                iframe.contentWindow.angular.element("#xpdfController").scope().resetAnnoItems();
                $http.post('/document/openfile', { fileName: $scope.model.FileUrl }).then(function (response) {
                    if (response.data) {
                        $scope.openDocument(iframe, response.data, true);
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            };
            $scope.openDocument = function (iframe, fileName, isNew) {
                $scope.btnDisabled = true;
                if (iframe.contentWindow == null)
                    return;
                iframe.contentWindow.angular.element("#xpdfController").scope().setDefaultPdf(fileName, isNew);
                iframe.contentWindow.angular.element("#xpdfController").scope().setAnnoItems($scope.annos);
                iframe.contentWindow.angular.element("#xpdfController").scope().setAnnoToolbarVisible(true);
                iframe.contentWindow.angular.element("#xpdfController").scope().setRotationId($scope.rotationId);
                isdefineiframe = true;
                $("#modal_pdf_viewer").modal("show");
                $(window).on('beforeunload', function(){ return "";});
                /*$('#modal_pdf_viewer').on('hidden.bs.modal', annoFinished);*/
            };
            var isok=false;
            $scope.printDocument = function (idx) {
                var doc = $scope.docs[idx];
                var iframe = document.getElementById('xpdfIFrame');
                iframe.contentWindow.angular.element("#xpdfController").scope().setEmptyPdf();
                $http.post('/document/openfile', { fileName: doc.Document.FileName }).then(function (response) {
                    if (response.data) {
                        $scope.openPrintDocument(idx, response.data);
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            };

            $scope.checkIsFirstPerson = function () {
                return $scope.model.CurrentActivity == $scope.model.FirstNodeId && $scope.model.accessType !=1;
            };

            $scope.checkIsActive = function () {
                return $scope.model.Status == '00'  && $scope.model.accessType !=1;
            };

            $scope.openPrintDocument = function (idx, fileName) {
                var doc = $scope.docs[idx];
                doc.ActionStatus |= 8;
                setAnnos(idx);
                if (!isok) {
                    var iframe = document.getElementById('xpdfIFrameView');
                    iframe.contentWindow.angular.element("#xpdfController").scope().setDefaultPdf(fileName);//doc.Document.FileName);
                    iframe.contentWindow.angular.element("#xpdfController").scope().setAnnoItems($scope.annos);
                }
                isok = true;
                //setTimeout(function () {
                var element = $("iframe#xpdfIFrameView").contents()[0].getElementById('viewer');
                var mode = 'specify';
                var pagebreak = (mode === 'specify') ?
                    { mode: '', before: '.before', after: '.after', avoid: '.avoid' } :
                    { mode: mode };

                // Generate the PDF.
                html2pdf().from(element).set({
                    filename: mode + '.pdf',
                    pagebreak: pagebreak,
                    jsPDF: { orientation: 'portrait', unit: 'in', format: 'letter', compressPDF: false }
                }).save();
                //}, 1000);
            };

            $scope.downloadDocument = function (idx) {
                var doc = $scope.docs[idx];
                var iframe = document.getElementById('xpdfIFrame');
                iframe.contentWindow.angular.element("#xpdfController").scope().setEmptyPdf();
                $http.post('/document/openfile', { fileName: doc.Document.FileName }).then(function (response) {
                    if (response.data) {
                        $scope.openDownloadDocument(idx, response.data);
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            };

            $scope.openDownloadDocument = function (idx, fileName) {
                var doc = $scope.docs[idx];
                doc.ActionStatus |= 16;
                setAnnos(idx);
                var iframe = document.getElementById('xpdfIFrame');
                iframe.contentWindow.angular.element("#xpdfController").scope().setDefaultPdf(fileName);//doc.Document.FileName);
                iframe.contentWindow.angular.element("#xpdfController").scope().setAnnoItems($scope.annos);
                iframe.contentWindow.angular.element("#xpdfController").scope().setAnnoToolbarVisible(false);
                iframe.contentWindow.angular.element("#xpdfController").scope().showDownload();
                iframe.contentWindow.angular.element("#xpdfController").scope().setRotationId($scope.rotationId);
                $("#modal_pdf_viewer").modal("show");
            };

            $scope.downloadAttchment = function (atth) {
                location.href = "/updownfile/xdownload?ufileName=" + atth.DocumentUpload.FileName + "&isDocument=false";
            };
            /*--------------------------------------------------------------
                Submit Button Activity Function
            --------------------------------------------------------------*/
            $scope.processActivity = function (bit) {
                if (!$scope.isValidForm($scope.myForm)) {
                    showInfo("There is a problem, please press submit again.");
                    $scope.btnDisabled = false;
                    return;
                }
                if ($scope.docs.length < 1) {
                    showInfo("You should add at least one document to continue.");
                    $scope.btnDisabled = false;
                    return;
                }

                $scope.submitActivity(bit);
            };
            $scope.submitActivity = function (bit) {
                $scope.btnDisabled = true;
                $scope.checkSignOrStamp();
                if (bit == 1 && $scope.needPassword != 0) {
                    $scope.showPasswordModal();
                } else {
                    $scope.triggerSubmitSwal(bit);
                }
            }
            /*--------------------------------------------------------------
                User Signature and Stamp Function
            --------------------------------------------------------------*/
            $scope.checkSignOrStamp = function () {
                for (var i = 0; i < $scope.docs.length; i++) {
                    var doc = {};
                    doc.Document = $scope.docs[i].Document;
                    doc.DocumentId = $scope.docs[i].DocumentId;
                    if (($scope.validAction(doc.Document.DocumentUser.ActionPermission, 1))) {
                        // need sign
                        $scope.needPassword |= 1;
                    }
                    if (($scope.validAction(doc.Document.DocumentUser.ActionPermission, 32))) {
                        // need stamp
                        $scope.needPassword |= 32;
                    }
                    if ($scope.needPassword != 0) {
                        $scope.checkIsUserProfileComplete();
                        return true;
                    }
                }
                return false;
            };
            $scope.checkIsUserProfileComplete = function () {
                $http.post('/document/CheckIsUserProfileComplete', { userId: 0 }).then(function (response) {
                    if (response.data) {
                        if (response.data == -1) {
                            showError("Complete your user profiles to continue to sign this document. (KTP, initial, signature, and stamp)");
                            return false;
                        }
                        return true;

                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            };
            $scope.showPasswordModal = function () {
                // $scope.btnDisabled = true;
                var val = document.getElementById("thePassword");
                val.value = "";
                $scope.thePassword = "";
                $scope.passwordError = false;
                $("#modal_password").modal("show");
            };
            $scope.triggerSubmitSwal = function (bit) {
                $scope.btnDisabled = true;
                $scope.setPassword();
                var eventString = "";
                if (bit == 1)
                    eventString = "Submit";
                else if (bit == 2)
                    eventString = "Reject";
                else if (bit == 4)
                    eventString = "Revision";
                else if (bit == 8)
                    eventString = "Manual Alter";
                swal({
                    title: "Confirmation",
                    text: "This activity will be " + eventString + ", continue?",
                    type: "warning",
                    showCancelButton: true,
                    closeOnConfirm: false,
                    confirmButtonColor: "#2196F3",
                    showLoaderOnConfirm: true,
                    confirmButtonText: "Yes, " + eventString + " it!",
                    cancelButtonText: "No, cancel please!",
                },
                    function (isConfirm) {
                        setTimeout(function () {
                            if (isConfirm) {
                                if (bit == 1 && $scope.needPassword != 0) {
                                    if ($scope.passwordcheck) {
                                        $scope.submitActivityProcess(bit);
                                        $scope.passwordError = false;
                                        $("#modal_password").modal("hide");
                                    } else {
                                        $scope.passwordError = true;
                                    }
                                } else {
                                    $scope.submitActivityProcess(bit);
                                }
                            }
                            swal.close();

                        }, 500);
                    });
            };
            $scope.setPassword = function () {
                var val = document.getElementById("thePassword");
                var thePassword = val.value;
                $http.post('/user/ValidationPassword', { userId: $scope.model.UserId, password: thePassword }).then(function (response) {
                    if (response.data) {
                        $scope.passwordcheck = true;
                        return true;
                    } else {
                        $scope.passwordcheck = false;
                        return false;
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            };
            $scope.submitActivityProcess = function (bit) {
                var rotNodeDocs = [];
                for (var i = 0; i < $scope.docs.length; i++) {
                    var doc = $scope.docs[i];
                    doc.Document = $scope.docs[i].Document;
                    doc.DocumentId = $scope.docs[i].DocumentId;
                    if ((bit == 1) && (($scope.needPassword & 1) == 1) && $scope.validAction(doc.Document.DocumentUser.ActionPermission, 1)) {
                        doc.ActionStatus |= 1;
                    }

                    if ((bit == 1) && (($scope.needPassword & 32) == 32) && $scope.validAction(doc.Document.DocumentUser.ActionPermission, 32)) {
                        doc.ActionStatus |= 32;
                    }

                    if ((bit != 1 || $scope.needPassword == 0)) {
                        doc.ActionStatus = $scope.docs[i].ActionStatus;
                    }

                    var annos = [];
                    for (x = 0; x < $scope.docs[i].Document.DocumentAnnotations.length; x++) {
                        var ix = $scope.docs[i].Document.DocumentAnnotations[x];
                        if (ix.IsDeleted) continue;
                        var item = {};
                        item.id = ix.id;
                        item.Page = ix.Page;
                        item.DocumentId = ix.DocumentId;
                        item.Document = ix.Document;
                        item.LeftPosition = ix.LeftPosition;
                        item.TopPosition = ix.TopPosition;
                        item.WidthPosition = ix.WidthPosition;
                        item.HeightPosition = ix.HeightPosition;
                        item.Color = ix.Color;
                        item.BackColor = ix.BackColor;
                        item.Text = ix.Text;
                        item.Unknown = ix.Unknown;
                        item.Rotation = ix.Rotation;
                        item.RotationId = ix.RotationId;
                        item.ScaleX = ix.ScaleX;
                        item.ScaleY = ix.ScaleY;
                        item.TransitionX = ix.TransitionX;
                        item.TransitionY = ix.TransitionY;
                        item.StrokeWidth = ix.StrokeWidth;
                        item.Opacity = ix.Opacity;
                        item.CreatorId = ix.CreatorId;
                        item.Flag = ix.Flag;
                        item.AssignedAnnotationCode = ix.AssignedAnnotationCode;
                        item.AssignedAt = ix.AssignedAt;
                        item.AssignedAnnotationImageFileName = ix.AssignedAnnotationImageFileName;
                        item.UserId = ix.UserId;
                        item.ElementTypeId = (ix.ElementTypeId == undefined ? ix.ElementType : ix.ElementTypeId);
                        item.Element = ix.Element;
                        annos.push(item);
                    }
                    doc.Document.DocumentAnnotations = annos;
                    rotNodeDocs.push(doc);
                }
                var btn = Ladda.create(document.querySelector('.btn-submit'));
                btn.start();
                $http.post('@Url.Action("ProcessActivity", "Inbox")',
                    {
                        param: {
                            RotationNodeId: $scope.model.RotationNodeId,
                            RotationNodeDocs: rotNodeDocs,
                        },
                        bit: bit,
                    }).then(function (response) {
                        btn.stop();
                        if (response.data) {
                            if (response.data == -1) {
                                showInfo("Transfer cannot be processed, balance insufficient of the sender. Please contact the sender");
                                $scope.btnDisabled = false;
                                return;
                            }
                            $scope.wizarno = 'success';
                            $scope.model.Status = response.data;
                            $scope.getUpdatedInbox();
                            setTimeout(function () {
                                     $scope.wizarno = 'product';
                            }, 1000);
                            $(window).off('beforeunload');
                        }
                    }, function (response) {
                        btn.stop();
                        $scope.btnDisabled = false;
                        showInfo("An error has occurred, please try submitting again.");
                        var x = 0;
                    });
            };
            $scope.isValidForm = function (theForm) {
                var isvalid = theForm.$valid;
                return isvalid;
            };

            $scope.scrollingPage = function (id) {
                $('html, body').animate({
                    scrollTop: $(id).offset().top
                }, 200);
            };

            $scope.validAction = function (val, ...bits) {
                var ret = false;
                for (i = 0; i < bits.length; i++) {
                    if ((val & bits[i]) == bits[i]) {
                        ret = true;
                        break;
                    }
                }
                return ret;
            };

            $scope.finishLoading = function () {
                $scope.loadingLog = 0;
            };
            /*--------------------------------------------------------------
                POPUP DOC
            --------------------------------------------------------------*/
            $scope.canClosePdf = function () {
                var pdfCanClose = document.getElementById('xpdfIFrame').contentWindow.angular.element("#xpdfController").scope().canClosePdf();
                if (!pdfCanClose) {
                    swal({
                        title: "Information",
                        text: "You need to assign user to SIgnature, Initial, or Stamp. Double click on the user icon to assign",
                        type: "warning",
                        showCancelButton: false,
                        closeOnConfirm: true,
                        closeOnCancel: true,
                        confirmButtonColor: "#2196F3",
                        showLoaderOnConfirm: true,
                        confirmButtonText: "OK ",
                        cancelButtonText: "No",
                    }, function (isConfirm) {
                        if (isConfirm) {
                            console.log('pdf cannot close')
                        }
                    });
                }
                return pdfCanClose;
            }
            $scope.documentIdx=-1;
            $scope.editDocument = function (idx) {
                $('#criteria').val("");
                $scope.documentIdx = idx;
                $scope.documents = [];
                $("#modal_select_document").modal("show");
            };
            $scope.removeDocument = function (idx) {
                var docRemoved = $scope.docs[idx];
                docRemoved.ActionStatus |= 64;
                $(window).on('beforeunload', function(){ return "";});
            };
            $scope.getDocument = function (idx, rotationNodeId, documentId) {
                $http.post('/Document/GetDocument', { rotationNodeId: rotationNodeId, documentId: documentId }).then(function (response) {
                    if (response.data) {
                        $scope.docs[idx].Document.FileName = response.data.FileName;
                        $scope.docs[idx].Document.DocumentAnnotates = response.data.DocumentAnnotates;
                        $scope.docs[idx].Document.DocumentMember = response.data.DocumentMember;
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            };

            ////////////////////////////   DOCUMENT UPLOAD AND SAVE CONTROL  ////////////////////////////
            $scope.popupDocument = function () {
                $('#criteria').val("");
                $scope.documentIdx = -1;
                $scope.documents = [];
                $scope.annos = [];
                $scope.fromSelectDoc = true;
                $("#modal_select_document").modal("show");
                $('#modal_select_document').on('hidden.bs.modal', function () {
                    $scope.btnDisabled = false;
                });
            };
            $scope.uploadDocFile = function (idx, file, errFiles) {
                $scope.finit = $scope.f;
                $scope.f = file;
                $scope.errFile = errFiles && errFiles[0];
                if (file) {
                    $scope.docFileName = file.name;
                    $scope.model.FileUrl = file.name;
                    $scope.model.FileSize = file.size;
                    file.upload = Upload.upload({
                        url: '/updownfile/xuploadastemporary?idx=' + idx + '&fileType=0&companyId=' + $scope.companyId,
                        data: { FileUploaded: file }
                    });
                    file.upload.then(function (response) {
                        if (response.data.Status == "ADMINISTRATOR_EXCEED_LIMIT") {
                            showInfo("The number of administrators exceed limit, upgrade your subscription");
                            $scope.resetFileUploadDetails();
                            $scope.progressValueUploadFile = "Failed";
                            return;
                        } else if (response.data.Status == "MEMBER_EXCEED_LIMIT") {
                            showInfo("The number of members in this company exceed limit, upgrade your subscription.");
                            $scope.resetFileUploadDetails();
                            $scope.progressValueUploadFile = "Failed";
                            return;
                        }else if (response.data.Status == "ROTATION_STARTED_EXCEED_LIMIT") {
                            showInfo("The number of rotation using this subscription is exceeding the limit, upgrade your subscription");
                            $scope.resetFileUploadDetails();
                            $scope.progressValueUploadFile = "Failed";
                            return;
                        }else if (response.data.Status == "NO_ACTIVE_PLAN") {
                            showInfo("this subscription is invalid");
                            $scope.resetFileUploadDetails();
                            $scope.progressValueUploadFile = "Failed";
                            return;
                        }else if (response.data.Status == "NOT_AUTHORIZED") {
                            showInfo("You are not authorized to use this subscription.");
                            $scope.resetFileUploadDetails();
                            $scope.progressValueUploadFile = "Failed";
                            return;
                        }else if (response.data.Status == "EXPIRED") {
                            showInfo("This subscription is expired. Buy new subscription");
                            $scope.resetFileUploadDetails();
                            $scope.progressValueUploadFile = "Failed";
                            return;
                        }else if (response.data.Status == "STORAGE_EXCEED_LIMIT") {
                            showInfo("The storage is full, upgrade your subscription.");
                            $scope.resetFileUploadDetails();
                            $scope.progressValueUploadFile = "Failed";
                            return;
                        } else if (response.data.Status == "OK") {
                            
                            file.result = response.data;
                            if (file.result) {
                                $scope.model.FileUrl = file.result.FileUrl;
                                $scope.model.FileName = file.result.FileName;
                                $scope.model.FileExtension = file.result.FileExtension;
                                $scope.fileTypeImage = $scope.model.FileExtension + ".png";
                                $scope.progressValueUploadFile = "Upload success";
                                isdefineiframe = false;
                                var doc = {};
                                doc.Document = {};
                                doc.Document.FileName = file.result.FileName;
                                doc.ActionStatus = $scope.model.ActionStatus;
                                doc.Document.Extension = file.result.FileExtension;
                                $scope.tempDoc = doc;
                                $scope.isUpload = 1;
                                $(window).off('beforeunload');
                                $scope.btnDisabled = false;
                                document.querySelector('.submit-document').disabled = false;
                            }
                        }else {
                            showError("Error when upload file " );
                            $scope.resetFileUploadDetails();
                            $scope.progressValueUploadFile = "Failed";
                            return;
                        }
                        //});
                    }, function (response) {
                        if (response.status > 0) {
                            showError("Error upload file : " + response.statusText);
                        }
                    }, function (evt) {
                        file.progress = Math.min(100, parseInt(100.0 * evt.loaded / evt.total));
                        $(window).on('beforeunload', function(){ return "";});
                        if (file.progress >= 100) {
                            $scope.progressValueUploadFile = "Upload success";
                            ////$scope.podcastImage="podcast_uploaded.png";
                            isdefineiframe = false;
                        } else {
                            $scope.progressValueUploadFile = "Uploading...(" + file.progress + "%)";
                        }
                    });
                } else if ($scope.errFile != null) {
                    showError("Error upload file : " + $scope.errFile.$error + " (" + $scope.errFile.$errorParam + ")");
                }
            };
            $scope.updateProduct = function () {
                if ($scope.isUpload == 0) {
                    showInfo("document must be uploaded");
                    return;
                }
                if (!$scope.isValidForm($scope.myForm))
                    return;

                var tmpAnnos = angular.copy($scope.annos);
                $(window).on('beforeunload', function(){ return "";});
                $scope.annos = [];
                for (i = 0; i < tmpAnnos.length; i++) {
                    var ix = tmpAnnos[i];
                    if (ix.IsDeleted) continue;
                    var item = {};
                    item.Id = ix.Id;
                    item.Page = ix.Page;
                    item.LeftPosition = ix.LeftPosition;
                    item.TopPosition = ix.TopPosition;
                    item.WidthPosition = ix.WidthPosition;
                    item.HeightPosition = ix.HeightPosition;
                    item.Color = ix.Color;
                    item.BackColor = ix.BackColor;
                    item.Text = ix.Text;
                    item.Unknown = ix.Unknown;
                    item.Rotation = ix.Rotation;
                    item.ScaleX = ix.ScaleX;
                    item.ScaleY = ix.ScaleY;
                    item.TransitionX = ix.TransitionX;
                    item.TransitionY = ix.TransitionY;
                    item.StrokeWidth = ix.StrokeWidth;
                    item.Opacity = ix.Opacity;
                    item.CreatorId = ix.CreatorId;
                    item.Flag = ix.Flag;
                    item.AssignedAnnotationCode = ix.AssignedAnnotationCode;
                    item.AssignedAt = ix.AssignedAt;
                    item.AssignedAnnotationImageFileName = ix.AssignedAnnotationImageFileName;
                    item.UserId = ix.UserId;
                    item.ElementTypeId = ix.ElementType;
                    item.Element = ix.Element;
                    $scope.annos.push(item);
                }
                $scope.saveProduct();
            };
            $scope.saveProduct = function () {
                var btn = Ladda.create(document.querySelector('.submit-document'));
                btn.start();
                $http.post('@Url.Action("Save", "document")',
                    {
                        newDocument: {
                            Id: $scope.model.Id,
                            Description: $scope.model.Descr,
                            FileUrl: $scope.model.FileUrl,
                            FileName: $scope.model.FileName,
                            Extension: $scope.model.FileExtension,
                            FileSize: $scope.model.FileSize,
                            MaximumPrintPerUser: $scope.model.MaxPrint,
                            MaximumDownloadPerUser: $scope.model.MaxDownload,
                            DocumentAnnotations: $scope.annos,
                        }, companyId: $scope.companyId,
                        rotationId: $scope.rotationId
                    }).then(function (response) {
                        btn.stop();
                        if (response.data == "ADMINISTRATOR_EXCEED_LIMIT") {
                            showInfo("The number of administrators exceed limit, upgrade your subscription");
                            $scope.resetFileUploadDetails();
                            $scope.progressValueUploadFile = "Failed";
                            return;
                        } else if (response.data == "MEMBER_EXCEED_LIMIT") {
                            showInfo("The number of members in this company exceed limit, upgrade your subscription.");
                            $scope.resetFileUploadDetails();
                            $scope.progressValueUploadFile = "Failed";
                            return;
                        } else if (response.data == "ROTATION_STARTED_EXCEED_LIMIT") {
                            showInfo("The number of rotation using this subscription is exceeding the limit, upgrade your subscription");
                            $scope.resetFileUploadDetails();
                            $scope.progressValueUploadFile = "Failed";
                            return;
                        } else if (response.data == "NO_ACTIVE_PLAN") {
                            showInfo("this subscription is invalid");
                            $scope.resetFileUploadDetails();
                            $scope.progressValueUploadFile = "Failed";
                            return;
                        } else if (response.data == "NOT_AUTHORIZED") {
                            showInfo("You are not authorized to use this subscription.");
                            $scope.resetFileUploadDetails();
                            $scope.progressValueUploadFile = "Failed";
                            return;
                        } else if (response.data == "EXPIRED") {
                            showInfo("This subscription is expired. Buy new subscription");
                            $scope.resetFileUploadDetails();
                            $scope.progressValueUploadFile = "Failed";
                            return;
                        } else if (response.data == "STORAGE_EXCEED_LIMIT") {
                            showInfo("The storage is full, upgrade your subscription.");
                            $scope.resetFileUploadDetails();
                            $scope.progressValueUploadFile = "Failed";
                            return;
                        }
                        else if (response.data.Status == "OK") {
                            response.data.Extension = $scope.tempDoc.Document.Extension;
                            $scope.tempDoc.Document = response.data;
                            $scope.tempDoc.DocumentId = response.data.Id;
                            $scope.tempDoc.Document.IsCurrent = response.data.IsCurrent;
                            $scope.docs.push($scope.tempDoc);
                            $scope.resetFileUploadDetails();
                            $("#modal_select_document").modal('hide');
                            showInfo("Success store document");
                            document.querySelector('.submit-document').disabled = false;
                            $scope.btnDisabled = false;
                        } else {
                            showInfo("An error has occurred");
                        }
                    }, function (response) {
                        //error handle\
                        btn.stop();
                        showInfo("An error has occurred, please try submitting again.");
                    });
            };
            $scope.confirmExit = function () {
                return "You are uploading your file. Are you sure want to leave incomplete upload process?";
            }

            $scope.isValidForm = function (theForm) {
                var isvalid = theForm.$valid;
                return isvalid;
            };
            $scope.resetFileUploadDetails = function () {
                $scope.f = $scope.finit;
                $scope.docFileName = "";
                $scope.model.FileUrl = "";
                $scope.model.FileSize = "";
                $scope.model.FileUrl = "";
                $scope.model.Extension = "";
                $scope.model.FileName = "";
                $scope.model.MaxPrint = 0;
                $scope.model.MaxDownload = 0;
                $scope.fileTypeImage = "no_document.png";
                $scope.progressValueUploadFile = "";
                var doc = {};
                $scope.tempDoc = doc;
                $scope.isUpload = 0;
                $scope.annos = [];
                document.querySelector('.submit-document').disabled = true;
            };

            ////////////////////////////   POP UP SELECT USER    ////////////////////////////
            $scope.memberIdx=-1;
            $scope.editMember = function (idx) {
                $scope.memberIdx = idx;
                $scope.members = [];
                $scope.page = "1";
                $scope.criteria = "";
                $("#modal_select_member").modal("show");
            };
            $scope.SetItemClass = function (status) {
                if (status == 98 || status == 99 || status == 97) {
                    return "danger";
                } else if (status == 5) {
                    return "warning";
                } else if (status == 1 || status == 2) {
                    return "default";
                }
                return "info";

            };
            $scope.findMembers = function (criteria, page, row) {
                $scope.page = 1;
                $scope.members = [];
                $http.post('/Member/FindMembers', { topCriteria: criteria, page: page, pageSize: row }).then(function (response) {
                    if (response.data) {
                        $scope.members = response.data;
                        $scope.index = row * (page - 1);
                        $scope.findMembersCountAll(criteria);
                        $scope.isView = true;
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            };
            $scope.findMembersCountAll = function (criteria) {
                $scope.paging = [];
                $http.post('/Member/FindMembersCountAll', { topCriteria: criteria }).then(function (response) {
                    if (response.data) {
                        var jumlahData = response.data;
                        var jumlahPage = Math.ceil(jumlahData / $scope.row);
                        for (var i = 1; i <= jumlahPage; i++) {
                            $scope.paging.push({ value: i, text: i });
                        }
                        $scope.page = "1";
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            };
            $scope.changePageMember = function (criteria, page, row) {
                $scope.products = [];
                $http.post('/Member/FindMembers', { topCriteria: criteria, page: page, pageSize: row }).then(function (response) {
                    if (response.data) {
                        $scope.members = response.data;
                        $scope.index = row * (page - 1);
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            };

            $scope.setMember = function (idx) {
                $scope.users[$scope.memberIdx].UserId = $scope.members[idx].Id;
                $scope.users[$scope.memberIdx].Name = $scope.members[idx].Name;
                $scope.users[$scope.memberIdx].Email = $scope.members[idx].Email;
                $scope.users[$scope.memberIdx].Picture = $scope.members[idx].ImageProfile;
                $scope.users[$scope.memberIdx].EncryptedId = $scope.members[idx].EncryptedId;
            };
            $scope.removeMember = function (idx) {
                $scope.users.splice(idx, 1);
            };
            $scope.popupMember = function () {
                $scope.memberIdx = -1;
                $scope.members = [];
            };

            ////////////////////////////   INBOX UPDATE    ////////////////////////////
            $scope.getUpdatedInbox = function () {
                const queryString = window.location.search;
                const urlParams = new URLSearchParams(queryString);
                const inboxId = urlParams.get('id');
                $http.post('/inbox/GetInbox', { id: inboxId }).then(function (response) {
                    if (response.data) {
                        if (response.data == -1 || response.data == -2) {
                            showError("");
                            return;
                        } else {
                            assignProdut(response.data);
                        }
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            }

            ////////////////////////////   HELPER    ////////////////////////////
            $scope.humanFileSize = function (bytes, si) {
                var thresh = si ? 1000 : 1024;
                if (Math.abs(bytes) < thresh) {
                    return bytes + ' B';
                }
                var units = si
                    ? ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
                    : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];
                var u = -1;
                do {
                    bytes /= thresh;
                    ++u;
                } while (Math.abs(bytes) >= thresh && u < units.length - 1);
                return bytes.toFixed(1) + ' ' + units[u];
            };
            $scope.convertJsonDate = function (val) {
                if (val == undefined)
                    return '';
                return new Date(parseInt(val.substr(6)));
            }
            $scope.getStatusName = function (status, workflowId) {
                switch (status) {
                    case 0:
                        return "Ongoing";
                        break;
                    case 1:
                        if(workflowId == $scope.model.FirstNodeId)
                            return "Uploaded";
                        else
                            return "Done reviewing"
                        break;
                    case 2:
                        return "Pending";
                        break;
                    case 3:
                        return "Signed";
                        break;
                    case 5:
                        return "Ask for Revision";
                        break;
                    case 6:
                        return "Altered";
                        break;
                    case 90:
                        return "Completed";
                        break;
                    case 98:
                        return "Declined";
                        break;
                    case 99:
                        return "Canceled";
                        break;
                    case 10:
                        return "Waiting_For_Response";
                        break;
                    case 11:
                        return "Accepted";
                        break;
                    case 97:
                        return "Expired";
                        break;

                }
            };
            $scope.isCompleteRotation = function () {
                switch ($scope.model.RotationStatus) {
                    case 0:
                        return false;
                        break;
                    case 1:
                        return false;
                        break;
                    case 2:
                        return false;
                        break;
                    case 3:
                        return false;
                        break;
                    case 5:
                        return false;
                        break;
                    case 6:
                        return false;
                        break;
                    case 90:
                        return true;
                        break;
                    case 98:
                        return true;
                        break;
                    case 99:
                        return true;
                        break;
                    case 10:
                        return false;
                        break;
                    case 11:
                        return false;
                        break;
                    case 97:
                        return true;
                        break;
                }
            }
            $scope.setAnnos = function (givenItem) {
                $scope.annos = [];
                for (i = 0; i < givenItem.length; i++) {
                    var ix = givenItem[i];
                    if (ix.IsDeleted) continue;
                    var item = {};
                    item.SvgId = 'svg' + i;
                    item.Page = ix.Page;
                    item.LeftPosition = ix.LeftPosition;
                    item.TopPosition = ix.TopPosition;
                    item.WidthPosition = ix.WidthPosition;
                    item.HeightPosition = ix.HeightPosition;
                    item.Color = ix.Color;
                    item.BackColor = ix.BackColor;
                    item.Text = ix.Text;
                    item.Unknown = ix.Unknown;
                    item.Rotation = ix.Rotation;
                    item.ScaleX = ix.ScaleX;
                    item.ScaleY = ix.ScaleY;
                    item.TransitionX = ix.TransitionX;
                    item.TransitionY = ix.TransitionY;
                    item.StrokeWidth = ix.StrokeWidth;
                    item.Opacity = ix.Opacity;
                    item.CreatorId = ix.CreatorId;
                    item.Flag = ix.Flag;
                    item.AssignedAnnotationCode = ix.AssignedAnnotationCode;
                    item.AssignedAt = ix.AssignedAt;
                    item.AssignedAnnotationImageFileName = ix.AssignedAnnotationImageFileName;
                    item.UserId = ix.UserId;
                    item.ElementType = (ix.ElementTypeId == undefined ? ix.ElementType : ix.ElementTypeId);
                    item.Element = ix.Element;
                    item.IsDeleted = ix.IsDeleted;
                    $scope.annos.push(item);
                }
            };
        });

        $(function () {
        });

        $(document).ready(function () {
            $('#checkbox1').bootstrapSwitch();
            $('#action-panel').show();
        })
    </script>
</body>