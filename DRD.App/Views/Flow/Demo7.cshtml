@using DRD.Domain;
@model JsonLayout

@{
    Layout = null;
}

<!-- Global stylesheets -->
<link href="https://fonts.googleapis.com/css?family=Roboto:400,300,100,500,700,900" rel="stylesheet" type="text/css">
<link href="/assets/css/icons/icomoon/styles.css" rel="stylesheet" type="text/css">
<link href="/assets/css/bootstrap.css" rel="stylesheet" type="text/css">
<link href="/assets/css/core.css" rel="stylesheet" type="text/css">
<link href="/assets/css/components.css" rel="stylesheet" type="text/css">
<link href="/assets/css/colors.css" rel="stylesheet" type="text/css">
<!-- /global stylesheets -->

<script type="text/javascript" src="/assets/js/plugins/loaders/pace.min.js"></script>
<script type="text/javascript" src="/assets/js/core/libraries/jquery.min.js"></script>
<script type="text/javascript" src="/assets/js/core/libraries/bootstrap.min.js"></script>
<script type="text/javascript" src="/assets/js/plugins/loaders/blockui.min.js"></script>

<script src="/assets/vendors/angular-1.5.5/angular.js"></script>
<script src="/assets/vendors/angular-1.5.5/angular-animate.js"></script>
<script src="/Scripts/ui-bootstrap-tpls-1.3.2.js"></script>

<script src="/assets/vendors/file-upload/ng-file-upload-shim.min.js"></script> <!-- for no html5 browsers support -->
<script src="/assets/vendors/file-upload/ng-file-upload.min.js"></script>
<script src="/assets/vendors/ng_only_number.js"></script>


<script src="/Scripts/flow/svg-path/leader-line.min.js"></script>
<script src="/Scripts/flow/svg-path/anim-event.min.js"></script>
<script src="/Scripts/flow/svg-path/in-view.min.js"></script>
<script src="/Scripts/flow/svg-path/plain-draggable.min.js"></script>

<script src="/Scripts/flow/required/script/jquery.connectingLine.js" type="text/javascript"></script>
<script src="/Scripts/flow/scripts/jquery-ui-1.10.4.custom.min.js" type="text/javascript"></script>


<style>
    #stage {
        position: relative;
        width: 600px;
        height: 400px;
        background-color: #ddd;
    }

    #elm0,
    #elm1 {
        width: 80px;
        height: 80px;
        background-color: #bb9a40;
        position: absolute;
        left: 5px;
        top: 5px;
    }

    #elm1 {
        background-color: #44acbe;
        left: 400px;
        top: 300px;
    }

    #handle {
        /*width: 20px;
        height: 20px;
        background-color: #9b314c;
        position: absolute;
        left: 65px;
        top: 25px;*/
        left: 65px;
        top: 25px;
         height: 10px;
        width: 10px;
        background-color: #bbb;
        border-radius: 50%;
        cursor: pointer;
        position: absolute;
    }

    #elm1 svg {
        display: none;
    }

    #elm1.hover svg {
        display: inline;
    }
</style>
<body ng-app="drdApp">
    <!-- Page container -->
    <div ng-controller="drdController">

        <div id="canvas" style="background-color:lavender;width:1000px;height:700px;">

            <div id="stage">
                <div id="elm0"></div>
                <div id="elm1">
                    @*<svg xmlns="http://www.w3.org/2000/svg" width="80" height="80">
                        <path stroke="red" stroke-width="4" fill="none" d="M2,2 h76 v76 h-76 z" stroke-dasharray="20,10" id="path1">
                            <animate attributeName="stroke-dashoffset" begin="indefinite" dur="2s" from="0" to="-30" repeatCount="indefinite" id="anim1" />
                        </path>
                    </svg>*@
                </div>
                <div id="handle"></div>
            </div>

        </div>
    </div>
    <!-- /Page container -->

    <script type="text/javascript">


        var myApp = angular.module('drdApp', ['ngAnimate', 'ui.bootstrap', 'ngFileUpload', 'ngOnlyNumberApp'])

        myApp.controller("drdController", function ($scope, Upload, $location, $http, $filter) {



            initValues();

            /*--------------------------------------------------------------
            INIT DATA
            --------------------------------------------------------------*/
            angular.element(document).ready(function () {

            });

            function initValues() {
                var elm0 = document.getElementById('elm0'),
                elm1 = document.getElementById('elm1'),
                handle = document.getElementById('handle'),
                rectHandle = handle.getBoundingClientRect(),
                rectElm1 = elm1.getBoundingClientRect(),
                boundElm1 = {
                    minLeft: rectElm1.left - rectHandle.width,
                    maxLeft: rectElm1.right,
                    minTop: rectElm1.top - rectHandle.height,
                    maxTop: rectElm1.bottom
                },
                line = new LeaderLine(elm0, handle, {
                    endPlug: 'behind',
                    hide: true,
                    path: 'straight',
                    dash: {animation: true}
                }),
                isConnected, defaultLeft, defaultTop,
                drgHandle = new PlainDraggable(handle, {
                    onMove: function (newPosition) {
                        line.position().show();
                        isConnected = newPosition.left >= boundElm1.minLeft &&
                          newPosition.left <= boundElm1.maxLeft &&
                          newPosition.top >= boundElm1.minTop &&
                          newPosition.top <= boundElm1.maxTop;

                        //mClassList(elm1).toggle('hover', isConnected);
                    },
                    onDragEnd: function () {
                        if (isConnected) { // Done
                            //line.setOptions({
                            //    end: elm1,
                            //    endPlug: 'arrow1'
                            //});
                            //this.element.style.display = 'none';
                            //this.disabled = true;

                            new LeaderLine(elm0, elm1, { endPlug: 'arrow1' });


                            line.hide('none');
                            this.left = defaultLeft;
                            this.top = defaultTop;
                        } else { // Reset
                            line.hide('none');
                            this.left = defaultLeft;
                            this.top = defaultTop;
                        }
                        //mClassList(elm1).remove('hover');
                    }
                });
                defaultLeft = drgHandle.left;
                defaultTop = drgHandle.top;

                //var path1 = document.getElementById('path1'),
                //  anim1 = document.getElementById('anim1'),
                //  pathLen = path1.getTotalLength(),
                //  dashLen = 20, dashSepLen = 10; // stroke-dasharray="20,10"

                //dashLen = pathLen / Math.floor(pathLen / (dashLen + dashSepLen)) - dashSepLen;
                //path1.setAttribute('stroke-dasharray', dashLen + ',' + dashSepLen);
                //anim1.setAttribute('to', -(dashLen + dashSepLen));
                //anim1.beginElement();
            }



            $scope.initData = function () {

            }

            $scope.initDiagram = function () {

            }



        });


        $(function () {
        });


        $(document).ready(function () {

        })

    </script>

</body>