@using DRD.Models.View;
@model Layout

@{
    ViewBag.Title = "Create a New Rotation";
    ViewBag.Submenu = "ROTATION";
}

@section Scripts
{
    <script src="/assets/js/plugins/buttons/spin.min.js" type="text/javascript"></script>
    <script src="/assets/js/plugins/buttons/ladda.min.js" type="text/javascript"></script>
    <script src="/assets/js/pages/components_buttons.js" type="text/javascript"></script>

    <script src="/assets/vendors/angular-1.5.5/angular.js"></script>
    <script src="/assets/vendors/angular-1.5.5/angular-animate.js"></script>
    <script src="/Scripts/ui-bootstrap-tpls-1.3.2.js"></script>

    <script src="/assets/vendors/file-upload/ng-file-upload-shim.min.js"></script> <!-- for no html5 browsers support -->
    <script src="/assets/vendors/file-upload/ng-file-upload.min.js"></script>
    <script src="/assets/vendors/ng_only_number.js"></script>

    <link href="/assets/vendors/bootstrap-switch/bootstrap3/bootstrap-switch.css" rel="stylesheet" type="text/css" />
    <script src="/assets/vendors/bootstrap-switch/bootstrap-switch.js"></script>

    <script type="text/javascript" src="/assets/js/plugins/forms/styling/uniform.min.js"></script>
    <script type="text/javascript" src="/assets/js/plugins/forms/styling/switchery.min.js"></script>
    <script type="text/javascript" src="/assets/js/plugins/forms/styling/switch.min.js"></script>

    <script type="text/javascript" src="/assets/js/plugins/notifications/bootbox.min.js"></script>
    <script type="text/javascript" src="/assets/js/plugins/notifications/sweet_alert.min.js"></script>

    <script src="~/Scripts/xpublic.js"></script>
}

@section Styles
{
    <link href="~/assets/css/pages/rotation-list.css" rel="stylesheet" type="text/css">
    <link href="~/assets/css/pages/for-all-page.css" rel="stylesheet" type="text/css">
}

<body>
    <h4><a href="/rotation/list" class="btn" style="border-radius:15px;text-align:center;padding:5px;margin-left:20px;font-weight:800;background-color:#5D90AE;color:white;"><i class="icon-infinite"></i></a> @ViewBag.Title</h4>
    <section class="panel" ng-controller="drdController">
        <!-- ROTATION FORM-->
        <div ng-show="wizarno=='product'">
            <form name="myForm" class="form-horizontal" autocomplete="off">
                <fieldset>
                    <div class="row">
                        <div class="col-sm-12 col-md-7 col-lg-7">
                            <label class="control-label">Name <strong style="vertical-align:text-top; color:red" data-toggle="tooltip" title="required">*</strong></label>
                            <input type="text" class="form-control" ng-model="model.Name" ng-required="wizarno=='product'" maxlength="100" />
                        </div>
                        <div class="col-sm-12 col-md-5 col-lg-5">
                            <label class="control-label">Workflow <strong style="vertical-align:text-top; color:red" data-toggle="tooltip" title="required">*</strong></label>
                            <div class="input-group" style="cursor:pointer;pointer-events: all" ng-click="popupWorkflow()">
                                <div>
                                    <input type="text" class="form-control" ng-model="workflow.Name" maxlength="50" readonly />
                                </div>
                                <span class="input-group-addon"><i class="icon-opt"></i></span>

                            </div>

                        </div>
                        
                        <div class="col-sm-12">
                            <label class="control-label">Tags <small>(optional)</small></label>
                            <div class="tag-container">
                                <span class="tag-item" ng-repeat="tag in model.Tags">
                                    <span ng-click="changeTag($index)">{{tag}}</span><i class="note-icon-close" ng-click="removeTag($index)"></i>
                                </span>
                                <input id="newTag" type="text" class="form-control" ng-model="newTag"
                                       ng-keydown="(($event.keyCode == 13 || $event.keyCode == 188 ) && addTagList())"
                                       ng-keyup="($event.keyCode == 8 && backToLastTag())(($event.keyCode == 13 || $event.keyCode == 188 ) && addTagList())"/>
                            </div>
                            <div style="color:black;font-size:10px;align-self:end">use comma or enter to insert tag</div>
                        </div>


                        <div class="col-sm-12 col-md-12 col-lg-12">
                            <label class="control-label">Description <small>(optional)</small></label><br />
                            <textarea class="control-label" ng-model="model.Description" rows="3"></textarea>
                        </div>

                    </div>
                    <div class="row">

                        <div class="col-md-12">
                            <div class="row" style="align-content:center">
                                <table class="table-xxs table-bordered table-striped" style="font-size:small;margin: 0 auto; ">
                                    <tbody ng-repeat="x in users" ng-init="topIdx = $index">
                                        <tr style="vertical-align:top" on-finish-render="ngRepeatFinished">
                                            <td style="max-width:200px" rowspan="2">{{x.ActivityName}}</td>
                                            <td>
                                                <table style="width:100%;">
                                                    <tr>
                                                        <td style="width:50px;">
                                                            <img ng-src={{(x.Picture==null?"/Images/Member/user.png":"/Images/Member/"+x.EncryptedId+"/"+x.Picture)}} height="40" width="40" style="cursor:pointer;border-radius:50%;" ng-click="editMember($index)" />
                                                        </td>
                                                        <td style="font-size:xx-small">
                                                            <span class="text-format">{{(x.Name == null? "Click the user icon":x.Name) }}</span><br />
                                                            <span class="text-format">{{x.Email}}</span><br />
                                                        </td>

                                                    </tr>

                                                </table>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="font-size:xx-small">
                                                <span style="font-size:small;color:brown">Permission : </span>
                                                <input type="checkbox" class="control-primary" ng-checked="{{getActionPermission(x.ActionPermission, 8)}}" id="checkboxmt{{x.WorkflowNodeId}}-8"> Print&ensp;&ensp;&ensp;
                                                <input type="checkbox" class="control-success" ng-checked="{{getActionPermission(x.ActionPermission, 16)}}" id="checkboxmt{{x.WorkflowNodeId}}-16"> Download
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>

                    </div>
                </fieldset>
                <!-- SUBMIT BUTTON -->
                <div class="input-group-btn text-right">
                    <button class="btn btn-drd-1 btn-large pull-right btn-ladda btn-submit" data-style="slide-down" ng-click="updateProduct()">
                        <span class="ladda-label">Add Rotation</span><span class="ladda-spinner"></span>
                        <div class="ladda-progress"></div>
                    </button>
                </div>
                <!-- end of SUBMIT BUTTON -->

            </form>
        </div>
        <!--end of ROTATION FORM-->
        <!--CONFIRMATION THANK YOU-->
        <div ng-show="wizarno=='success'">
            <div class="alert alert-success alert-styled-left">
                Data successfully saved. Click <a class="btn" style="background-color:green;color:white;" href='' ng-click="showSubscription()">start</a> to start the rotation process  <br>
            </div>
            This page will be redirected to Rotation List page in 10 seconds
        </div>

        <!--CONFIRMATION THANK YOU-->
        <div ng-show="wizarno=='started'">
            <div class="col-md-12">

                <div class="alert alert-success alert-styled-left">
                    Data successfully started.
                </div>
                <!-- /vertical form options -->
            </div>
            <!-- /Main content -->
        </div>

        <!--/CONFIRMATION THANK YOU-->
        <!-- View modal -->
        <ng-include src="'/Include/PopupWorkflow'"></ng-include>
        <ng-include src="'/Include/PopupMember'"></ng-include>
        <ng-include src="'/Include/PopupSubscription'"></ng-include>
        <!-- View modal -->
    </section>
    <script type="text/javascript">
        var myApp = angular.module('drdApp', ['ngAnimate', 'ui.bootstrap', 'ngFileUpload', 'ngOnlyNumberApp'])
        myApp.directive('onFinishRender', function ($timeout) {
            return {
                restrict: 'A',
                link: function (scope, element, attr) {
                    if (scope.$last === true) {
                        $timeout(function () {
                            scope.$emit('ngRepeatBindRoutesFinished');
                        });
                    }
                }
            }
        });
        myApp.controller("drdController", function ($scope, Upload, $location, $http, $filter) {

            // modal workflow
            $scope.workflow = null;
            $scope.workflows = [];
            $scope.workflowCount = [];
            $scope.paging = [];
            $scope.criteria = "";
            $scope.page = 1;
            $scope.totalItemPerPage = 20;
            $scope.currPage = 0;
            $scope.index = 0;
            // modal workflow

            $scope.newTag = ""

            $scope.SubscriptionList = [];
            $scope.model = {};
            $scope.subscriptions = [];
            $scope.wizarno = 'product';
            $scope.master = {};
            $scope.model.IsActive=true;
            $scope.model.Id = 0;
            $scope.model.Status = "00";
            $scope.model.Tags = [];
            $scope.users = [];

            $(".control-warning").uniform({
                radioClass: 'choice',
                wrapperClass: 'border-warning-600 text-warning-800'
            });

            $scope.$on('ngRepeatBindRoutesFinished', function (ngRepeatFinishedEvent) {
                $(".control-primary").uniform({
                    radioClass: 'choice',
                    wrapperClass: 'border-primary-600 text-primary-800'
                });
                $(".control-success").uniform({
                    radioClass: 'choice',
                    wrapperClass: 'border-success-600 text-success-800'
                });
            });

            /*--------------------------------------------------------------
            INIT DATA
            --------------------------------------------------------------*/
            angular.element(document).ready(function () {
                $(".content").show();
            });

            $scope.getActionPermission = function (val, bit) {
                return ((val & bit)==bit);
            };
            /*--------------------------------------------------------------
            SAVE PRODUCT
            --------------------------------------------------------------*/
            $scope.saveProduct = function () {
                for(i = 0; i < $scope.users.length; i++){
                    var bit = 1;
                    var flag = 6; ///artinya sudah bisa view, add annotation
                    for (x = 1; x < 6; x++) {
                        var cb = $('#checkboxmt' + $scope.users[i].WorkflowNodeId + "-" + bit)[0];
                        if (typeof cb !== 'undefined') {
                            if (cb.checked)
                                flag += bit;
                        }
                        bit += bit;
                    }
                    $scope.users[i].ActionPermission = flag;
                }
                var btn = Ladda.create(document.querySelector('.btn-submit'));
                btn.start();
                console.log($scope.workflow.Id);
                $http.post('@Url.Action("Save", "Rotation")',
                    {
                        newRotation: {
                            Id: 0,
                            Name: $scope.model.Name,
                            Description: $scope.model.Description,
                            WorkflowId:$scope.workflow.Id,
                            Status: 0,
                            RotationUsers: $scope.users,
                            Tags: $scope.model.Tags
                        }
                    }).then(function (response) {
                        btn.stop();
                        if (response.data) {
                            $scope.wizarno = 'success';
                            $scope.model.Id = response.data;
                            $scope.getSubscriptionList();
                            setTimeout(function () {
                                  window.location.href = "/rotation/list";
                                }, 10000);
                        }
                    }, function (response) {
                        //error handle
                        btn.stop();
                        var x = 0;
                    });
            }

            $scope.updateProduct = function () {
                if (!$scope.isValidForm($scope.myForm))
                    return;

                if ($scope.workflow.Name==undefined) {
                    showInfo("Required workflow");
                    return;
                }

                if ($scope.users==null || $scope.users.length==0) {
                    showInfo("Recipient determination is empty");
                    return;
                }

                var isvalid=true;
                for (i = 0; i < $scope.users.length; i++){
                    if ($scope.users[i].UserId == null) {
                        isvalid=false;
                        break;
                    }
                }

                if (!isvalid) {
                    showInfo("There is an undefined recipient");
                    return;
                }

                $scope.saveProduct();
            }

            $scope.isValidForm = function (theForm) {
                var isvalid = theForm.$valid;
                return isvalid;
            };

            $scope.scrollingPage = function (id) {
                $('html, body').animate({
                    scrollTop: $(id).offset().top
                }, 200);
            }

            /*--------------------------------------------------------------
                POPUP WORKFLOW
            --------------------------------------------------------------*/
            $scope.popupWorkflow = function () {

                $scope.GetWorkflows(null, 1, 20);
                if ($scope.model.Status!='00'){
                    showInfo("Workflow data can not be changed.");
                    return;
                }
                $scope.workflows = [];
                $scope.page = "1";
                $scope.criteria = "";
                $scope.paging = [];
                $("#modal_select_workflow").modal("show");
            }
            $scope.setWorkflow = function (idx) {
                $scope.workflow=$scope.workflows[idx];
                $scope.getUsersWorkflow($scope.workflow.Id);
            }

            $scope.getUsersWorkflow = function (id) {
                $getLiteMembers = [];
                $http.post('@Url.Action("GetUsersWorkflow", "rotation")', { id: id }).then(function (response) {
                    if (response.data) {
                        $scope.users = response.data;
                        for(i=0;i<$scope.users.length;i++){
                            $scope.users[i].Documents=[];
                        }
                    }

                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            }

            $scope.GetWorkflows = function (criteria, page, totalItemPerPage) {
                $scope.workflows = [];
                $http.post('@Url.Action("GetWorkflows", "Workflow")', { criteria: criteria, page: page, totalItemPerPage: totalItemPerPage}).then(function (response) {
                    if (response.data) {
                        $scope.workflows = response.data;
                        $scope.index = totalItemPerPage * (page - 1);
                        $scope.CountWorkflows(criteria);
                        $scope.isView = true;
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            }
            $scope.CountWorkflows = function (criteria) {
                $scope.paging = [];
                $http.post('@Url.Action("CountWorkflows","Workflow")', { criteria: criteria }).then(function (response) {
                    if (response.data) {
                        var jumlahData = response.data;
                        var jumlahPage = Math.ceil(jumlahData / $scope.totalItemPerPage);
                        for (var i = 1; i <= jumlahPage; i++) {
                            $scope.paging.push({ value: i, text: i });
                        }
                        $scope.page = "1";
                    }
                }, function (response) {
                        var x = 0;
                })
            }
            $scope.changePageWorkflows = function (criteria, page, totalItemPerPage) {
                $scope.products = [];
                $http.post('@Url.Action("GetWorkflows", "Workflow")', { criteria: criteria, page: page, totalItemPerPage: totalItemPerPage}).then(function (response) {
                    if (response.data) {
                        $scope.workflows = response.data;
                        $scope.index = totalItemPerPage * (page - 1);
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            }
            /*--------------------------------------------------------------
                END POPUP WORKFLOW
            --------------------------------------------------------------*/

            /*--------------------------------------------------------------
                POPUP MEMBER
            --------------------------------------------------------------*/
            $scope.memberIdx=-1;
            $scope.editMember = function (idx) {
                $scope.memberIdx=idx;
                $scope.members = [];
                $scope.page = "1";
                $scope.paging = [];
                $scope.criteria = "";
                $scope.getMembers(null, 1, 20);
                $("#modal_select_member").modal("show");
            }

            $scope.getMembers = function (criteria, page, totalItemPerPage) {
                $scope.page = 1;
                $scope.members = [];
                $http.post('/Member/getMembers', { criteria: criteria, page: page, totalItemPerPage: totalItemPerPage }).then(function (response) {
                    if (response.data) {
                        $scope.members = response.data;
                        $scope.index = totalItemPerPage * (page - 1);
                        $scope.getMembersCountAll(criteria);
                        $scope.isView = true;
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            }
            $scope.getMembersCountAll = function (criteria) {
                $scope.paging = [];
                $http.post('/Member/getMembersCountAll', { criteria: criteria }).then(function (response) {
                    if (response.data) {
                        var jumlahData = response.data;
                        var jumlahPage = Math.ceil(jumlahData / $scope.totalItemPerPage);
                        for (var i = 1; i <= jumlahPage; i++) {
                            $scope.paging.push({ value: i, text: i });
                        }
                        $scope.page = "1";
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            }
            $scope.changePageMember = function (criteria, page, totalItemPerPage) {
                $scope.products = [];
                $http.post('/Member/GetMembers', { criteria: criteria, page: page, totalItemPerPage: totalItemPerPage }).then(function (response) {
                    if (response.data) {
                        $scope.members = response.data;
                        $scope.index = totalItemPerPage * (page - 1);
                    }
                }, function (response) {
                    //error handle\
                    var x = 0;
                });
            }

            $scope.setMember = function (idx) {
                $scope.users[$scope.memberIdx].UserId=$scope.members[idx].Id;
                $scope.users[$scope.memberIdx].Name=$scope.members[idx].Name;
                $scope.users[$scope.memberIdx].Email=$scope.members[idx].Email;
                $scope.users[$scope.memberIdx].Picture = $scope.members[idx].ImageProfile;
                $scope.users[$scope.memberIdx].EncryptedId = $scope.members[idx].EncryptedId;
            }
            $scope.removeMember = function (idx) {
                $scope.users.splice(idx,1);
            }
            $scope.popupMember = function () {
                $scope.memberIdx=-1;
                $scope.members = [];
            }
            /*--------------------------------------------------------------
                END POPUP MEMBER
            --------------------------------------------------------------*/

            $scope.showSubscription = function () {
                $("#modal_select_subscription").modal("show");
            }
            $scope.do_start = function (id) {
                swal({
                    title: "Confirmation",
                    text: "Are you sure to start this rotation with \n" + $scope.SubscriptionList[id].SubscriptionName + " - " + $scope.SubscriptionList[id].CompanyName + " subscription?",
                    type: "warning",
                    showCancelButton: true,
                    closeOnConfirm: false,
                    confirmButtonColor: "#2196F3",
                    showLoaderOnConfirm: true
                },
                function () {
                    setTimeout(function () {
                        $scope.startProduct($scope.SubscriptionList[id].Id);
                    }, 500);

                });
            }
            $scope.startProduct = function (id) {
                var rotationId = $scope.model.Id;
                $http.post("/Rotation/start?rotationId=" + rotationId + "&subscriptionId=" + id,
                    {
                    }).then(function (response) {
                        if (response.data) {
                            if (response.data.status == "OK") {
                                showSuccess("Successful data process.");
      
                            }
                            else if (response.data.status == "ERROR_WORKFLOW_START_NODE_NOT_FOUND")
                                showError("You use an invalid workflow. Make another rotation with valid worfklow.");
                            else if (response.data.status == "ERROR_ROTATION_ALREADY_STARTED") {
                                showError("Rotation already started");
                               
                            }
                            else if (response.data.status == "ADMINISTRATOR_EXCEED_LIMIT")
                                showError("The number of administrators exceed limit, upgrade your subscription");
                            else if (response.data.status == "MEMBER_EXCEED_LIMIT")
                                showError("The number of members in this company exceed limit, upgrade your subscription");
                            else if (response.data.status == "ROTATION_STARTED_EXCEED_LIMIT")
                                showError("The number of rotation using this subscription is exceeding the limit, upgrade your subscription");
                            else if (response.data.status == "NO_ACTIVE_PLAN")
                                showError("this subscription is invalid");
                            else if (response.data.status == "NOT_AUTHORIZED")
                                showError("You are not authorized to use this subscription");
                            else if (response.data.status == "EXPIRED")
                                showError("This subscription is expired. Buy new subscription");
                            else if (response.data.status == "STORAGE_EXCEED_LIMIT")
                                showError("The storage is full, upgrade your subscription");
                            else {
                                
                            }
                        } else
                            showInfo("process data error.");
                    }, function (response) {
                        //error handle\
                        var x = 0;
                        showInfo("process data error.");
                    });
            }

            $scope.getSubscriptionList = function () {
                $http.get('@Url.Action("GetSubscriptionList", "Subscription")')
                    .then(function (response) {
                        if (response.data) {
                            $scope.SubscriptionList = response.data.usages;
                        }
                    });
            }
            ////////////////////////////     TAG MANIPULATION     ////////////////////////////
            $scope.backCount = 0;
            $("#newTag").bind("paste", function (e) {
                // Short pause to wait for paste to complete
                setTimeout(function () {
                    $scope.tagPasteHandler();
                }, 50);
            });
            $scope.changeTag = function (index) {
                $scope.newTag = $scope.model.Tags[index];
                $scope.model.Tags.splice(index, 1);
                $scope.backCount = 0;
                $("#newTag").focus();
                $scope.getDashboardRotationStatus();
            }
            $scope.backToLastTag = function () {
                if ($scope.newTag === "" && $scope.backCount < 1) { $scope.backCount += 1; return;}
                if ($scope.newTag === "" && $scope.backCount > 0) {
                    if ($scope.model.Tags.length < 1) { $scope.backCount = 0; return;}
                    $scope.newTag = $scope.model.Tags[$scope.model.Tags.length - 1];
                    $scope.model.Tags.splice($scope.model.Tags.length - 1, 1);
                    $scope.backCount = 0;
                    $scope.getDashboardRotationStatus();
                }
            }
            $scope.tagPasteHandler = function () {
                var splittedTag = $scope.newTag.split(/[\n,]+/);
                if (splittedTag.length < 1) { return; }
                if (splittedTag.length < 2) { $scope.newTag = splittedTag[0]; return;}
                $scope.newTag = splittedTag[splittedTag.length - 1];
                splittedTag.splice(splittedTag.length - 1, 1);
                splittedTag.forEach(function (item, index) {
                    item = item.replace(",","");
                    var alreadyUsed = false;
                    $scope.model.Tags.some(function (element, i) {
                        if (item === element) {
                            alreadyUsed = true;
                            return;
                        }
                    })
                    if (!alreadyUsed) {
                        $scope.model.Tags.push(item);
                    }
                });
                $scope.backCount = 0;
                $scope.getDashboardRotationStatus();
            }
            $scope.addTagList = function () {
                var splittedTag = $scope.newTag.split(/[\n,]+/);
                if (splittedTag.length < 1) { $scope.newTag = ""; return; }
                if (splittedTag.length < 2) { $scope.newTag = splittedTag[0];}
                var alreadyUsed = false;
                if ($scope.newTag != "" && $scope.newTag != ",") {
                    $scope.newTag = $scope.newTag.replace(",", "");
                    $scope.model.Tags.some(function (element, i) {
                        if ($scope.newTag === element) {
                            alreadyUsed = true;
                            return;
                        }
                    })
                    if (!alreadyUsed) {
                        $scope.model.Tags.push($scope.newTag);
                        $scope.getDashboardRotationStatus();
                    }
                }
                $scope.backCount = 0;
                $scope.newTag = "";
            }
            $scope.removeTag = function (index) {
                $scope.model.Tags.splice(index, 1);
                $scope.backCount = 0;
                $scope.getDashboardRotationStatus();
            }
            ////////////////////////////     END TAG MANIPULATION     ////////////////////////////
        });


        $(function () {
        });


        $(document).ready(function () {
            $('#checkbox1').bootstrapSwitch.defaults.size = 'mini';

            $(window).keydown(function (event) {
                if (event.keyCode == 13) {
                    event.preventDefault();
                    return false;
                }
            });
        });

    </script>

</body>