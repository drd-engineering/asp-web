@using DRD.Domain;
@model JsonLayout
@{
    Layout = null;
}

<link rel="stylesheet" href="/assets/css/demo.css">
<link rel="stylesheet" href="/assets/css/header-user-dropdown.css">
<link href='http://fonts.googleapis.com/css?family=Cookie' rel='stylesheet' type='text/css'>

<link rel="stylesheet" href="/css/main.css">
<link href="https://fonts.googleapis.com/css?family=Roboto:400,300,100,500,700,900" rel="stylesheet"
      type="text/css">
<link href="/assets/css/icons/icomoon/styles.css" rel="stylesheet" type="text/css">
<link href="/assets/css/icons/fontawesome/styles.min.css" rel="stylesheet" type="text/css">
@*<link href="/assets/css/bootstrap.css" rel="stylesheet" type="text/css">*@
<link href="/assets/css/core.css" rel="stylesheet" type="text/css">
<link href="/assets/css/components.css" rel="stylesheet" type="text/css">
<link href="/assets/css/colors.css" rel="stylesheet" type="text/css">

<script type="text/javascript" src="/assets/js/plugins/loaders/pace.min.js"></script>
<script type="text/javascript" src="/assets/js/core/libraries/jquery.min.js"></script>
<script type="text/javascript" src="/assets/js/core/libraries/bootstrap.min.js"></script>
<script type="text/javascript" src="/assets/js/plugins/loaders/blockui.min.js"></script>




@*<script src="~/Scripts/pdf.js/build/pdf.worker.js" type="text/javascript"></script>*@


@*<script src="/assets/js/plugins/buttons/spin.min.js" type="text/javascript"></script>
    <script src="/assets/js/plugins/buttons/ladda.min.js" type="text/javascript"></script>
    <script src="/assets/js/pages/components_buttons.js" type="text/javascript"></script>*@

<script src="/assets/vendors/angular-1.5.5/angular.js"></script>
<script src="/assets/vendors/angular-1.5.5/angular-animate.js"></script>
<script src="/Scripts/ui-bootstrap-tpls-1.3.2.js"></script>

<script src="/assets/vendors/file-upload/ng-file-upload-shim.min.js"></script>
<script src="/assets/vendors/file-upload/ng-file-upload.min.js"></script>
<script src="/assets/vendors/ng_only_number.js"></script>

<script src="/assets/vendors/angular-1.5.5/angular-sanitize.min.js"></script>

@*http://bootstrapswitch.com/*@
@*<link href="/assets/vendors/bootstrap-switch/bootstrap3/bootstrap-switch.css" rel="stylesheet" type="text/css" />
    <script src="/assets/vendors/bootstrap-switch/bootstrap-switch.js"></script>*@

@* demo/doc https://uxsolutions.github.io/bootstrap-datepicker/?markup=input&format=&weekStart=&startDate=&endDate=&startView=0&minViewMode=0&maxViewMode=4&todayBtn=false&clearBtn=false&language=en&orientation=auto&multidate=&multidateSeparator=&autoclose=on&keyboardNavigation=on&forceParse=on#sandbox*@
@*<link id="bsdp-css" href="/assets/vendors/bootstrap-datepicker-1.6.4-dist/css/bootstrap-datepicker3.min.css" rel="stylesheet">
    <script src="/assets/vendors/bootstrap-datepicker-1.6.4-dist/js/bootstrap-datepicker.min.js"></script>*@

<script type="text/javascript" src="/assets/js/plugins/notifications/bootbox.min.js"></script>
<script type="text/javascript" src="/assets/js/plugins/notifications/sweet_alert.min.js"></script>

<script type="text/javascript" src="/assets/js/plugins/forms/styling/uniform.min.js"></script>
<script type="text/javascript" src="/assets/js/plugins/forms/styling/switchery.min.js"></script>
<script type="text/javascript" src="/assets/js/plugins/forms/styling/switch.min.js"></script>

<script src="~/Scripts/xpublic.js"></script>


@*<script src="~/Scripts/require.js"></script>*@

<link rel="stylesheet" href="/Scripts/pdf.js/web/viewer.css">

<!-- This snippet is used in production (included from viewer.html) -->
@*<link rel="resource" type="application/l10n" href="/Scripts/pdf.js/web/locale/locale.properties">*@
<script src="/Scripts/pdf.js/build/pdf.js"></script>
@*<script src="/Scripts/pdf.js/build/pdf.worker.js"></script>*@
<script src="/Scripts/pdf.js/web/viewer.js"></script>
@*<script> var exports = {}; </script>
    <script type="module"  src="~/Scripts/pdf.js.2.0.943/lib/web/annotation_layer_builder.js"></script>*@
<script type="text/javascript" src="~/Scripts/xpdf/MoveAndResizeTool.js"></script>
@*<script src="~/Scripts/flow/svg-path/plain-draggable.min.js"></script>*@
<script src="~/Scripts/flow/scripts/jquery-ui-1.10.4.custom.min.js" type="text/javascript"></script>
<style type="text/css">
    .xannoLayer {
        top: 0px;
        left: 0px;
        width: 100%;
        height: 100%;
        pointer-events: none;
        position: absolute;
        overflow: hidden;
    }

    .svg-selection {
        user-select: none;
        pointer-events: none;
        position: absolute;
        touch-action: none;
    }

    .rect-selection {
        fill: transparent;
        stroke: black;
        // rgba(60,151,254,.5);
        shape-rendering: crispEdges;
        cursor: pointer;
        pointer-events: fill;
    }

    .circle-selection {
        fill: #3c97fe;
        stroke: #fff;
        pointer-events: fill;
    }

    .resize-cursor-topleft {
        cursor: nwse-resize;
    }

    .resize-cursor-topcenter {
        cursor: ns-resize;
    }

    .resize-cursor-topright {
        cursor: nesw-resize;
    }

    .resize-cursor-bottomleft {
        cursor: nesw-resize;
    }

    .resize-cursor-bottomcenter {
        cursor: ns-resize;
    }

    .resize-cursor-bottomright {
        cursor: nwse-resize;
    }

    .resize-cursor-left {
        cursor: ew-resize;
    }

    .resize-cursor-right {
        cursor: ew-resize;
    }


    .text-tool {
        /*user-select: none;
        pointer-events: none;*/
        position: absolute;
        /*touch-action: none;*/
    }

    .signature {
        position: absolute;
        padding: 4px;
        font-size: xx-small;
        font-family: Arial;
        background-color: yellow;
        border: solid;
        border-width: 1px;
        min-width: 150px;
        min-height: 40px;
        cursor: pointer;
        pointer-events: stroke;
    }

    .initial {
        position: absolute;
        padding: 4px;
        font-size: xx-small;
        font-family: Arial;
        background-color: greenyellow;
        border: solid;
        border-width: 1px;
        min-width: 150px;
        min-height: 40px;
        cursor: pointer;
        pointer-events: stroke;
    }

    .stamp {
        position: absolute;
        padding: 4px;
        /*min-width:150px;*/
        min-height: 40px;
        cursor: pointer;
        pointer-events: stroke;
    }
</style>



<body ng-app="drdApp">

    <!-- Page container -->
    <div class="page-container" ng-controller="drdController" id="drdController">


        <!-- Page content -->
        <div class="page-content">


            <!-- Main content -->
            <div class="content-wrapper">
                <!-- Page header -->
                <div class="page-header page-header-default">
                    <div class="page-header-content">
                        <div class="page-title">
                            <h4>@*<i class="icon-arrow-left52 position-left"></i> <span class="text-semibold">Home</span> -*@ Data Dokumen</h4>
                            <span style="font-size:small">Entry data dokumen @*| <a href="/home/productlist">Kembali ke list</a>*@</span>
                        </div>

                    </div>

                </div>
                <!-- /page header -->
                <!-- Horizontal form options -->
                <!-- Content area -->
                <div class="content" @*style="display:none"*@>

                    <!-- Basic layout-->
                    <div class="panel panel-flat">
                        <div style="color:white">{{debugText}}</div>
                        <div class="panel-body" id="panel-body" style="height:500px;padding:0px;background-color:grey">
                            
                            <ng-include src="'/Include/PdfViewer'" onload="finishLoading()"></ng-include>

                            <table id="signature-xx" class="signature" style="top:4px;left:4px;width:150px;height:40px;display:none;" onclick="annoSelector('signature-xx')">
                                <tr style="font-size:6pt;vertical-align:top">
                                    <td style="width:20px" rowspan="2">
                                        <img src="/Images/Member/icon_user.png" width="20" align="top" />
                                    </td>
                                    <td style="height:10px;"><b>Signature</b></td>
                                </tr>
                                <tr style="font-size:6pt;vertical-align:top">
                                    <td>Approver</td>
                                </tr>
                            </table>
                            <table id="initial-xx" class="initial" style="top:4px;left:4px;width:150px;height:40px;display:none;" onclick="annoSelector('initial-xx')">
                                <tr style="font-size:6pt;vertical-align:top">
                                    <td style="width:20px" rowspan="2">
                                        <img src="/Images/Member/icon_user.png" width="20" align="top" />
                                    </td>
                                    <td style="height:10px"><b>Initial</b></td>
                                </tr>
                                <tr style="font-size:6pt;vertical-align:top">
                                    <td>Approver</td>
                                </tr>
                            </table>

                            <svg class="svg-selection-xx" id="svg-selection-xx" style="left: 0px; top: 0px; width: 64px; height: 55px;display:none;z-index:1000;">
                                <rect class="rect-selection-xx" id="rect-selection-xx" x="4" y="4" style="width:50px; height:41px; stroke-width: 2; background-color:black;opacity:0.2"></rect>
                                <circle cx="4" cy="4" r="4" stroke-width="1" class="circle-selection resize-cursor-topleft" title="Resize top left"></circle>
                                <circle cx="32" cy="4" r="4" stroke-width="1" class="circle-selection resize-cursor-topcenter" title="Resize top"></circle>
                                <circle cx="57" cy="4" r="4" stroke-width="1" class="circle-selection resize-cursor-topright" title="Resize top right"></circle>
                                <circle cx="57" cy="27.5" r="4" stroke-width="1" class="circle-selection resize-cursor-right" title="Resize right"></circle>
                                <circle cx="57" cy="48" r="4" stroke-width="1" class="circle-selection resize-cursor-bottomright" title="Resize bottom right"></circle>
                                <circle cx="32" cy="48" r="4" stroke-width="1" class="circle-selection resize-cursor-bottomcenter" title="Resize bottom"></circle>
                                <circle cx="4" cy="48" r="4" stroke-width="1" class="circle-selection resize-cursor-bottomleft" title="Resize bottom left"></circle>
                                <circle cx="4" cy="27.5" r="4" stroke-width="1" class="circle-selection resize-cursor-left" title="Resize left"></circle>

                            </svg>

                        </div>
                    </div>
                    <!-- /basic layout -->
                </div>
                <!-- /vertical form options -->
            </div>
            <!-- /Main content -->
        </div>
        <!-- /Page content -->
    </div>


    <!-- /Page container -->

    <script type="text/javascript">


        var myApp = angular.module('drdApp', ['ngAnimate', 'ui.bootstrap', 'ngSanitize', 'ngFileUpload', 'ngOnlyNumberApp'])


        myApp.controller("drdController", function ($scope, $sce, Upload, $location, $http, $filter) {

            /*--------------------------------------------------------------
            INIT DATA
            --------------------------------------------------------------*/
            var annotationType = {
                POINTER: 0,
                PEN: 1,
                HIGHLIGHTER: 2,
                TEXT: 3,
                SIGNATURE: 4,
                INITIAL: 5,
                STAMP: 6
            };


            var annoLayerClass = "xannoLayer";
            var editTextClass = "text-tool";
            var signatureClass = "signature";
            var initialClass = "initial";
            var stampClass = "stamp";
            var penClass = "pen";
            var svgPadding = 4.;
            var toolType = 0;
            var clickedPage = 1;

            var strokeWidth = 5;
            var bufferSize = 4;

            var svgElement;
            var rect = {};
            var path = null;
            var strPath;
            var colorDefault = 'red';
            var colorPen = 'red';
            var colorHighlight = 'orange';
            var textColor = 'red';
            var opacityColor = "1";
            var lineStraight = false;
            var buffer = []; 
            var svgNo = 0;
            var childNo = 0;
            var selectedNodeId;
            var lastMouseX = 0;
            var lastMouseY = 0;
            var selectedMouseDown;
            var isresize = false;
            var isselector = false;
            var penWidth = 4;
            var highlighterWidth = 12;
            var dropedToCenter = true;

            $scope.debugText = "X";

            var annoItem = { SvgId: '', Page: 0, AnnotateType: '', LeftPos: 0, TopPos: 0, WidthPos: 0, HeightPos: 0, Color: '', BackColor: '', Data: '', Data2: '', Scale: 0, StrokeWidth: 4, Opacity: 1, Flag:0, CreatorId: null };
            $scope.annoItems = [];
            var tmpPenAnnoItem = {};

            angular.element(document).ready(function () {

                $(document).on('mousedown', ".xannoLayer", xannoLayerMouseDown);
            });

            function initValues() {
            }

            $scope.initData = function () {
            }

            //$scope.addAnnoItem = function (page, annotateType, leftPos, topPos, widthPos, heightPos, color, backColor, data, scale, opacity) {
            //    var item = {};

            //    item.SvgId = "svg" + svgNo;
            //    item.Page = page;
            //    item.AnnotateType = annotateType;
            //    item.LeftPos = leftPos;
            //    item.TopPos = topPos;
            //    item.WidthPos = widthPos;
            //    item.HeightPos = heightPos;
            //    item.Color = color;
            //    item.BackColor = backColor;
            //    item.Data = data;
            //    item.Scale = scale;
            //    item.StrokeWidth = strokeWidth;
            //    item.Opacity = opacity;
            //    $scope.annoItems.push(item);
            //    //svgNo++;
            //}
            $scope.addAnnoItem = function (item) {
                //var tmp = angular.copy(annoItem);
                item.SvgId = "svg" + svgNo;
                //tmp.Page = item.Page;
                //tmp.AnnotateType = item.AnnotateType;
                //tmp.LeftPos = item.LeftPos;
                //tmp.TopPos = item.TopPos;
                //tmp.WidthPos = item.WidthPos;
                //tmp.HeightPos = item.HeightPos;
                //tmp.Color = item.Color;
                //tmp.BackColor = item.BackColor;
                //tmp.Data = item.Data;
                //tmp.Data2 = item.Data2;
                //tmp.Scale = itemScale;
                //tmp.StrokeWidth = item.StrokeWidth;
                //tmp.Opacity = item.Opacity;
                //tmp.Flag = item.Flag;
                //tmp.CreatorId = item.CreatorId;
                $scope.annoItems.push(item);
                //svgNo++;
            }
            $scope.removeAnnoItem = function (itemId) {
                var svgId = $("#" + itemId).parent().id;
                $("#" + svgId).remove();
                for (i = $scope.annoItems.length - 1; i >= 0; i--) {
                    if ($scope.annoItems[i].SvgId == svgId) {
                        $scope.annoItems.splice(i, 1);
                    }
                }
            }
            $scope.findAnnoItem = function (svgId) {
                for (i = 0; i < $scope.annoItems.length ; i++) {
                    if ($scope.annoItems[i].SvgId == svgId) {
                        return i;
                    }
                }
                return -1;
            }

            $scope.addAnnoSignature = function (dataIdx) { //page, left, top) {
                var item = $scope.annoItems[dataIdx];

                var annolayer = createAnnoLayer(item.Page);
                var svg = '<div id="svg' + svgNo + '" style="position:absolute; top:0px; left:0px; width:100%; height:100%;"></div>';
                annolayer.append(svg);
                svgElement = document.getElementById("svg" + svgNo);

                enableAnnoLayer(false);

                var html = document.getElementById(signatureClass + "-xx").outerHTML;
                html = html.replace(/-xx-/g, childNo);
                html = html.replace(/-xx/g, "-" + childNo);
                var field = $('#' + svgElement.id).append(html).find('.' + signatureClass);
                if (item.WidthPos != null)
                    field.css({ 'width': item.WidthPos + 'px' });
                if (item.HeightPos != null)
                    field.css({ 'height': item.HeightPos + 'px' });

                field.show();

                signatureArrange(signatureClass, item.LeftPos, item.TopPos);
                childNo++;
                svgNo++;
            }
            $scope.addAnnoInitial = function (dataIdx) { //page, left, top) {
                var item = $scope.annoItems[dataIdx];

                var annolayer = createAnnoLayer(item.Page);
                var svg = '<div id="svg' + svgNo + '" style="position:absolute; top:0px; left:0px; width:100%; height:100%;"></div>';
                annolayer.append(svg);
                svgElement = document.getElementById("svg" + svgNo);

                enableAnnoLayer(false);

                var html = document.getElementById(initialClass + "-xx").outerHTML;
                html = html.replace(/-xx-/g, childNo);
                html = html.replace(/-xx/g, "-" + childNo);
                var field = $('#' + svgElement.id).append(html).find('.' + initialClass);
                if (item.WidthPos != null)
                    field.css({ 'width': item.WidthPos + 'px' });
                if (item.HeightPos != null)
                    field.css({ 'height': item.HeightPos + 'px' });
                field.show();

                signatureArrange(initialClass, item.LeftPos, item.TopPos);
                childNo++;
                svgNo++;
            }
            $scope.addAnnoStamp = function (dataIdx) { //page, left, top) {
                var item = $scope.annoItems[dataIdx];

                var annolayer = createAnnoLayer(item.Page);
                var svg = '<div id="svg' + svgNo + '" style="position:absolute; top:0px; left:0px; width:100%; height:100%;"></div>';
                annolayer.append(svg);
                svgElement = document.getElementById("svg" + svgNo);
                enableAnnoLayer(false);
                var text = '<img class="' + stampClass + '" id="' + stampClass + childNo + '" src="/images/stamp/empty.png" style="left:0px; top:0px; height:100px; width:200px; padding: ' + svgPadding + 'px;" onclick="annoSelector(' + "'" + stampClass + childNo + "'" + ')"/>';
                var field = $('#' + svgElement.id).append(text).find('.' + stampClass);

                if (item.WidthPos != null)
                    field.css({ 'width': item.WidthPos + 'px' });
                if (item.HeightPos != null)
                    field.css({ 'height': item.HeightPos + 'px' });
                field.show();

                signatureArrange(stampClass, item.LeftPos, item.TopPos);
                childNo++;
                svgNo++;
            }
            $scope.addAnnoText = function (dataIdx) { //page, left, top) {
                var item = $scope.annoItems[dataIdx];

                var annolayer = createAnnoLayer(item.Page);
                var svg = '<div id="svg' + svgNo + '" style="position:absolute; top:0px; left:0px; width:100%; height:100%;"></div>';
                annolayer.append(svg);
                svgElement = document.getElementById("svg" + svgNo);

                enableAnnoLayer(false);

                var html = '<div class="' + editTextClass + '" id="' + editTextClass + childNo + '" contenteditable="true" spellcheck="false" style="left:0px; top:0px; padding: ' + svgPadding + 'px;color:' + textColor + ';pointer-events:stroke;" onclick="annoSelector(' + "'" + editTextClass + childNo + "'" + ')">' + (item.Data == null ? '' : item.Data) + '</div>';
                var field = $('#' + svgElement.id).append(html);

                document.getElementById(editTextClass + childNo).addEventListener("input", onEditText, false);
                field.css({ 'left': item.LeftPos + 'px' });
                field.css({ 'top': item.TopPos + 'px' });
                if (item.WidthPos != null)
                    field.css({ 'width': item.WidthPos + 'px' });
                if (item.HeightPos != null)
                    field.css({ 'height': item.HeightPos + 'px' });
                var defFlag = dropedToCenter;
                dropedToCenter = false;
                signatureArrange(editTextClass, item.LeftPos, item.TopPos);
                dropedToCenter = defFlag;
                childNo++;
                svgNo++;
            }
            $scope.addAnnoPen = function (dataIdx) {
                var item = $scope.annoItems[dataIdx];

                var annolayer = createAnnoLayer(item.Page);
                var svg = '<svg id="svg' + svgNo + '" class="svg" style="position:absolute; top:0px; left:0px;width:100%;height:100%"></svg>';
                annolayer.append(svg);
                svgElement = document.getElementById("svg" + svgNo);

                path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                path.setAttribute("fill", "none");
                path.setAttribute("stroke", item.Color);
                path.setAttribute("stroke-width", item.StrokeWidth);
                path.setAttribute("style", "cursor:pointer;pointer-events:stroke;opacity:" + item.Opacity);
                //
                path.setAttribute('d', item.Data);
                path.setAttribute('id', penClass + childNo);
                path.setAttribute('class', penClass);
                path.setAttribute('onclick', "annoSelector(" + "'" + penClass + childNo + "'" + ")");
                $('#' + svgElement.id).append(path);
                var t = item.TopPos - svgPadding;
                var l = item.LeftPos - svgPadding;
                var w = item.WidthPos + (svgPadding * 2);
                var h = item.HeightPos + (svgPadding * 2);
                $('#' + svgElement.id).css({ 'top': t + 'px' });
                $('#' + svgElement.id).css({ 'left': l + 'px' });
                $('#' + svgElement.id).css({ 'width': w + 'px' });
                $('#' + svgElement.id).css({ 'height': h + 'px' });
                $('#' + svgElement.id).css({ 'pointer-events': 'none' });
                $('#' + svgElement.id)[0].setAttribute('preserveAspectRatio', "none");
                $('#' + svgElement.id)[0].setAttribute('viewBox', item.Data2);

                childNo++;
                svgNo++;
            }

            $scope.bindAnnotation = function () {
                svgNo = 0;
                childNo = 0;
                dropedToCenter = false;
                for (i = 0; i < $scope.annoItems.length; i++) {
                    var item = $scope.annoItems[i];
                    if (item.AnnotateType == annotationType.PEN) {
                        $scope.addAnnoPen(i);
                    } else if (item.AnnotateType == annotationType.SIGNATURE) {
                        $scope.addAnnoSignature(i);
                    } else if (item.AnnotateType == annotationType.INITIAL) {
                        $scope.addAnnoInitial(i);
                    } else if (item.AnnotateType == annotationType.STAMP) {
                        $scope.addAnnoStamp(i);
                    } else if (item.AnnotateType == annotationType.TEXT) {
                        $scope.addAnnoText(i);
                    }
                }
                dropedToCenter = true;
            }

            $scope.clickPointer = function () {
                toolType = annotationType.POINTER;
                enableAnnoLayer(false);
            }
            $scope.clickReload = function () {
                $scope.bindAnnotation();
            }

            var xannoLayerMouseDown = function (e) {
                var page = parseInt(e.target.getAttribute('page-no'));
                if (!$.isNumeric(page)) {
                    toolType = annotationType.POINTER;
                    enableAnnoLayer(false);
                    return;
                }
                if (toolType == annotationType.PEN)
                    penMouseDown(e, page);
                else if (toolType == annotationType.HIGHLIGHTER)
                    penMouseDown(e, page);
                else if (toolType == annotationType.TEXT)
                    textMouseClick(e, page);
                else if (toolType == annotationType.SIGNATURE)
                    signatureMouseClick(e, page);
                else if (toolType == annotationType.INITIAL)
                    initialMouseClick(e, page);
                else if (toolType == annotationType.STAMP)
                    stampMouseClick(e, page);
            }

            $scope.clickPen = function (isStraight) {
                toolType = annotationType.PEN;
                strokeWidth = penWidth;
                colorDefault = colorPen;
                opacityColor = "1";
                lineStraight = isStraight;
                enableAnnoLayer(true);
            }
            $scope.clickHighlight = function (isStraight) {
                toolType = annotationType.HIGHLIGHTER;
                strokeWidth = highlighterWidth;
                colorDefault = colorHighlight;
                opacityColor = "0.4";
                lineStraight = isStraight;
                enableAnnoLayer(true);
            }
            $scope.clickText = function () {
                toolType = annotationType.TEXT;
                enableAnnoLayer(true);
            }
            $scope.clickSignature = function () {
                toolType = annotationType.SIGNATURE;
                enableAnnoLayer(true);
            }
            $scope.clickInitial = function () {
                toolType = annotationType.INITIAL;
                enableAnnoLayer(true);
            }
            $scope.clickStamp = function () {
                toolType = annotationType.STAMP;
                enableAnnoLayer(true);
            }

            $scope.annoSelector = function (id) {
                selectedNodeId = id;

                if ($.find('.svg-selection').length == 0) {
                    var html = document.getElementById("svg-selection-xx").outerHTML;
                    html = html.replace(/-xx/g, "");
                    $('#panel-body').append(html);
                }

                var parent = $("#" + selectedNodeId).parent()[0].id
                svgElement = document.getElementById(parent);

                //WrapWithMoveAndResizeTool("#" + parent);
                $scope.annoSelectorCreateEvent();
                $scope.repositionSelector(id);

                if (id.startsWith(editTextClass)) {
                    $('#' + id).blur();
                }

                dragElement(document.getElementById("rect-selection"));

            }
            $scope.repositionSelectorPath = function () {
                var tagrect = $('.svg-selection > rect');

                var rectattr = tagrect[0].getBoundingClientRect();
                w = parseFloat(rectattr.width) + svgPadding;
                h = parseFloat(rectattr.height) + svgPadding

                $('.resize-cursor-topcenter').attr('cx', (w / 2) + (svgPadding / 2));
                $('.resize-cursor-topright').attr('cx', w);
                $('.resize-cursor-right').attr('cx', w);
                $('.resize-cursor-right').attr('cy', (h / 2) + (svgPadding / 2));
                $('.resize-cursor-left').attr('cy', (h / 2) + (svgPadding / 2));

                $('.resize-cursor-bottomright').attr('cx', w);
                $('.resize-cursor-bottomright').attr('cy', h);

                $('.resize-cursor-bottomcenter').attr('cx', (w / 2) + (svgPadding / 2));
                $('.resize-cursor-bottomcenter').attr('cy', h);

                $('.resize-cursor-bottomleft').attr('cy', h);
            }
            $scope.repositionSelector = function (id) {
                var node = $('#' + id)[0];
                var parent = node.parentNode.parentNode;
                var sel = $('.svg-selection').prependTo('#' + parent.id);
                var selector = $('.svg-selection').show();

                var svg = document.getElementById(id);
                svg = svg.parentNode;
                var rect = svg.getBoundingClientRect();

                var w = rect.width + (svgPadding * 2);
                var h = rect.height + (svgPadding * 2);

                selector.css({ "width": w + 'px' })
                selector.css({ "height": h + 'px' });

                var top = svg.offsetTop;
                var left = svg.offsetLeft;
                if (left == undefined)
                    left = pos2Float($('#' + svg.id).css('left'));
                if (top == undefined)
                    top = pos2Float($('#' + svg.id).css('top'));

                selector.css({ 'top': top - svgPadding + 'px' });
                selector.css({ 'left': left - svgPadding + 'px' });

                var tagrect = $('.svg-selection > rect');
                tagrect.css({ 'width': w - (svgPadding * 2) + "px" });
                tagrect.css({ 'height': h - (svgPadding * 2) + "px" });

                $scope.repositionSelectorPath();

            }
            $scope.annoSelectorCreateEvent = function () {
                $(".circle-selection").bind("mousedown", selectorMouseDown);
                $(document).bind("mousemove", selectorMouseMove);
                $(document).bind("mouseup", selectorMouseUp);
                $(document).bind("mousedown", documentMouseDown);
                $('.rect-selection').bind("dblclick", selectionDblClick);
            }
            $scope.annoSelectorRemoveEvent = function () {
                $(".circle-selection").unbind("mousedown", selectorMouseDown);
                $(document).unbind("mousemove", selectorMouseMove);
                $(document).unbind("mouseup", selectorMouseUp);
                $(document).unbind("mousedown", documentMouseDown);
                $('.rect-selection').unbind("dblclick", selectionDblClick);
            }

            var pos2Float = function (pos) {
                return parseFloat(pos.replace('px', ''))
            }
            var resizeSelector = function (id, w, h, x, y) {
                var selected = $('#' + id);
                var svgselection = $('#svg-selection');
                var rectselection = $('#rect-selection');

                var minW = selected.css('min-width');
                var minH = selected.css('min-height');
                if (minW != undefined && pos2Float(minW) > 0)
                    minW = pos2Float(minW);
                else
                    minW = 10;
                if (minH != undefined && pos2Float(minH) > 0)
                    minH = pos2Float(minH);
                else
                    minH = 10;

                var posX = x;
                var posY = y;
                var pad = (svgPadding * 2);

                var elmstyle = svgselection[0].style;
                var rectsvg =
                    {
                        left: pos2Float(elmstyle.left),
                        top: pos2Float(elmstyle.top),
                        width: pos2Float(elmstyle.width),
                        height: pos2Float(elmstyle.height),
                    };

                if (x != null && minW <= rectsvg.width + w - (pad * 2)) {
                    svgselection.css({ "left": (rectsvg.left + x) + 'px' });
                    //console.log('rectsvg x: ' + rectsvg.left + ' ' + x + ' = ' + (rectsvg.left+x));
                }
                if (y != null && minH <= rectsvg.height + h - (pad * 2)) {
                    svgselection.css({ "top": (rectsvg.top + y) + 'px' });
                }

                if (w != null && minW <= rectsvg.width + w - (pad * 2)) {
                    svgselection.css({ "width": (rectsvg.width + w) + 'px' });
                    rectselection.css({ "width": (rectsvg.width + w - pad) + 'px' });
                }
                if (h != null && minH <= rectsvg.height + h - (pad * 2)) {
                    svgselection.css({ "height": (rectsvg.height + h) + 'px' });
                    rectselection.css({ "height": (rectsvg.height + h - pad) + 'px' });
                    //console.log('rectsvg h: ' + rectsvg.height + ' ' + h + ' = ' + (rectsvg.height + h));
                }
                $scope.repositionSelectorPath();
                resizeElement(id);
            }
            var resizeElement = function (id) {
                var svgselection = $('#svg-selection');
                var elmstyle = svgselection[0].style;
                var rectsvg =
                    {
                        left: pos2Float(elmstyle.left),
                        top: pos2Float(elmstyle.top),
                        width: pos2Float(elmstyle.width),
                        height: pos2Float(elmstyle.height),
                    };

                var pad = (svgPadding * 4);
                var selected = $('#' + id);
                var parent = $('#' + selected[0].parentNode.id);

                parent.css({ "left": (rectsvg.left + svgPadding) + 'px' });
                parent.css({ "top": (rectsvg.top + svgPadding) + 'px' });
                parent.css({ "width": (rectsvg.width - (svgPadding * 2)) + 'px' });
                parent.css({ "height": (rectsvg.height - (svgPadding * 2)) + 'px' });

                selected.css({ "width": (rectsvg.width - pad) + 'px' });
                selected.css({ "height": (rectsvg.height - pad) + 'px' });

                var i = $scope.findAnnoItem(selected[0].parentNode.id);
                var item = $scope.annoItems[i];
                item.LeftPos = rectsvg.left + (svgPadding * 2);
                item.TopPos = rectsvg.top + (svgPadding * 2);;
                item.WidthPos = rectsvg.width - pad;
                item.HeightPos = rectsvg.height - pad;

                $scope.debugText = "L:" + item.LeftPos + " T:" + item.TopPos + " W:" + item.WidthPos + " H:" + item.HeightPos;
            }

            var selectorMouseDown = function (event) {
                isselector = true;
                selectedMouseDown = event.target.classList[1];
                isresize = true;

                var selected = $('#' + selectedNodeId);

                console.log(selected[0].offsetHeight);
                lastMouseX = event.clientX;
                lastMouseY = event.clientY;
            }
            var selectorMouseMove = function (event) {
                if (!isresize) return;
                var currMouseX = event.clientX;
                var currMouseY = event.clientY;

                var deltaX = currMouseX - lastMouseX;
                var deltaY = currMouseY - lastMouseY;

                //this.applyMouseMoveAction(deltaX, deltaY);

                lastMouseX = event.pageX;
                lastMouseY = event.pageY;

                //var selected = $('#' + selectedNodeId);
                var selected = $('#svg-selection');
                //var selectedNodeId = 'svg-selection';
                if (selectedMouseDown == 'resize-cursor-topleft') {
                    resizeSelector(selectedNodeId, -deltaX, -deltaY, deltaX, deltaY);
                } else if (selectedMouseDown == 'resize-cursor-topcenter') {
                    resizeSelector(selectedNodeId, null, -deltaY, null, deltaY);
                } if (selectedMouseDown == 'resize-cursor-topright') {
                    resizeSelector(selectedNodeId, deltaX, -deltaY, null, deltaY);
                } if (selectedMouseDown == 'resize-cursor-right') {
                    resizeSelector(selectedNodeId, deltaX, null, null, null);
                } if (selectedMouseDown == 'resize-cursor-bottomright') {
                    resizeSelector(selectedNodeId, deltaX, deltaY, null, null);
                } if (selectedMouseDown == 'resize-cursor-bottomcenter') {
                    resizeSelector(selectedNodeId, null, deltaY, null, null);
                } if (selectedMouseDown == 'resize-cursor-bottomleft') {
                    resizeSelector(selectedNodeId, -deltaX, deltaY, deltaX, null);
                } if (selectedMouseDown == 'resize-cursor-left') {
                    resizeSelector(selectedNodeId, -deltaX, null, deltaX, null);
                }
                console.log(deltaX + ' ' + deltaY);

                //$scope.repositionSelector(selectedNodeId);
            }
            var selectorMouseUp = function (event) {
                isresize = false;
                isselector = false;
            }
            var documentMouseDown = function (event) {
                if (isselector || event.target.classList[0] == 'rect-selection') return;
                $scope.annoSelectorRemoveEvent();
                $('.svg-selection').hide();
                isresize = false;
            }

            var createAnnoLayers = function (numPages) {
                for (i = 1; i <= numPages; i++) {
                    createAnnoLayer(i);
                }
            }
            var createAnnoLayer = function (page) {
                var layer = document.getElementById(annoLayerClass + page);
                if (layer == null) {
                    if (document.getElementById('page' + page) == null)
                        return null;

                    var canvas = $('#page' + page);
                    var canvasParent = canvas.parent().parent();
                    var textLayer = canvasParent;//.find('.textLayer');
                    textLayer.append("<div id='" + annoLayerClass + page + "' class='" + annoLayerClass + "'></div>");
                }
                return $('#' + annoLayerClass + page);
            }
            var enableAnnoLayer = function (isEnabled) {

                var event = 'stroke';
                if (!isEnabled)
                    event = 'none';

                $('.' + annoLayerClass).css({ 'pointer-events': event });
            }

            var textMouseClick = function (e, page) {
                var item = angular.copy(annoItem);
                item.Page = page;
                item.AnnotateType = annotationType.TEXT;
                item.TopPos = e.offsetX;
                item.LeftPos = e.offsetY;
                item.Scale = 1;
                $scope.addAnnoItem(item);
                toolType = annotationType.POINTER;
                $scope.addAnnoText(svgNo);
                var text = document.getElementById(editTextClass + (childNo - 1));
                setTimeout(function () {
                    text.focus();
                }, 0);
            };
            var signatureMouseClick = function (e, page) {
                var item = angular.copy(annoItem);
                item.Page = page;
                item.AnnotateType = annotationType.SIGNATURE;
                item.TopPos = e.offsetX;
                item.LeftPos = e.offsetY;
                item.Scale = 1;
                $scope.addAnnoItem(item);
                toolType = annotationType.POINTER;
                $scope.addAnnoSignature(svgNo);
                $scope.annoSelector(signatureClass + '-' + (childNo - 1));
            }
            var itemArrange = function (dataIdx) {
                var item = $scope.annoItems[dataIdx];
                if (item.WidthPos!=null)
                    $('#' + svgElement.id).css({ "width": item.WidthPos + 'px' })
                if (item.HeightPos != null)
                    $('#' + svgElement.id).css({ "height": item.HeightPos + 'px' });
                $('#' + svgElement.id).css({ 'top': item.TopPos + 'px' });
                $('#' + svgElement.id).css({ 'left': item.LeftPos + 'px' });
            }
            var signatureArrange = function (theClass, offsetX, offsetY) {
                var field = $('#' + svgElement.id).find('.' + theClass);
                var rect = {
                    top: field[0].offsetTop,
                    left: field[0].offsetLeft,
                    width: field[0].offsetWidth,
                    height: field[0].offsetHeight,
                };
                var valCenterH = (rect.height / 2);
                var valCenterW = (rect.width / 2);
                if (!dropedToCenter) {
                    valCenterH = valCenterW = 0;
                }

                $('#' + svgElement.id).css({ "width": rect.width + (svgPadding * 2) + 'px' })
                $('#' + svgElement.id).css({ "height": rect.height + (svgPadding * 2) + 'px' });
                if (offsetY != null)
                    $('#' + svgElement.id).css({ 'top': offsetY - svgPadding - valCenterH + 'px' });
                if (offsetX != null)
                    $('#' + svgElement.id).css({ 'left': offsetX - svgPadding - valCenterW + 'px' });
                $('#' + svgElement.id).css({ 'pointer-events': 'none' });
            }
            var positionArrange = function (theClass, offsetX, offsetY) {
                var field = $('#' + svgElement.id).find('.' + theClass);
                //var rect = field[0].getClientRects();
                if (field[0].offsetTop == undefined) {
                    rect = {
                        top: field[0].clientTop,
                        left: field[0].clientLeft,
                        width: field[0].clientWidth,
                        height: field[0].clientHeight,
                    };
                } else {
                    rect = {
                        top: field[0].offsetTop,
                        left: field[0].offsetLeft,
                        width: field[0].offsetWidth,
                        height: field[0].offsetHeight,
                    };
                }

                $('#' + svgElement.id).css({ "width": rect.width + (svgPadding * 2) + 'px' })
                $('#' + svgElement.id).css({ "height": rect.height + (svgPadding * 2) + 'px' });
                if (offsetY != null)
                    $('#' + svgElement.id).css({ 'top': offsetY + 'px' });
                if (offsetX != null)
                    $('#' + svgElement.id).css({ 'left': offsetX + 'px' });
            }
            var initialMouseClick = function (e, page) {
                var item = angular.copy(annoItem);
                item.Page = page;
                item.AnnotateType = annotationType.INITIAL;
                item.TopPos = e.offsetX;
                item.LeftPos = e.offsetY;
                item.Scale = 1;
                $scope.addAnnoItem(item);
                toolType = annotationType.POINTER;
                $scope.addAnnoInitial(svgNo);
                $scope.annoSelector(initialClass + '-' + (childNo - 1));
            }
            var stampMouseClick = function (e, page) {
                var item = angular.copy(annoItem);
                item.Page = page;
                item.AnnotateType = annotationType.STAMP;
                item.TopPos = e.offsetX;
                item.LeftPos = e.offsetY;
                item.Scale = 1;
                $scope.addAnnoItem(item);
                toolType = annotationType.POINTER;
                $scope.addAnnoStamp(svgNo);
                $scope.annoSelector(stampClass + (childNo - 1));
            }
            var onEditText = function (e) {
                var svgId = e.target.parentNode.id;
                var text = e.target.innerText;
                var iItem = $scope.findAnnoItem(svgId);
                if (iItem != -1)
                    $scope.annoItems[iItem].Data = text;

                var w = e.path[0].clientWidth;
                var h = e.path[0].clientHeight;

                $('#' + e.path[1].id).css({ "width": (w + 10) + 'px' })
                $('#' + e.path[1].id).css({ "height": h + 'px' });

                $scope.annoSelectorRemoveEvent();
                $('.svg-selection').hide();
                isresize = false;
            }
            var selectionDblClick = function (e) {
                if (selectedNodeId.startsWith(editTextClass)) {
                    $scope.annoSelectorRemoveEvent();
                    $('.svg-selection').hide();
                    isresize = false;
                    $('#' + selectedNodeId).focus();
                } else if (selectedNodeId.startsWith(signatureClass)) {
                    alert(selectedNodeId)
                } else if (selectedNodeId.startsWith(initialClass)) {
                    alert(selectedNodeId)
                } else if (selectedNodeId.startsWith(stampClass)) {
                    alert(selectedNodeId)
                }

            }

            var penMouseDown = function (e, page) {
                var annolayer = createAnnoLayer(page);
                var svg = '<svg id="svg' + svgNo + '" class="svg" style="position:absolute; top:0px; left:0px;width:100%;height:100%"></svg>';
                annolayer.append(svg);
                svgElement = document.getElementById("svg" + svgNo);

                svgElement.addEventListener("mousemove", penMouseMove);
                svgElement.addEventListener("mouseup", penMouseUp);

                path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                path.setAttribute("fill", "none");
                path.setAttribute("stroke", colorDefault);
                path.setAttribute("stroke-width", strokeWidth);
                path.setAttribute("style", "cursor:pointer;pointer-events:stroke;opacity:" + opacityColor);

                buffer = [];
                var pt = {};
                pt.x = e.offsetX;
                pt.y = e.offsetY;
                appendToBuffer(pt);
                strPath = "M" + pt.x + " " + pt.y;
                path.setAttribute("d", strPath);
                svgElement.appendChild(path);

                tmpPenAnnoItem.SvgId = "svg" + svgNo;
                tmpPenAnnoItem.Page = page;
                //tmpPenAnnoItem.AnnotateType = annotateType.PEN;
                //item.LeftPos = leftPos;
                //item.TopPos = topPos;
                //item.WidthPos = widthPos;
                //item.HeightPos = heightPos;
                tmpPenAnnoItem.Color = colorDefault;
                //tmpPenAnnoItem.BackColor = backColor;
                //item.Data = data;
                //item.Scale = scale;
                tmpPenAnnoItem.StrokeWidth = strokeWidth;
                tmpPenAnnoItem.Opacity = opacityColor;
            };
            var penMouseMove = function (e) {
                if (toolType == annotationType.POINTER)
                    return;
                if (path) {
                    var pt = {};
                    pt.x = e.offsetX;
                    pt.y = e.offsetY;
                    appendToBuffer(pt);
                    updateSvgPath();
                }
            };
            var penMouseUp = function () {
                enableAnnoLayer(false);
                svgElement.removeEventListener("mousemove", penMouseMove, true);
                svgElement.removeEventListener("mouseup", penMouseUp, true);

                if (toolType == annotationType.POINTER)
                    return;
                toolType = annotationType.POINTER;
                if (path) {
                    var rc = svgElement.getBoundingClientRect();
                    var rect = path.getBoundingClientRect();
                    var pad = svgPadding * 2;

                    var d = path.attributes['d'].value;
                    var ds = d.split(' ');
                    var newd = "";
                    var xy = 0;
                    for (i = 0; i < ds.length; i++) {
                        var digit1 = "";
                        var value = 0;
                        if ($.isNumeric(ds[i]))
                            value = parseFloat(ds[i]);
                        else {
                            digit1 = ds[i].substring(0, 1);
                            value = parseFloat(ds[i].substring(1));
                        }

                        data = digit1 + ((xy != 0 ? value - (rect.top - rc.top) : value - (rect.left - rc.left)) + pad) + " ";
                        newd += data;
                        if (xy == 0) xy = 1; else xy = 0;
                    }
                    newd += "XX";
                    newd = newd.replace(' XX', '');
                    path.setAttribute('d', newd);
                    path.setAttribute('id', penClass + childNo);
                    path.setAttribute('class', penClass);
                    path.setAttribute('onclick', "annoSelector(" + "'" + penClass + childNo + "'" + ")");

                    var t = rect.top - rc.top - pad;
                    var l = rect.left - rc.left - pad;
                    var w = rect.width + (pad * 2);
                    var h = rect.height + (pad * 2);
                    
                    $('#' + svgElement.id).css({ 'top': t + 'px' });
                    $('#' + svgElement.id).css({ 'left': l + 'px' });
                    $('#' + svgElement.id).css({ 'width': w + 'px' });
                    $('#' + svgElement.id).css({ 'height': h + 'px' });
                    $('#' + svgElement.id).css({ 'pointer-events': 'none' });
                    $('#' + svgElement.id)[0].setAttribute('preserveAspectRatio', "none");
                    $('#' + svgElement.id)[0].setAttribute('viewBox', '0 0 ' + w + ' ' + h);

                    var item = angular.copy(annoItem);
                    item.Page = tmpPenAnnoItem.Page;
                    item.AnnotateType = annotationType.PEN;
                    item.TopPos = t;
                    item.LeftPos = l;
                    item.WidthPos = w;
                    item.HeightPos = h;
                    item.Color = tmpPenAnnoItem.Color;
                    item.BackColor = tmpPenAnnoItem.BackColor;
                    item.Data = newd;
                    item.Data2 = '0 0 ' + w + ' ' + h;
                    item.Scale = 1;
                    item.StrokeWidth = tmpPenAnnoItem.StrokeWidth;
                    item.Opacity = tmpPenAnnoItem.Opacity;
                    $scope.addAnnoItem(item);
                    childNo++;
                    svgNo++;
                    path = null;
                }
            };

            var getMousePosition = function (e) {
                rect = svgElement.getBoundingClientRect();
                return {
                    x: e.pageX - rect.left,
                    y: e.pageY - rect.top
                }
            };

            var appendToBuffer = function (pt) {
                buffer.push(pt);
                while (buffer.length > bufferSize) {
                    buffer.shift();
                }
            };

            // Calculate the average point, starting at offset in the buffer
            var getAveragePoint = function (offset) {
                var len = buffer.length;
                if (len % 2 === 1 || len >= bufferSize) {
                    var totalX = 0;
                    var totalY = 0;
                    var pt, i;
                    var count = 0;
                    for (i = offset; i < len; i++) {
                        count++;
                        pt = buffer[i];
                        totalX += pt.x;
                        totalY += pt.y;
                    }
                    return {
                        x: totalX / count,
                        y: totalY / count
                    }
                }
                return null;
            };

            var updateSvgPath = function () {
                var pt = getAveragePoint(0);

                if (pt) {
                    // Get the smoothed part of the path that will not change
                    var tmpPath = "";
                    if (!lineStraight) {
                        strPath += " L" + pt.x + " " + pt.y;
                        //// Get the last part of the path (close to the current mouse position)
                        //// This part will change if the mouse moves again
                        //for (var offset = 2; offset < buffer.length; offset += 2) {
                        //    pt = getAveragePoint(offset);
                        //    tmpPath += " L" + pt.x + " " + pt.y;
                        //}
                    } else {
                        tmpPath = " L" + pt.x + " " + pt.y;
                    }
                    // Set the complete current path coordinates
                    path.setAttribute("d", strPath + tmpPath);
                }
            };

            $scope.finishLoading = function () {
                var a = pdfjsLib.AnnotationLayer;
                /*const pdfjsLib = require('pdfjs-dist');
                ...
                pdfjsLib.getDocument(pdfPath).then(function (doc) {
                    var numPages = doc.numPages;
                    console.log('# Document Loaded');
                    console.log('Number of Pages: ' + numPages);
                }
                */
                //var numPages=0;
                //pdfjsLib.getDocument(pdfPath).then(function (doc) {
                //    numPages = doc.numPages;
                //});
                //var pg = pdfjsLib.PDFWorker().get
                //var pg=pdfjsLib.getDocument();
                var canvas = $('#page1');
                //alert(pg);
            }

            $scope.pdfRender = function (page, parent) {
                var annoLayerDiv = document.createElement('div');
                annoLayerDiv.className = annoLayerClass;
                annoLayerDiv.setAttribute('page-no', page);
                annoLayerDiv.id = annoLayerClass + page;
                parent.appendChild(annoLayerDiv);
            }

            function dragElement(elmnt) {
                var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
                if (document.getElementById(elmnt.id)) {
                    // if present, the header is where you move the DIV from:
                    document.getElementById(elmnt.id).onmousedown = dragMouseDown;
                } else {
                    //otherwise, move the DIV from anywhere inside the DIV:
                    elmnt.onmousedown = dragMouseDown;
                }

                function dragMouseDown(e) {
                    e = e || window.event;
                    e.preventDefault();
                    // get the mouse cursor position at startup:
                    pos3 = e.clientX;
                    pos4 = e.clientY;
                    console.log('dragMouseDown clientX: ' + e.clientY + ', clientY: ' + e.clientY);
                    document.onmouseup = closeDragElement;
                    // call a function whenever the cursor moves:
                    document.onmousemove = elementDrag;
                }

                function elementDrag(e) {
                    e = e || window.event;
                    e.preventDefault();
                    // calculate the new cursor position:
                    pos1 = pos3 - e.clientX;
                    pos2 = pos4 - e.clientY;
                    pos3 = e.clientX;
                    pos4 = e.clientY;
                    //console.log(selectedNodeId+' | elementDrag clientX: ' + e.clientY + ', clientY: ' + e.clientY);
                    // set the element's new position:
                    elmnt.style.top = (pos2Float(elmnt.style.top) - pos2) + "px";
                    elmnt.style.left = (pos2Float(elmnt.style.left) - pos1) + "px";
                    console.log(selectedNodeId + ' | elementDrag TOP: ' + (elmnt.offsetTop - pos2) + ', LEFT: ' + (elmnt.offsetLeft - pos1));

                    var svg = document.getElementById("svg-selection");
                    //var selNode = document.getElementById(selectedNodeId);
                    //var svg = document.getElementById(selNode.parentNode.id);
                    svg.style.top = (pos2Float(svg.style.top) - pos2) + "px";
                    svg.style.left = (pos2Float(svg.style.left) - pos1) + "px";

                    resizeElement(selectedNodeId);
                }

                function closeDragElement() {
                    // stop moving when mouse button is released:
                    document.onmouseup = null;
                    document.onmousemove = null;
                }
            }


            //$("html").keypress(function (e) {
            //    if ($('.svg-selection')[0].style.display == "none") return;
            //    //alert(svgElement);
            //    if (e.key == 'x' || e.key == 'X') {
            //        if ($scope.selectedLinkNoIdx != -1) {
            //            swal({
            //                title: "Confirmation",
            //                text: "This link will be deleted, are you sure?",
            //                type: "warning",
            //                showCancelButton: true,
            //                closeOnConfirm: false,
            //                confirmButtonColor: "#2196F3",
            //                showLoaderOnConfirm: true,
            //                confirmButtonText: "Yes, delete it!",
            //                cancelButtonText: "No, cancel plx!",
            //            },
            //        function (isConfirm) {
            //            //setTimeout(function () {
            //            if (isConfirm) {
            //                var i = $scope.selectedLinkNoIdx;
            //                $scope.releaseAllSelected();
            //                $scope.links[i].line.remove();
            //                $scope.links.splice(i, 1);
            //                swal.close();
            //            }
            //            //}, 500);

            //        });
            //        }
            //    } else if (e.key == 'c' || e.key == 'C') {
            //        if ($scope.selectedLinkNoIdx != -1) {
            //            var idx = $scope.selectedLinkNoIdx;
            //            if ($scope.links[idx].symbolCode == 'SUBMITCASE')
            //                $scope.popupLinkCase(idx);
            //            else if ($scope.links[idx].symbolCode == 'ALTER')
            //                $scope.popupLinkAlter(idx);
            //        }
            //    }
            //});
            /*--------------------------------------------------------------
                END POPUP MEMBER
            --------------------------------------------------------------*/


        });


        $(function () {

        });

        function clickPointer() {
        }

        $(document).ready(function () {
        })

        function annoSelector(idx) {
            var scope = angular.element(document.getElementById("drdController")).scope();
            scope.$apply(function () {
                scope.annoSelector(idx);
            });
        }

        function pdfRender(page, parent) {
            var scope = angular.element(document.getElementById("drdController")).scope();
                scope.$apply(function () {
                    scope.pdfRender(page, parent);
                });
        }
    </script>

</body>