@{ 
    Layout = null;
}

<script type="text/javascript" src="/assets/js/core/libraries/jquery.min.js"></script>

<script type="text/javascript" src="/assets/js/core/libraries/bootstrap.min.js"></script>
<script type="text/javascript" src="/assets/js/plugins/loaders/blockui.min.js"></script>

<script src="/assets/vendors/angular-1.5.5/angular.js"></script>
<script type="text/javascript" src="/assets/js/core/libraries/bootstrap.min.js"></script>
<script src="/Scripts/ui-bootstrap-tpls-1.3.2.js"></script>

<body ng-app="drdApp">

    <div ng-controller="drdController">
        
        <div class="xannoLayer" style="width:100%;height:300px">
            @*<svg id="svg" width="500px" height="300px" style="border:solid"></svg>*@
        </div>
        <input type="text" class="form-control" ng-model="info" /><br />
        <input type="text" class="form-control" ng-model="state" />
    </div>

    <script type="text/javascript">
        var myApp = angular.module('drdApp', ['ui.bootstrap'])
        myApp.controller("drdController", function ($scope, $location, $http, $filter) {

            $scope.iscreate = false;
            $scope.info = "no info";
            $scope.state = "state";
            var svgElement;
            var path = null;
            var buffer = [];
            var bufferSize = 4;
            var svgPadding = 4.;
            var strokeWidth = 5;
            var opacityColor = 1;
            var lineStraight = false;
            var strPath;
            var penClass = "pen";
            var colorDefault = 'red';
            var colorPen = 'red';

            var counter = 0;

            angular.element(document).ready(function () {

                //$(document).on('mousedown touchstart', ".xannoLayer", layerMouseDown);
                document.addEventListener("mousedown", layerMouseDown);
                document.addEventListener("touchstart", layerMouseDown);

                //svgElement = document.getElementById("svg");
                //svgElement.addEventListener("mousedown", layerMouseDown);
                //svgElement.addEventListener("touchstart", layerMouseDown);
            });

            var isTouchEvent = function (e) {
                return e.type.match(/^touch/);
            }

            var pointerEventToXY = function (e) {
                var out = { x: 0, y: 0 };
                if (e.type == 'touchstart' || e.type == 'touchmove' || e.type == 'touchend' || e.type == 'touchcancel') {
                    var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
                    out.x = touch.pageX;
                    out.y = touch.pageY;
                } else if (e.type == 'mousedown' || e.type == 'mouseup' || e.type == 'mousemove' || e.type == 'mouseover' || e.type == 'mouseout' || e.type == 'mouseenter' || e.type == 'mouseleave') {
                    out.x = e.pageX;
                    out.y = e.pageY;
                }
                return out;
            };

            function recoverOffsetValues(e) {
                if (isTouchEvent(e)) {
                    var rect = e.target.getBoundingClientRect();
                    var bodyRect = document.body.getBoundingClientRect();
                    //var x = e.originalEvent.changedTouches[0].pageX - (rect.left - bodyRect.left);
                    //var y = e.originalEvent.changedTouches[0].pageY - (rect.top - bodyRect.top);
                    ////var x = e.changedTouches[0].pageX - (rect.left);// - bodyRect.left);
                    ////var y = e.changedTouches[0].pageY - (rect.top);// - bodyRect.top);


                    var x = e.targetTouches[0].clientX - (rect.left);// - bodyRect.left);
                    var y = e.targetTouches[0].clientY - (rect.top);// - bodyRect.top);
                    var out = { x: x, y: y };
                    return out;
                } else {
                    //var out = { x: e.offsetX, y: e.offsetY };
                    //var x = e.clientX;
                    //var y = e.clientY;
                    var out = { x: e.offsetX, y: e.offsetY };
                    return out;
                }
            }

            var layerMouseDown = function (e) {
                penMouseDown(e, 1);
                
            }

            var writeInfo = function(str)
            {
                $scope.info = str;
                $scope.$apply();
            }

            var writeState = function (str)
            {
                $scope.state = str;
                $scope.$apply();
            }

            var writeCounter = function () {
                $scope.state = counter++;
                $scope.$apply();
            }

            var penMouseDown = function (e, page) {

                if (!$scope.iscreate) {
                    $scope.iscreate = true;
                    var svg = '<svg id="svg" style="top:0px; left:0px;width:300px;height:200px;border:solid;"></svg>';
                    $(".xannoLayer").append(svg);
                }
                svgElement = document.getElementById("svg");

                
                
                document.addEventListener("mousemove", penMouseMove);
                document.addEventListener("mouseup", penMouseUp);
                document.addEventListener("touchmove", penMouseMove);
                document.addEventListener("touchend", penMouseUp);

                

                writeState("1");

                path = document.createElementNS('http://www.w3.org/2000/svg', 'path');

                writeState("2");

                path.setAttribute("fill", "none");
                path.setAttribute("stroke", colorDefault);
                path.setAttribute("stroke-width", strokeWidth);
                path.setAttribute("style", "cursor:pointer;opacity:" + opacityColor);

                writeState("3");

                buffer = [];
                var pt = {};

                var out = recoverOffsetValues(e);
                writeState("3b");
                pt.x = out.x;//e.offsetX;
                pt.y = out.y;//e.offsetY;

                writeInfo(out.x + " " + out.y);

                appendToBuffer(pt);
                strPath = "M" + pt.x + " " + pt.y;
                path.setAttribute("d", strPath);
                writeState("4");
                svgElement.appendChild(path);
                writeState("5");

                if (isTouchEvent(e)) e.preventDefault();

            }
            var penMouseMove = function (e) {
                
                writeCounter();
                if (path) {
                    var pt = {};
                    var out = recoverOffsetValues(e);
                   
                    pt.x = out.x;
                    pt.y = out.y;
                    writeInfo(pt.x + " " + pt.y);
                    //writeState("7");
                    appendToBuffer(pt);
                    updateSvgPath();
                    //writeState("8");
                }
                if (isTouchEvent(e)) e.preventDefault();
            }

            var penMouseUp = function (e) {
                alert(0);
                document.removeEventListener("mousemove", penMouseMove);
                document.removeEventListener("mouseup", penMouseUp);
                document.removeEventListener("touchmove", penMouseMove);
                document.removeEventListener("touchend", penMouseUp);

                //if (path) {
                //    var rc = svgElement.getBoundingClientRect();
                //    var rect = path.getBoundingClientRect();
                //    var pad = svgPadding * 2;

                //    var d = path.attributes['d'].value;
                //    var ds = d.split(' ');
                //    var newd = "";
                //    var xy = 0;
                //    for (i = 0; i < ds.length; i++) {
                //        var digit1 = "";
                //        var value = 0;
                //        if ($.isNumeric(ds[i]))
                //            value = parseFloat(ds[i]);
                //        else {
                //            digit1 = ds[i].substring(0, 1);
                //            value = parseFloat(ds[i].substring(1));
                //        }

                //        data = digit1 + ((xy != 0 ? value - (rect.top - rc.top) : value - (rect.left - rc.left)) + pad) + " ";
                //        newd += data;
                //        if (xy == 0) xy = 1; else xy = 0;
                //    }
                //    newd += "XX";
                //    newd = newd.replace(' XX', '');
                //    path.setAttribute('d', newd);
                //    //path.setAttribute('id', penClass + svgNo);
                //    path.setAttribute('class', penClass);
                //    //path.setAttribute('onclick', "annoSelector(" + "'" + penClass + svgNo + "'" + ")");

                //    //var t = rect.top - rc.top - pad;
                //    //var l = rect.left - rc.left - pad;
                //    //var w = rect.width + (pad * 2);
                //    //var h = rect.height + (pad * 2);

                //    //$('#' + svgElement.id).css({ 'top': t + 'px' });
                //    //$('#' + svgElement.id).css({ 'left': l + 'px' });
                //    //$('#' + svgElement.id).css({ 'width': w + 'px' });
                //    //$('#' + svgElement.id).css({ 'height': h + 'px' });
                //    //$('#' + svgElement.id).css({ 'pointer-events': 'none' });
                //    //$('#' + svgElement.id)[0].setAttribute('preserveAspectRatio', "none");
                //    //$('#' + svgElement.id)[0].setAttribute('viewBox', '0 0 ' + w + ' ' + h);

                    path = null;
                //}
                    if (isTouchEvent(e)) e.preventDefault();

                    
            }

            var appendToBuffer = function (pt) {
                buffer.push(pt);
                while (buffer.length > bufferSize) {
                    buffer.shift();
                }
            };

            // Calculate the average point, starting at offset in the buffer
            var getAveragePoint = function (offset) {
                var len = buffer.length;
                if (len % 2 === 1 || len >= bufferSize) {
                    var totalX = 0;
                    var totalY = 0;
                    var pt, i;
                    var count = 0;
                    for (i = offset; i < len; i++) {
                        count++;
                        pt = buffer[i];
                        totalX += pt.x;
                        totalY += pt.y;
                    }
                    return {
                        x: totalX / count,
                        y: totalY / count
                    }
                }
                return null;
            };

            var updateSvgPath = function () {
                var pt = getAveragePoint(0);

                if (pt) {
                    // Get the smoothed part of the path that will not change
                    var tmpPath = "";
                    if (!lineStraight) {
                        strPath += " L" + pt.x + " " + pt.y;
                        //// Get the last part of the path (close to the current mouse position)
                        //// This part will change if the mouse moves again
                        //for (var offset = 2; offset < buffer.length; offset += 2) {
                        //    pt = getAveragePoint(offset);
                        //    tmpPath += " L" + pt.x + " " + pt.y;
                        //}
                    } else {
                        tmpPath = " L" + pt.x + " " + pt.y;
                    }
                    // Set the complete current path coordinates
                    path.setAttribute("d", strPath + tmpPath);
                }
            };
        });
    </script>
</body>
 